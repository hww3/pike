/* A very small httpd capable of fetching files only.
 * Written by Fredrik Hübinette as a demonstration of uLPC.
 */

inherit "/precompiled/port";

/* number of bytes to read for each write */
#define BLOCK 16060

/* Where do we have the html files ? */
#define BASE "/home/hubbe/ulpc/src/"

/* File to return when we can't find the file requested */
#define NOFILE "/home/hubbe/www/html/nofile.html"

/* Port to open */
#define PORT 1905

/* Definitions for contents of 'id' */
#define OUTPUT 0
#define FILE   1
#define OFFSET 2
#define INPUT  3

void write_callback(array id)
{
  object output_object;
  int written;
  string data;

  if(output_object=id[OUTPUT])
  {
    output_object->seek(id[OFFSET]);
    data=output_object->read(BLOCK);
    if(strlen(data))
    {
      written=id[FILE]->write(data);
      if(written >= 0)
      {
	id[OFFSET]+=written;
	return;
      }
      perror("Error: "+id[FILE]->errno()+".\n");
    }
    destruct(output_object);
    destruct(id[FILE]);
  }
}

void close_callback(array id)
{
  if(id[FILE]) destruct(id[FILE]);
  if(id[OUTPUT]) destruct(id[OUTPUT]);
}

void read_callback(array id, string request)
{
  object output_object;
  id[INPUT]+=request;
  request=id[INPUT];

  if(sscanf(request,"GET %s%*[\012\015]",request))
  {
    sscanf(request,"%s ",request);
    sscanf(request,"%*[/]%s",request);
    request=combine_path(BASE,request);
    output_object=clone( (program) "/precompiled/file");
    if(!output_object->open(request,"r"))
    {
      if(!output_object->open(NOFILE,"r"))
      {
	perror("Couldn't find default file.\n");
	destruct(id[FILE]);
	return 0;
      }
    }

    id[OUTPUT]=output_object;
    id[OFFSET]=0;
    id[FILE]->set_buffer(65536,"w");
    write_callback(id);
  }
}

void accept_callback()
{
  object output_object=accept();
  if(!output_object) return;
  output_object->set_id( ({0, output_object, 0, "" }) );
  output_object->set_nonblocking(read_callback,write_callback,close_callback);
}

void main(int argc, string *argv)
{
  perror("Starting minimal httpd\n");

  if(!bind(PORT, accept_callback))
  {
    perror("Failed to open socket (already bound?)\n");
    return 17;
  }

  return - 17; /* Keep going */
}

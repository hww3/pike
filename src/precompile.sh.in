#!/bin/sh

#set -x
if [ x"$1" = x--cache ]; then
  CACHE_OUTPUT=yes
  shift 1
else
  CACHE_OUTPUT=no
fi

if [ x"$1" = xprecompile.pike ] ; then
  if $(pike -x 2>&1 | grep precompile > /dev/null 2>&1) ; then
    exec pike -x precompile "$@"
  fi
fi

exec 5>&1 1>&2

TMP_BUILDDIR="@BUILDDIR@"
TMP_BINDIR="@BINDIR@"
LIBDIR_SRC="@LIBDIR@"
SRCDIR="@srcdir@"
PREDIR="$TMP_BUILDDIR/precompile"

export TMP_BUILDDIR
export LIBDIR_SRC
export TMP_BUILDDIR
export SRCDIR

retries=.

if test "@CROSS@" = "yes"; then
  method="QQQQQ"
  retries="....."
else :; fi

test -d "$PREDIR" || mkdir "$PREDIR"

if test -f "$PREDIR/method" ; then
  . "$PREDIR/method"
else
  :
fi

old_method="${method-}"

OLD_RUNPIKE="$RUNPIKE"

SCRIPT="$1"
shift 1

case "$SCRIPT" in
  /*|./*)
    if test -f "$SCRIPT"; then :; else
      echo "Script $SCRIPT not found."
      exit 1
    fi
  ;;
  *)
    if test -f ./$SCRIPT ; then
      :
    elif test -f "$TMP_BINDIR/$SCRIPT"; then
      SCRIPT="$TMP_BINDIR/$SCRIPT"
    else
      echo "Script $SCRIPT neither found in the current directory nor in $TMP_BINDIR."
      exit 1
    fi
  ;;
esac

if [ $CACHE_OUTPUT = yes ]; then
  for arg
  do
    INPUT="$arg"
  done
  TMPOUTPUT="${INPUT}.compiled"

  if [ -f "$TMPOUTPUT" ]; then
    if [ "`ls -1Lt $TMPOUTPUT $INPUT $SCRIPT 2>/dev/null | head -n 1`" = "`ls -1Lt $TMPOUTPUT`" ]; then
      cat "$TMPOUTPUT" >&5
      exit 0
    fi
  fi
else
  TMPOUTPUT=x
fi

test $CACHE_OUTPUT = yes && trap 'rm -rf "$TMPOUTPUT" ; exit 1' 1 2 15

while test "$retries" != .............. ; do

RUNPIKE=
case $method in
  Q)
    RUNPIKE="$TMP_BUILDDIR/pike -DNOT_INSTALLED -DPRECOMPILED_SEARCH_MORE -m$TMP_BUILDDIR/master.pike $PIKEOPTS"
  ;;
  QQ)
    RUNPIKE="$TMP_BUILDDIR/tpike -DNOT_INSTALLED -DPRECOMPILED_SEARCH_MORE -m$TMP_BUILDDIR/master.pike $PIKEOPTS"
  ;;
  QQQ)
    RUNPIKE=$TMP_BUILDDIR/test-pike
  ;;
  QQQQ)
    if test x"$OLD_RUNPIKE" != x; then
      LAST_PIKE="$OLD_RUNPIKE"
      method=QQQQQ
      RUNPIKE="$OLD_RUNPIKE"
    else
      RUNPIKE=""
    fi
  ;;
  QQQQQ)
    LAST_PIKE=pike
    method=QQQQQQ
    RUNPIKE="$LAST_PIKE"
  ;;
  QQQQQQ)
    RUNPIKE="$LAST_PIKE"
    LAST_PIKE=pike
  ;;
  QQQQQQQ)
    ifs_save="${IFS- 	}"
    IFS=" :"
    for dir in $PATH
    do
      for p in pike pike71 pike72 pike73
      do
        if [ -x $dir/$p ]; then
          if [ "x$LAST_PIKE" = xpike ] ; then
            LAST_PIKE=$dir/$p
            RUNPIKE="$dir/$p"
            break
          fi

          if [ "x$LAST_PIKE" = "x$dir/$p" ]; then
            LAST_PIKE=pike
          fi
        fi
      done
      if [ "x$RUNPIKE" != x ]; then
	method=QQQQQQ
        break
      fi
    done
    IFS="${ifs_save}"
  ;;
  QQQQQQQQ)
    method=
  ;;
esac

if test "x${RUNPIKE-}" != x ; then
echo "precompile: $RUNPIKE $SCRIPT $@ (method=$method)"

if [ $CACHE_OUTPUT = yes ]; then
  $RUNPIKE $SCRIPT "$@" >"$TMPOUTPUT"
else
  $RUNPIKE $SCRIPT "$@" >&5
fi

if [ $? = 0 ]; then

cat > "$PREDIR/method.$$" <<EOF && \
  mv "$PREDIR/method.$$" "$PREDIR/method"
LAST_PIKE="$LAST_PIKE"
method="$method"
#retries="$retries"
EOF

  test $CACHE_OUTPUT = yes && cat "$TMPOUTPUT" >&5
exit 0
else
  test $CACHE_OUTPUT = yes && rm "$TMPOUTPUT"
fi
fi

method="Q$method"
retries=".$retries"

done # retry
# Total failure

echo "Failed to find a Pike executable that could run $SCRIPT."

exit 1

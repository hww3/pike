* Det st}r inte var man skall skicka buggrapporter.
	fixed

* .../modules/math/math.c f_ceil har felaktigt stavade 
  felmeddelanden.
	fixed

* toupper / tolower anv{nder inte LOCALE
	fixed

* inherit funkar inte
	fixed

* fel i felmedelandena i explode
	fixed

* indexering p} mixed
	fixed

* sp->  should be sp[-1].  in expand define
	fixed

* handle include forgot to add ref to a string
	fixed

* end_program freed inherit_names twice if there had been an error
	fixed

* implode allocated too little memory
	fixed

* MEMMEM locked up
	fixed

* include didn't set current_file back
	fixed

* inherit offset was defined wrong, caused driver crashes
	fixed

* ! "" returned 1
	fixed

* addition of arrays, lists and mappings dumped core
	hopefully fixed

* ulpc -t hung
	fixed

* replace didn't work
	fixed

* subtract on mappings, lists and arrays didn't work
	hopefully fixed

* runtime typechecking in multiply, divide and modulo didn't work
	fixed

* equal bugged on compact arrays
	hopefully fixed

* lots of refcount-bugs in operators.c
	fixed

* ... didn't work if too few arguments were given
	fixed

* %{ %} didn't work in sprint
	fixed

* many of the math functions didn't work
	fixed

* indexing outside of string could crash ulpc
	fixed

* #if efun() always returned true
	fixed

* combine_path doesn't work
	fixed

* multiple replace didn't work
	fixed

* search() didn't work
	fixed

* ctime(time()) give strange results
	fixed

* function returning void doesn't match 'function' ?
	fixed

* constant functionpointers pointed wrong when inherited
	fixed

* range on compact arrays didn't work
	fixed

* implode on empty arrays didn't work
	fixed

* @ on arrays with only one ref didn't work
	fixed

* call_outs didn't work
	fixed
* find call_out didn't work
	fixed

* type_field wrong after check_array_for_destruct
	fixed

* range on arrays dumped core on some machines
	fixed

* "foo"[0..-9] didn't work
	fixed

* string comparisment (< <= > >=) could fail when comparing with ""
	fixed

* array_remove bugged sometimes
	fixed

* f_ltosval2 bugged
	fixed

* compile_file forgot to add a reference to the program
	fixed

* free_short_svalue forgot to free destination
	fixed

* destruct didn't really work (didn't free global variables correctly)
	fixed

* destructing current object (or any object in the history) bugged
	hopefully fixed

* file->open() couldn't create files
	now it can

* set_read_callback & set_write_callback sometimes accessed fd -1
	fixed

* throw() made fatal() when popping all error contexts
	fixed

* trace mode doesn't work very well when setting stdin/out/err nonblocking.
	fixed

* resize array didn't work
	fixed

* implode didn't work right with an empty firtst element
	fixed

* MEMMEM didn't on a x86 byteorder
	fixed

* count_args didn't know what foreach returned
	fixed

* lost objects were not destructed
	fixed

* stack was corrupt at close_callback
	fixed

* destructing an object twice led to core dumps
	fixed

* spawed process weren't waited upon
	fixed

* bug in merge_array (subtract)
	fixed

* while ( -- i)  dumps core?
	fixed

* search didn't work on compact arrays (4 bytes / value)
	fixed

* sorting an empty mapping caused malloc(0)
	fixed

* open trashed memory if returned fd was larger than MAX_FD
	fixed

* time() was wrong in setup code
	fixed

* there was a bug with destructed objects in check_array_for_destruct
	fixed

* casting an int to a float didn't work
	fixed

* check_short_destructed crashed sometimes
	fixed

* check_short_svalue crashed sometimes
	fixed

* is_eq didn't work for programsd
	fixed

* sscanf("-","%*d") returned 1
	fixed

* sys/select.h was missing in backend.c
	fixed

* assigning list indexes removed when it should add and vice versa
	fixed

* merge_mapping/merge_list had memory leaks.
	fixed

* mkdir() could do strange things with it's second argument
	fixed


* shrink_array didn't free svalues it should sometimes
	fixed (thanks per)

* backtrace() generated illegal arrays if describing destructed objects
	fixed

* setrlimit in main() didn't work
	fixed

* line numbers are bugged after include sometimes
	fixed

* replace bugged on 8-bit characters
	fixed

* now you can use __LINE__ and __FILE__ and #error

* sscanf("1a","%d%c",a,b) -> 2 (a=1, b="1a") ?
	fixed

* allocate(10,"object") didn't work
	fixed

* allocate(-10) worked
	fixed

* #elif and #elseif behaved incorrectly
	fixed

* switch didn't exactly work as specified
	fixed

* calling prototypes -> hang (should be error)
	fixed

* sscanf("foo-%-bar"%s-%%-%s",a,b); didn't work
	fixed

* machines with strange byteorders that didn't handle unaligned reads/write
  jumped into space because EXTRACT_INT didn't work
	fixed

* Didn't work on 64-bit-machines (alpha for instance)
	fixed

* the macro ALIGN interfered with some standard include files on
  some systems
	fixed

* destruct and this_object() dumped core if called directly from driver
	fixed

* test for working memmove in configure.in was broken
	fixed

* there was some casts used as lvalues in memory.c
	fixed

* modules/files/efun.c didn't compile on some systems that doesn't have
  MAXPATHLEN defined, in this case we just define it to 32768
	fixed

* signals only worked once
	fixed

* configure didn't find alloca if it was hideing in libPW
	hopefully fixed

* calling void functions directly from driver callbacks causes coredumps
	fixed

* signal handlers are not called while file->read is blocking
	fixed

Version: 1.0E-15:

* typechecking could dump core in lambda functions
	fixed

* I should use a changelog instead of this file
	fixed

Still to do:

* really large constant arrays crashes uLPC

* need some way of using shared and non-shared module dirs..

* Also modules need to be able to add libraries to linker stage

* setup_fake_program is called too often, I should keep fake_program updated instead

* foreach somtimes says 'bad argument 1 to foreach' after a completed loop (according to Per)

* there are still memory access bugs (it seems) (maybe) (or maybe not)

* #define foo bar, and then foo(1) does not work..

* all variables aren't initialized ?

* 'array' does not match 'string *' ? (in function calls)

* compile errors generate memory leaks

* file->write bugs when given a zero as argument?

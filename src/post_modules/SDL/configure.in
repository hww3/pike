# $Id$
AC_INIT(SDL.cmod)

AC_MODULE_INIT()
AC_CONFIG_HEADER(sdl_config.h)

PIKE_FEATURE_NODEP(SDL)
PIKE_FEATURE_NODEP(SDL_mixer)

AC_MSG_CHECKING(for SDL_Init in SDL.framework -lsdl)
AC_CACHE_VAL(pike_cv_option_framework_SDL, [
  OLD_CFLAGS=$CFLAGS
  CFLAGS="$CFLAGS -framework SDL"
  OLD_LIBS="$LIBS"
  LIBS="$LIBS -framework SDL"
  AC_TRY_LINK([
#include <SDL/SDL.h>
#undef main
  ], [
    SDL_Init(0);
  ], [pike_cv_option_framework_SDL=yes],[pike_cv_option_framework_SDL=no])
  CFLAGS="$OLD_CFLAGS"
  LIBS="$OLD_LIBS"
])
AC_MSG_RESULT($pike_cv_option_framework_SDL)
if test x"$pike_cv_option_framework_SDL" = xyes; then
  SDL_CFLAGS="-framework SDL"
  SDL_LIBS="-framework SDL"
  AC_DEFINE_UNQUOTED(HAVE_SDL_SDL_H)
  AC_DEFINE_UNQUOTED(HAVE_SDL)
else

dnl AM_PATH_SDL([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
dnl Test for SDL, and define SDL_CFLAGS and SDL_LIBS
dnl
AC_DEFUN(AM_PATH_SDL,
[dnl 
dnl Get the cflags and libraries from the sdl-config script
dnl
AC_ARG_WITH(sdl-prefix,[  --with-sdl-prefix=PFX   Prefix where SDL is installed (optional)],
            sdl_prefix="$withval", sdl_prefix="")
AC_ARG_WITH(sdl-exec-prefix,[  --with-sdl-exec-prefix=PFX Exec prefix where SDL is installed (optional)],
            sdl_exec_prefix="$withval", sdl_exec_prefix="")
AC_ARG_ENABLE(sdltest, [  --disable-sdltest       Do not try to compile and run a test SDL program],
		    , enable_sdltest=yes)

  if test x$sdl_exec_prefix != x ; then
     sdl_args="$sdl_args --exec-prefix=$sdl_exec_prefix"
     if test x${SDL_CONFIG+set} != xset ; then
        SDL_CONFIG=$sdl_exec_prefix/bin/${ac_tool_prefix}sdl-config
     fi
  fi
  if test x$sdl_prefix != x ; then
     sdl_args="$sdl_args --prefix=$sdl_prefix"
     if test x${SDL_CONFIG+set} != xset ; then
        SDL_CONFIG=$sdl_prefix/bin/${ac_tool_prefix}sdl-config
     fi
  fi

  dnl AC_REQUIRE([AC_CANONICAL_TARGET])
  AC_PATH_PROG(SDL_CONFIG, ${ac_tool_prefix}sdl-config, no)
  min_sdl_version=ifelse([$1], ,0.11.0,$1)
  AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
  no_sdl=""
  if test "$SDL_CONFIG" = "no" ; then
    no_sdl=yes
  else
    SDL_CFLAGS=`$SDL_CONFIG $sdlconf_args --cflags`
    SDL_LIBS=`$SDL_CONFIG $sdlconf_args --libs`

    sdl_major_version=`$SDL_CONFIG $sdl_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
    sdl_minor_version=`$SDL_CONFIG $sdl_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
    sdl_micro_version=`$SDL_CONFIG $sdl_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
    if test "x$enable_sdltest" = "xyes" ; then
      ac_save_CFLAGS="$CFLAGS"
      ac_save_LIBS="$LIBS"
      CFLAGS="$CFLAGS $SDL_CFLAGS"
      LIBS="$LIBS $SDL_LIBS"
dnl
dnl Now check if the installed SDL is sufficiently new. (Also sanity
dnl checks the results of sdl-config to some extent
dnl
      rm -f conf.sdltest
      AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define _SDL_main_h 1
#include "SDL.h"

char*
my_strdup (char *str)
{
  char *new_str;
  
  if (str)
    {
      new_str = (char *)malloc ((strlen (str) + 1) * sizeof(char));
      strcpy (new_str, str);
    }
  else
    new_str = NULL;
  
  return new_str;
}

int main (int argc, char *argv[])
{
  int major, minor, micro;
  char *tmp_version;
  const SDL_version *link_version;

  /* This hangs on some systems (?)
  system ("touch conf.sdltest");
  */
  { FILE *fp = fopen("conf.sdltest", "a"); if ( fp ) fclose(fp); }

  /* HP/UX 9 (%@#!) writes to sscanf strings */
  tmp_version = my_strdup("$min_sdl_version");
  if (sscanf(tmp_version, "%d.%d.%d", &major, &minor, &micro) != 3) {
     printf("%s, bad version string\n", "$min_sdl_version");
     exit(1);
   }

  if (SDL_COMPILEDVERSION != SDL_VERSIONNUM($sdl_major_version, $sdl_minor_version, $sdl_micro_version))
    {
      printf("\n*** 'sdl-config --version' returned %d.%d.%d, but SDL (%d.%d.%d)\n",
             $sdl_major_version, $sdl_minor_version, $sdl_micro_version,
             SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL);
      printf ("*** header files were found! If sdl-config was correct, then it is best\n");
      printf ("*** to remove the old version of SDL.\n");
      printf("*** If sdl-config was wrong, set the environment variable SDL_CONFIG\n");
      printf("*** to point to the correct copy of sdl-config, and remove the file config.cache\n");
      printf("*** before re-running configure\n");
      return 1;
    }

  if ((link_version = SDL_Linked_Version()) == NULL)
    {
      printf("SDL_Linked_Version() failed\n");
      exit(1);    
    }

  if (SDL_VERSIONNUM(link_version->major,link_version->minor,link_version->patch) != SDL_VERSIONNUM($sdl_major_version, $sdl_minor_version, $sdl_micro_version))
    {
      printf("\n*** 'sdl-config --version' returned %d.%d.%d, but SDL (%d.%d.%d)\n",
             $sdl_major_version, $sdl_minor_version, $sdl_micro_version,
             link_version->major, link_version->minor, link_version->patch);
      printf ("*** libraries were found! If sdl-config was correct, then it is best\n");
      printf ("*** to remove the old version of SDL. You may also be able to fix the error\n");
      printf("*** by modifying your LD_LIBRARY_PATH enviroment variable, or by editing\n");
      printf("*** /etc/ld.so.conf. Make sure you have run ldconfig if that is\n");
      printf("*** required on your system.\n");
      printf("*** If sdl-config was wrong, set the environment variable SDL_CONFIG\n");
      printf("*** to point to the correct copy of sdl-config, and remove the file config.cache\n");
      printf("*** before re-running configure\n");
      return 1;
    }

   if (($sdl_major_version > major) ||
      (($sdl_major_version == major) && ($sdl_minor_version > minor)) ||
      (($sdl_major_version == major) && ($sdl_minor_version == minor) && ($sdl_micro_version >= micro)))
    {
      return 0;
    }
  else
    {
      printf("\n*** 'sdl-config --version' returned %d.%d.%d, but the minimum version\n", $sdl_major_version, $sdl_minor_version, $sdl_micro_version);
      printf("*** of SDL required is %d.%d.%d. If sdl-config is correct, then it is\n", major, minor, micro);
      printf("*** best to upgrade to the required version.\n");
      printf("*** If sdl-config was wrong, set the environment variable SDL_CONFIG\n");
      printf("*** to point to the correct copy of sdl-config, and remove the file\n");
      printf("*** config.cache before re-running configure\n");
      return 1;
    }
}

],, no_sdl=yes,[echo $ac_n "cross compiling; assumed OK... $ac_c"])
       CFLAGS="$ac_save_CFLAGS"
       LIBS="$ac_save_LIBS"
     fi
  fi
  if test "x$no_sdl" = x ; then
     AC_MSG_RESULT(yes)
     ifelse([$2], , :, [$2])     
  else
     AC_MSG_RESULT(no)
     if test "$SDL_CONFIG" = "no" ; then
       echo "*** The sdl-config script installed by SDL could not be found"
       echo "*** If SDL was installed in PREFIX, make sure PREFIX/bin is in"
       echo "*** your path, or set the SDL_CONFIG environment variable to the"
       echo "*** full path to sdl-config."
     else
       if test -f conf.sdltest ; then
        :
       else
          echo "*** Could not run SDL test program, checking why..."
          CFLAGS="$CFLAGS $SDL_CFLAGS"
          LIBS="$LIBS $SDL_LIBS"
          AC_TRY_LINK([
#include <stdio.h>
#define _SDL_main_h 1
#include "SDL.h"

int main(int argc, char *argv[])
{ return 0; }
#undef  main
#define main K_and_R_C_main
],      [ return 0; ],
        [ echo "*** The test program compiled, but did not run. This usually means"
          echo "*** that the run-time linker is not finding SDL or finding the wrong"
          echo "*** version of SDL. If it is not finding SDL, you'll need to set your"
          echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
          echo "*** to the installed location  Also, make sure you have run ldconfig if that"
          echo "*** is required on your system"
	  echo "***"
          echo "*** If you have an old version installed, it is best to remove it, although"
          echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH"],
        [ echo "*** The test program failed to compile or link. See the file config.log for the"
          echo "*** exact error that occurred. This usually means SDL was incorrectly installed"
          echo "*** or that you have moved SDL since it was installed. In the latter case, you"
          echo "*** may want to edit the sdl-config script: $SDL_CONFIG" ])
          CFLAGS="$ac_save_CFLAGS"
          LIBS="$ac_save_LIBS"
       fi
     fi
     SDL_CFLAGS=""
     SDL_LIBS=""
     ifelse([$3], , :, [$3])
  fi
  AC_SUBST(SDL_CFLAGS)
  AC_SUBST(SDL_LIBS)
  rm -f conf.sdltest
])

dnl Check for SDL
SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION, [],[])
fi

if test x"$SDL_CFLAGS" = "x" ; then :; else
	PIKE_FEATURE_OK(SDL)
	CFLAGS="$CFLAGS $SDL_CFLAGS"
	LIBS="$LIBS $SDL_LIBS"
	AC_DEFINE(HAVE_SDL)
	
	# Try to add SDL11 to include path.
	real_include_dirs=''
	for flag in $CPPFLAGS; do
	  case "$flag" in
	   -I*)
	     d="`echo Q$flag|sed -e 's/^Q-I//'`/SDL11"
             AC_MSG_CHECKING($d)
	     if test -d "$d/."; then
	       REALDIR="`cd $d/. ; /bin/pwd`"
               if test "x$REALDIR" = x ; then
                 REALDIR=UNKNOWN
               else
                 :
               fi

               case " $CPPFLAGS $real_include_dirs " in
                 *\ -I$d\ * | *\ -I$REALDIR\ *)
                   AC_MSG_RESULT(already added)
                 ;;
                 *)
	           OLD_CPPFLAGS="${CPPFLAGS}"
                   CPPFLAGS="${CPPFLAGS} -I$d"
	           AC_TRY_CPP([include <stdio.h>], [
                     AC_MSG_RESULT(added)
                     if test "x$REALDIR" != xUNKNOWN; then
                       real_include_dirs="${real_include_dirs} -I$REALDIR"
                     else
                       :
                     fi
	           ], [
	             AC_MSG_RESULT(fails)
		     CPPFLAGS="${OLD_CPPFLAGS}"
	           ])
                 ;;
	       esac
	     else
	       AC_MSG_RESULT(no)
	     fi
             ;;
          esac
        done

	AC_CHECK_LIB(SDL_mixer, Mix_OpenAudio)
	AC_CHECK_HEADERS(SDL_mixer.h SDL/SDL_mixer.h)
	if test x$ac_cv_header_SDL_mixer_h = xyes -o \
		x$ac_cv_header_SDL_SDL_mixer_h = xyes; then
          if test x$ac_cv_lib_SDL_mixer_Mix_OpenAudio = xyes; then
            PIKE_FEATURE_OK(SDL_mixer)
          fi
        fi

        AC_CACHE_VAL(pike_cv_sdl_joystick,
        [
            AC_MSG_CHECKING([if libSDL has joystick support])
    	    AC_TRY_LINK([
                    #define _SDL_main_h 1
                    #include <SDL.h>
                ],[
                    return SDL_JoystickEventState(1);
                ],[ AC_MSG_RESULT(yes)
                    pike_cv_sdl_joystick=yes 
                ],[ AC_MSG_RESULT(no)
                    pike_cv_sdl_joystick=no
                ])
        ])
        if test "x${pike_cv_sdl_joystick}" = "xyes" ; then
           AC_DEFINE(HAVE_LIBSDL_JOYSTICK)
        fi
fi


AC_OUTPUT(Makefile,echo FOO >stamp-h )

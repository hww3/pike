/* -*- C -*- */
require gtk24;

class GTK2.EntryCompletion;
inherit G.Object;
inherit GTK2.CellLayout;

//! Properties:
require gtk26;
//! int inline-completion
endrequire;
//! int minimum-key-length
//! GTK2.TreeModel model
require gtk26;
//! int popup-completion
require gtk28;
//! int popup-single-match
endrequire;
//! int text-column
endrequire;

signal action_activated;
require gtk26;
signal insert_prefix;
endrequire;
signal match_selected;

void create(?mapping(string:mixed) props)
//! Creates a new widget.
{
  pgtk2_verify_not_inited();
  pgtk2_verify_setup();
  if (args) {
    INIT_WITH_PROPS(GTK_TYPE_ENTRY_COMPLETION);
    pgtk2_pop_n_elems(args);
  } else {
    GtkEntryCompletion *ge;
    ge=gtk_entry_completion_new();
    THIS->obj=G_OBJECT(ge);
  }
  pgtk2__init_this_object();
}

+GTK2.Widget get_entry();
//! Gets the entry this widget has been attached to.

void set_model(?GTK2.TreeModel model)
//! Sets the model.  If this completion already has a model set, it will
//! remove it before setting the new model.  If omitted it will unset the
//! model.
{
  pgtk2_verify_inited();
  if (args) {
    struct object *o1;
    get_all_args("set_model",args,"%o",&o1);
    gtk_entry_completion_set_model(GTK_ENTRY_COMPLETION(THIS->obj),
		GTK_TREE_MODEL(get_gobject(o1)));
  } else {
    gtk_entry_completion_set_model(GTK_ENTRY_COMPLETION(THIS->obj),NULL);
  }
  RETURN_THIS();
}

+GTK2.TreeModel get_model();
//! Returns the model being used as the data source.

void set_minimum_key_length(int length);
//! Requires the length of the search key to be at least length long.  This is
//! useful for long lists, where completing using a small key takes a lot of
//! time and will come up with meaningless results anyway (i.e. a too large
//! dataset).

int get_minimum_key_length();
//! Returns the minimum key length.

void complete();
//! Requests a completion operation, or in other words a refiltering of the
//! current list with completions, using the current key.  The completion list
//! view will be updated accordingly.

require gtk26;
void insert_prefix();
//! Requests a prefix insertion.
endrequire;

void insert_action_text(int index, string text);
//! Inserts an action in the action item list at position index with the
//! specified text.  If you want the action item to have markup, use
//! insert_action_markup().

void insert_action_markup(int index, string markup);
//! Inserts an action in the action item list at position index with the
//! specified markup.

void delete_action(int index);
//! Deletes the action at index.

void set_text_column(int column);
//! Convenience function for setting up the most used case of this code: a
//! completion list with just strings.  This function will set up the
//! completion to have a list displaying all (and just) strings in the list,
//! and to get those strings from column column in the model.

require gtk26;
int get_text_column();
//! Returns the column in the model to get strings from.

void set_inline_completion(int inline_completion);
//! Sets whether the common prefix of the possible completions should be
//! automatically inserted in the entry.

int get_inline_completion();
//! Returns whether the common prefix of the possible completions should be
//! automatically inserted in the entry.

void set_popup_completion(int setting);
//! Sets whether the completions should be presented in a popup window.

int get_popup_completion();
//! Returns whether completions should be presented in a popup window.
endrequire;

require gtk28;
void set_popup_set_width(int setting);
//! Sets whether the completion popup window will be resized to be the same
//! width as the entry.

int get_popup_set_width();
//! Returns whether the completion popup window will be resized to the width
//! of the entry.

void set_popup_single_match(int setting);
//! Sets whether the completion popup window will appear even if there is only
//! a single match.  YOu may want to set this to 0 if you are using inline
//! completion.

int get_popup_single_match();
//! Returns whether the completion popup window will appear even if there is
//! only a single match.
endrequire;

endrequire;

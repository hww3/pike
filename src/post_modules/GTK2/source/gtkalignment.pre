/* -*- C -*- */
class GTK2.Alignment;
inherit GTK2.Bin;

//! The W(Alignment) widget controls the alignment and size of its
//! child widget. It has four settings: xscale, yscale, xalign, and
//! yalign.
//! <p>
//! The scale settings are used to specify how much the child widget
//! should expand to fill the space allocated to the W(Alignment). The
//! values can range from 0 (meaning the child doesn't expand at all)
//! to 1 (meaning the child expands to fill all of the available
//! space).
//! </p><p>
//! The align settings are used to place the child widget within the
//! available area. The values range from 0 (top or left) to 1 (bottom
//! or right). Of course, if the scale settings are both set to 1, the
//! alignment settings have no effect.
//! </p>
//! NOIMG

//! Properties:
//! int bottom-padding
//! int left-padding
//! int right-padding
//! int top-padding
//! float xalign
//! float xscale
//! float yalign
//! float yscale

void create(float|mapping(string:int) xalign_or_props, ?float yalign, 
	    ?float xscale, ?float yscale)
//! <table>
//! <tr><td>xalign :</td>
//! <td>the horizontal alignment of the child widget, from 0 (left) to 1 (right).</td></tr>
//! <tr><td>                  yalign :</td>
//! <td>the vertical alignment of the child widget, from 0 (top) to 1 (bottom).</td></tr>
//! <tr><td>                  xscale :</td>
//! <td>the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the GTK2.Alignment.</td></tr>
//! <tr><td>                  yscale :</td>
//! <td>the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to xscale.</td></tr>
//! </table>
{
  pgtk2_verify_not_inited();
  pgtk2_verify_setup();
  if (args==4) {
    FLOAT_TYPE xalign,yalign,xscale,yscale;
    GtkWidget *ga;
    get_all_args("create",args,"%f%f%f%f",&xalign,&yalign,&xscale,&yscale);
    ga=gtk_alignment_new(xalign,yalign,xscale,yscale);
    THIS->obj=G_OBJECT(ga);
  } else {
    INIT_WITH_PROPS(GTK_TYPE_ALIGNMENT);
  }
  pgtk2_pop_n_elems(args);
  pgtk2__init_this_object();
}

void set(float xalign, float yalign, float xscale, float yscale);
//! <table>
//! <tr><td>xalign :</td>
//! <td>the horizontal alignment of the child widget, from 0 (left) to 1 (right).</td></tr>
//! <tr><td>                  yalign :</td>
//! <td>the vertical alignment of the child widget, from 0 (top) to 1 (bottom).</td></tr>
//! <tr><td>                  xscale :</td>
//! <td>the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the GTK2.Alignment.</td></tr>
//! <tr><td>                  yscale :</td>
//! <td>the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to xscale.</td></tr>
//! </table>

require gtk24;
void set_padding(int padding_top, int padding_bottom,
	int padding_left, int padding_right);
//! Sets the padding on the different sides.
endrequire;

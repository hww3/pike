/* -*- C -*- */
class GTK2.Statusbar;
inherit GTK2.Hbox;

//! Statusbars are simple widgets used to display a text message. They
//! keep a stack of the messages pushed onto them, so that popping the
//! current message will re-display the previous text message.
//!  <p>
//! In order to allow different parts of an application to use the same
//! statusbar to display messages, the statusbar widget issues Context
//! Identifiers which are used to identify different 'users'. The
//! message on top of the stack is the one displayed, no matter what
//! context it is in. Messages are stacked in last-in-first-out order,
//! not context identifier order.
//!  </p><p>
//! IMG: lambda() {object sb = GTK2.Statusbar();int id = sb->get_context_id("test");sb->push(id,"A message");sb->push(id,"Another message");return sb;}()
//! IMG: lambda() {object sb = GTK2.Statusbar();int id = sb->get_context_id("test");sb->push(id,"A message");sb->push(id,"Another message");sb->pop(id);return sb;}()
//! </p>

//! Properties:
//! int has-resize-grip
//! <p>
//! Style properties:
//! int shadow-type

signal text_pushed;
signal text_popped;

void create(?mapping(string:mixed) props)
//! Create a new statusbar widget
{
  pgtk2_verify_not_inited();
  pgtk2_verify_setup();
  if (args) {
    INIT_WITH_PROPS(GTK_TYPE_STATUSBAR);
    pgtk2_pop_n_elems(args);
  } else {
    GtkWidget *gs;
    gs=gtk_statusbar_new();
    THIS->obj=G_OBJECT(gs);
  }
  pgtk2__init_this_object();
}


int get_context_id(string context);
//! Create a new context id (or get the id of an old one). The argument
//! is any string. The return value can be used for -&gt;push() -&gt;pop()
//! and -&gt;remove later on.

int push(int context, string data);
//! Push a message onto the statusbar. The return value is an id that
//! can be passed to remove later on.

void pop(int context);
//! Remove the topmost message.

void remove(int context, int id);
//! Remove the specified message (the message id is the second argument).

void set_has_resize_grip(int setting);
//! Sets whether the statusbar has a resize grip.  TRUE by default.

int get_has_resize_grip();
//! Returns whether the statusbar has a resize grip.

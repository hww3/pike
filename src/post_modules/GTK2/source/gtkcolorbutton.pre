/* -*- C -*- */
require gtk24;

class GTK2.ColorButton;
inherit GTK2.Button;

//! Properties:
//! int alpha
//! GDK2.Color color
//! string title
//! int use-alpha

signal color_set;

//! When a user selects a color.
void create(GDK2.Color|mapping(string:mixed)|int|void red_or_props, ?int green, ?int blue)
//! Create a new W(ColorButton).
{
  pgtk2_verify_not_inited();
  pgtk2_verify_setup();
  if (args) {
    if (Pike_sp[-args].type==PIKE_T_INT) {
      GdkColor color;
      GtkWidget *gcb;
      INT_TYPE red, green, blue;
      color.pixel=0;
      get_all_args("create",args,"%i%i%i",&red,&green,&blue);
      color.red = (guint16)red;
      color.green = (guint16)green;
      color.blue = (guint16)blue;
      gcb=gtk_color_button_new_with_color(&color);
      THIS->obj=G_OBJECT(gcb);
    } else if (Pike_sp[-args].type==PIKE_T_OBJECT) {
      struct object *o1;
      GdkColor *col;
      GtkWidget *gcb;
      get_all_args("create",args,"%o",&o1);
      col=(GdkColor *)get_gdkobject(o1,color);
      if (col)
	gcb=gtk_color_button_new_with_color(col);
      else
	gcb=gtk_color_button_new();
      THIS->obj=G_OBJECT(gcb);
    } else {
      INIT_WITH_PROPS(GTK_TYPE_COLOR_BUTTON);
    }
    pgtk2_pop_n_elems(args);
  } else {
    GtkWidget *gcb;
    gcb=gtk_color_button_new();
    THIS->obj=G_OBJECT(gcb);
  }
  pgtk2__init_this_object();
}

void set_color(int red, int green, int blue)
//! Sets the current color.
{
  pgtk2_verify_inited();
  {
    GdkColor gcolor;
    if (args<3)
      Pike_error("Too few arguments, %d reguired, got %d\n",3,args);
    gcolor.red=(guint16)PGTK_GETINT(&Pike_sp[0-args]);
    gcolor.green=(guint16)PGTK_GETINT(&Pike_sp[1-args]);
    gcolor.blue=(guint16)PGTK_GETINT(&Pike_sp[2-args]);
    gtk_color_button_set_color(GTK_COLOR_BUTTON(THIS->obj),&gcolor);
  }
  RETURN_THIS();
}

GDK2.Color get_color()
//! Returns the current color.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  {
    GdkColor *color;
    color=(GdkColor *)g_malloc(sizeof(GdkColor));
    if (color==NULL)
      SIMPLE_OUT_OF_MEMORY_ERROR("get_color",sizeof(GdkColor));
    gtk_color_button_get_color(GTK_COLOR_BUTTON(THIS->obj),color);
    push_gdkobject(color,color);
  }
}

void set_alpha(int alpha);
//! Sets the current opacity to alpha.

int get_alpha();
//! Get the current alpha value.

void set_use_alpha(int use_alpha);
//! Sets whether or not the color button should use the alpha channel.

int get_use_alpha();
//! Gets whether the color button uses the alpha channel.

void set_title(string title);
//! Sets the title for the color selection dialog.

string get_title();
//! Get the title.

void set_property(string property, mixed value)
//! Set property.
{
  pgtk2_verify_inited();
  {
    struct pike_string *prop;
    struct svalue *sv;
    get_all_args("set_property",args,"%n%*",&prop,&sv);
    if (is_same_string(prop,_STR("color"))) {
      GdkColor *color;
      if (sv->type!=PIKE_T_OBJECT)
	Pike_error("Improper type for this property.\n");
      color=(GdkColor *)get_gdkobject(sv->u.object,color);
      setprop(prop->str,color);
      RETURN_THIS();
    } else {
      pg2_object_set_property(args);
    }
  }
}

mixed get_property(string property)
//! Get property.
{
  pgtk2_verify_inited();
  {
    struct pike_string *prop;
    get_all_args("get_property",args,"%n",&prop);
    if (is_same_string(prop,_STR("color"))) {
      GdkColor *color;
      gpointer *v;
      color=(GdkColor *)g_malloc(sizeof(GdkColor));
      if (color==NULL)
	SIMPLE_OUT_OF_MEMORY_ERROR("get_property",sizeof(GdkColor));
      g_object_get(G_OBJECT(THIS->obj),prop->str,&color,NULL);
/*      color=g_value_get_boxed(G_BOXED(v),color); */
      pgtk2_pop_n_elems(args);
      push_gdkobject(color,color);
    } else {
      char *s=g_strdup(prop->str);
      pgtk2_pop_n_elems(args);
      pgtk2_get_property(G_OBJECT(THIS->obj),s);
      g_free(s);
    }
  }
}

endrequire;


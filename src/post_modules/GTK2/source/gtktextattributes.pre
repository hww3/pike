class GTK2.TextAttributes;

//! Holds text attributes.

void create()
//! Create a W(TextAttributes) widget.
{
  GtkTextAttributes *gta;
  gta=g_malloc(sizeof(GtkTextAttributes));
  if (gta==NULL)
    SIMPLE_OUT_OF_MEMORY_ERROR("create",sizeof(GtkTextAttributes));
  THIS->obj=(void *)gta;
  pgtk__init_this_object();
}

GTK2.TextAttributes copy()
//! Copies src and returns it.
{
  pgtk_verify_inited();
  {
    GtkTextAttributes *a1;
    a1=gtk_text_attributes_copy((GtkTextAttributes *)(THIS->obj));
    my_pop_n_elems(args);
    push_gobjectclass(a1,pgtk_text_attributes_program);
  }
}

GTK2.TextAttributes copy_values(GTK2.TextAttributes dest)
//! Copies src onto dest
{
  pgtk_verify_inited();
  {
    struct object *a1;
    get_all_args("copy_values",args,"%o",&a1);
    my_pop_n_elems(args);
    gtk_text_attributes_copy_values((GtkTextAttributes *)(THIS->obj),
		(GtkTextAttributes *)get_gobject(a1));
    push_gobjectclass(a1,pgtk_text_attributes_program);
  }
}

void destroy()
//! Destructor.
{
  if (THIS->obj)
    gtk_text_attributes_unref((GtkTextAttributes *)(THIS->obj));
  THIS->obj=0;
  my_pop_n_elems(args);
  push_int(0);
}

int get_justification()
//! Get justification.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->justification);
}

int get_direction()
//! Get direction.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->direction);
}

float get_font_scale()
//! Get font scale.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_float(((GtkTextAttributes *)THIS->obj)->font_scale);
}

int get_left_margin()
//! Get left margin.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->left_margin);
}

int get_indent()
//! Get indent.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->indent);
}

int get_right_margin()
//! Get right margin.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->right_margin);
}

int get_pixels_above_lines()
//! Get pixels above lines.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->pixels_above_lines);
}

int get_pixels_below_lines()
//! Get pixels below lines.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->pixels_below_lines);
}

int get_pixels_inside_wrap()
//! Get pixels inside wrap.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->pixels_inside_wrap);
}

Pango.TabArray get_tabs()
//! Get tabs.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  {
    PangoTabArray *pta=pango_tab_array_copy(((GtkTextAttributes *)THIS->obj)->tabs);
    push_gobjectclass(pta,ppango_tab_array_program);
  }
}

int get_wrap_mode()
//! Get wrap mode.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->wrap_mode);
}

int get_invisible()
//! Get invisible.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->invisible);
}

int get_bg_full_height()
//! Get bg_full_height.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->bg_full_height);
}

int get_editable()
//! Get editable.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->editable);
}

int get_realized()
//! Get realized.
{
  pgtk_verify_inited();
  if (args)
    Pike_error("Too many arguments.\n");
  push_int(((GtkTextAttributes *)THIS->obj)->realized);
}


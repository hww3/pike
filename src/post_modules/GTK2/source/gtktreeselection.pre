/* -*- C -*- */
class GTK2.TreeSelection;
inherit G.Object;

//! Selections on a treestore.

signal changed;

void set_mode(int type);
//! Sets the selection mode.  If the previous type was GTK2.SELECTION_MULTIPLE,
//! then the anchor is kept selected, if it was previously selected.
//! One of CONST(GTK_SELECTION_).

int get_mode();
//! Gets the selectiom mode.

object get_user_data()
//! Returns the user data for the selection function.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  push_object(gtk_tree_selection_get_user_data(GTK_TREE_SELECTION(THIS->obj)));
}

+GTK2.TreeView get_tree_view();
//! Returns the tree view associated with this selection.

array get_selected()
//! Returns a W(TreeITer) with the currently selected node if this selection
//! is set to GTK2.SELECTION_SINGLE or GTK2.SELECTION_BROWSE.  Also returns
//! W(TreeModel) as a convenience.  This function will not work if you this
//! selection is set to GTK2.SELECTION_MULTIPLE.
{
  pgtk2_verify_inited();
  {
    GtkTreeModel *model;
    GtkTreeIter *iter;
    int res;
    iter=g_malloc(sizeof(GtkTreeIter));
    if (iter==NULL)
      SIMPLE_OUT_OF_MEMORY_ERROR("get_selected",sizeof(GtkTreeIter));
    pgtk2_pop_n_elems(args);
    res=gtk_tree_selection_get_selected(GTK_TREE_SELECTION(THIS->obj),
		&model,iter);
    if (res)
    {
      push_pgdk2object(iter,pgtk2_tree_iter_program,1);
    }
    else
    {
      g_free(iter);
      PGTK_PUSH_INT(0);
    }
    push_gobject(model);
    f_aggregate(2);
  }
}

require gtk22;
array get_selected_rows(GTK2.TreeModel model)
//! Creates a list of W(TreePath)'s for all selected rows.  Additionally, if
//! you are planning on modified the model after calling this function, you
//! may want to convert the returned list into a list of W(TreeRowReference)s.
//! To do this, you can use GTK2.TreeRowReference->create().
{
  pgtk2_verify_inited();
  {
    GList *gl,*g2;
    struct object *o1;
    GtkTreeModel *model;
    int i=0;
    get_all_args("get_selected_rows",args,"%o",&o1);
    model=(GtkTreeModel *)get_gobject(o1);
    gl=g2=gtk_tree_selection_get_selected_rows(GTK_TREE_SELECTION(THIS->obj),
			&model);
    pgtk2_pop_n_elems(args);
    while (g2) {
      push_pgdk2object((GtkTreePath *)g2->data,pgtk2_tree_path_program,1);
      i++;
      g2=g_list_next(g2);
    }
    if (i)
      f_aggregate(i);
    else
      ref_push_array(&empty_array);
    g_list_free(gl);
  }
}

int count_selected_rows();
//! Returns the number of rows that have been selected.
endrequire;

void select_path(GTK2.TreePath path)
//! Select the row at path.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    get_all_args("select_path",args,"%o",&o1);
    gtk_tree_selection_select_path(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreePath *)get_pg2object(o1,pgtk2_tree_path_program));
  }
  RETURN_THIS();
}

void unselect_path(GTK2.TreePath path)
//! Unselects the row at path.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    get_all_args("unselect_path",args,"%o",&o1);
    gtk_tree_selection_unselect_path(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreePath *)get_pg2object(o1,pgtk2_tree_path_program));
  }
  RETURN_THIS();
}

int path_is_selected(GTK2.TreePath path)
//! Returns true if the row pointed to by path is currently selected.  If path
//! does not point to a valid location, false is returned.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    int res;
    get_all_args("path_is_selected",args,"%o",&o1);
    res=gtk_tree_selection_path_is_selected(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreePath *)get_pg2object(o1,pgtk2_tree_path_program));
    pgtk2_pop_n_elems(args);
    push_int(res);
  }
}

void select_iter(GTK2.TreeIter iter)
//! Selects the specified iterator.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    get_all_args("select_iter",args,"%o",&o1);
    gtk_tree_selection_select_iter(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreeIter *)get_pg2object(o1,pgtk2_tree_iter_program));
  }
  RETURN_THIS();
}

void unselect_iter(GTK2.TreeIter iter)
//! Unselects the specified iterator.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    get_all_args("unselect_iter",args,"%o",&o1);
    gtk_tree_selection_unselect_iter(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreeIter *)get_pg2object(o1,pgtk2_tree_iter_program));
  }
  RETURN_THIS();
}

int iter_is_selected(GTK2.TreeIter iter)
//! Returns true if the row at iter is currently selected.
{
  pgtk2_verify_inited();
  {
    struct object *o1;
    int res;
    get_all_args("iter_is_selected",args,"%o",&o1);
    res=gtk_tree_selection_iter_is_selected(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreeIter *)get_pg2object(o1,pgtk2_tree_iter_program));
    pgtk2_pop_n_elems(args);
    push_int(res);
  }
}

void select_all();
//! Selects all the nodes.  This selection must be set to 
//! GTK2.SELECTION_MULTIPLE mode.

void unselect_all();
//! Unselects all the nodes.

void select_range(GTK2.TreePath start, GTK2.TreePath end)
//! Selects a range of nodes, determined by start and end inclusive.
//! This selection must be set to GTK2.SELECTION_MULTIPLE mode.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2;
    get_all_args("select_range",args,"%o%o",&o1,&o2);
    gtk_tree_selection_select_range(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreePath *)get_pg2object(o1,pgtk2_tree_path_program),
			(GtkTreePath *)get_pg2object(o2,pgtk2_tree_path_program));
  }
  RETURN_THIS();
}

require gtk22;
void unselect_range(GTK2.TreePath start, GTK2.TreePath end)
//! Unselects a range of nodes, determined by start and end inclusive.
{
  pgtk2_verify_inited();
  {
    struct object *o1,*o2;
    get_all_args("unselect_range",args,"%o%o",&o1,&o2);
    gtk_tree_selection_unselect_range(GTK_TREE_SELECTION(THIS->obj),
			(GtkTreePath *)get_pg2object(o1,pgtk2_tree_path_program),
			(GtkTreePath *)get_pg2object(o2,pgtk2_tree_path_program));
  }
  RETURN_THIS();
}
endrequire;

/* -*- C -*- */
class GTK2.TreeRowReference;

//! A TreeRowReference.

void create(GTK2.TreeModel model, GTK2.TreePath path)
//! Creates a row reference based on path.  This reference
//! will keep pointing to the node pointed to by path, so
//! long as it exists.
{
  struct object *o1,*o2;
  struct object *no;
  pgtk2_verify_not_inited();
  pgtk2_verify_setup();
  get_all_args("create",args,"%o%o",&o1,&o2);
  THIS->obj=(void *)gtk_tree_row_reference_new(
		GTK_TREE_MODEL(get_gobject(o1)),
		(GtkTreePath *)get_pg2object(o2,pgtk2_tree_path_program));
  THIS->owned = 1;
  pgtk2_pop_n_elems(args);
  pgtk2__init_this_object();
}

require gtk28;
GTK2.TreeModel get_model()
//! Returns the model which this references is monitoring.
{
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  {
    GtkTreeModel *gtm;
    gtm=gtk_tree_row_reference_get_model((GtkTreeRowReference *)THIS->obj);
    push_gobject(gtm);
  }
}
endrequire;

GTK2.TreePath get_path()
//! Returns a path that the row reference currently points to.
{
/*
  struct object *o=fast_clone_object(pgtk2_tree_path_program);
  struct object_wrapper *ow;
  ow=(struct object_wrapper *)get_storage(o,pgtk2_tree_path_program);
  ow->obj=(void *)gtk_tree_row_reference_get_path(
	(GtkTreeRowReference *)(THIS->obj));
*/
  pgtk2_verify_inited();
  pgtk2_pop_n_elems(args);
  {
    GtkTreePath *gp=gtk_tree_row_reference_get_path(
		(GtkTreeRowReference *)THIS->obj);
    push_pgdk2object(gp,pgtk2_tree_path_program,1);
  }
}

int valid()
//! Return TRUE if the reference referes to a current valid path.
{
  pgtk2_verify_inited();
  {
    int res=gtk_tree_row_reference_valid((GtkTreeRowReference *)THIS->obj);
    pgtk2_pop_n_elems(args);
    PGTK_PUSH_INT(res);
  }
}

void destroy()
{
  if (THIS->obj && THIS->owned)
    gtk_tree_row_reference_free((GtkTreeRowReference *)THIS->obj);
  THIS->obj=0;
  pgtk2_pop_n_elems(args);
  push_int(0);
}

require gtk22;
GTK2.TreeRowReference copy()
//! Copies a GTK2.TreeRowReference.
{
  pgtk2_verify_inited();
  {
    GtkTreeRowReference *a1;
    a1=(GtkTreeRowReference *)gtk_tree_row_reference_copy(
      (GtkTreeRowReference *)THIS->obj);
    pgtk2_pop_n_elems(args);
    push_pgdk2object(a1,pgtk2_tree_row_reference_program,1);
  }
}
endrequire;


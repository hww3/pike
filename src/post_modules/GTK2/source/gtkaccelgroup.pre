/* -*- C -*- */
class GTK2.AccelGroup;
inherit G.Object;

//! An AccelGroup stores keybindings.
//! A group is automatically created by W(MenuFactory)
//!
//! NOIMG

signal accel_activate;
signal accel_changed;

void create()
//! Create a new accelerator group
{
  pgtk_verify_setup();
  pgtk_verify_not_inited();
  THIS->obj = G_OBJECT(gtk_accel_group_new());
/* add_ref(fp->current_object);   one extra ref... No, not really */
  pgtk__init_this_object();
}

%{
int pgtk_accel_group_activate_key_callback(GtkAccelGroup *accel_group,
		      GObject *acceleratable,
		      guint accel_key,
		      GdkModifierType accel_mods,
		      struct signal_data *d)
{
  int res;
  push_svalue(&d->args);
  push_gobjectclass(accel_group,pgtk_accel_group_program);
  push_gobjectclass(acceleratable,pg_object_program);
  push_int(accel_key);
  push_int(accel_mods);
  f_aggregate(4);
  apply_svalue(&d->cb,2);
  res=Pike_sp[-1].u.integer;
  pop_stack();
  return res;
}
%}

void connect(int accel_key, int accel_mods, int accel_flags,
	     function cb, mixed user_data)
//! Installs an accelerator in this group.
{
  pgtk_verify_inited();
  {
    gint accel_key;
    GdkModifierType accel_mods;
    GtkAccelFlags accel_flags;
    GClosure *closure;
    struct signal_data *sd;
    if (args<5)
      Pike_error("Too few arguments, 5 required, got %d\n",args);
    accel_key=(gint)PGTK_GETINT(&Pike_sp[0-args]);
    accel_mods=(GdkModifierType)PGTK_GETINT(&Pike_sp[1-args]);
    accel_flags=(GtkAccelFlags)PGTK_GETINT(&Pike_sp[2-args]);
    sd=(struct signal_data *)g_malloc(sizeof(struct signal_data));
    if (sd==NULL)
      SIMPLE_OUT_OF_MEMORY_ERROR("connect",sizeof(struct signal_data));
    assign_svalue_no_free(&sd->cb,Pike_sp+3-args);
    assign_svalue_no_free(&sd->args,Pike_sp+4-args);
    closure=g_cclosure_new(G_CALLBACK(pgtk_signal_func_wrapper),
		sd,(GClosureNotify)pgtk_free_signal_data);
    gtk_accel_group_connect(GTK_ACCEL_GROUP(THIS->obj),accel_key,
		accel_mods,accel_flags,closure);
  }
  RETURN_THIS();
}

void connect_by_path(string accel_path, function cb, mixed user_data)
//! Installs an accelerator in this group, using an accelerator path to look
//! up the appropriate key and modifiers.
{
  pgtk_verify_inited();
  {
    const gchar *accel_path;
    struct signal_data *sd;
    GClosure *closure;
    if (args<3)
      Pike_error("Too few arguments, 3 required, got %d\n",args);
    accel_path=PGTK_GETSTR(&Pike_sp[-args]);
    sd=(struct signal_data *)g_malloc(sizeof(struct signal_data));
    if (sd==NULL)
      SIMPLE_OUT_OF_MEMORY_ERROR("connect_by_path",sizeof(struct signal_data));
    assign_svalue_no_free(&sd->cb,Pike_sp+1-args);
    assign_svalue_no_free(&sd->args,Pike_sp+2-args);
    closure=g_cclosure_new(G_CALLBACK(pgtk_signal_func_wrapper),
		sd,(GClosureNotify)pgtk_free_signal_data);
    gtk_accel_group_connect_by_path(GTK_ACCEL_GROUP(THIS->obj),accel_path,
		closure);
  }
  RETURN_THIS();
}

void disconnect(int accel_key, int accel_mods)
//! Removes an accelerator previously installed.
{
  pgtk_verify_inited();
  {
    guint accel_key;
    GdkModifierType accel_mods;
    get_all_args("disconnect",args,"%i%i",&accel_key,&accel_mods);
    gtk_accel_group_disconnect_key(GTK_ACCEL_GROUP(THIS->obj),
			accel_key,accel_mods);
  }
  RETURN_THIS();
}

void lock();
//! Locks the group.

void unlock();
//! Undoes the last call to lock().



dnl AM_PATH_LIBGLADE([ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND [, MODULES]]])
dnl Test to see if libglade is installed, and define LIBGLADE_CFLAGS, LIBS
dnl
AC_DEFUN(AM_PATH_LIBGLADE,
[dnl
dnl Get the cflags and libraries from the libglade-config script
dnl
AC_ARG_WITH(libglade-config,
[  --with-libglade-config=LIBGLADE_CONFIG  Location of libglade-config],
LIBGLADE_CONFIG="$withval")

module_args=
for module in . $3; do
  case "$module" in
    gnome)
      module_args="$module_args gnome"
      ;;
  esac
done

MY_AC_PATH_PROG(LIBGLADE_CONFIG, ${ac_tool_prefix}libglade-config, no)
AC_MSG_CHECKING(for libglade)
if test "$LIBGLADE_CONFIG" = "no"; then
  AC_MSG_RESULT(no)
  ifelse([$2], , :, [$2])
else
  if $LIBGLADE_CONFIG --check $module_args; then
    LIBGLADE_CFLAGS=`$LIBGLADE_CONFIG --cflags $module_args`
    LIBGLADE_LIBS=`$LIBGLADE_CONFIG --libs $module_args`
    AC_MSG_RESULT(yes)
    ifelse([$1], , :, [$1])
  else
    echo ""
    echo "*** libglade was not compiled with support for $module_args" 1>&2
    AC_MSG_RESULT(no)
    ifelse([$2], , :, [$2])
  fi
fi
AC_SUBST(LIBGLADE_CFLAGS)
AC_SUBST(LIBGLADE_LIBS)
old_CFLAGS=$CFLAGS
old_LIBS=$LIBS
LIBS="$LIBGLADE_LIBS $LIBS"
CFLAGS="$LIBGLADE_CLFAGS $CFLAGS"
AC_CHECK_FUNCS(glade_gnome_init)
LIBS="$old_LIBS"
CFLAGS="$old_CFLAGS"
])


dnl Configure paths for GTK+
dnl Owen Taylor     97-11-3

dnl AM_PATH_GTK([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
dnl Test for GTK, and define GTK_CFLAGS and GTK_LIBS
dnl
AC_DEFUN(AM_PATH_GTK,
[dnl
dnl Get the cflags and libraries from the gtk-config script
dnl
AC_ARG_WITH(gtk-prefix,[  --with-gtk-prefix=PFX   Prefix where GTK is installed (optional)],
            gtk_config_prefix="$withval", gtk_config_prefix="")
AC_ARG_WITH(gtk-exec-prefix,[  --with-gtk-exec-prefix=PFX Exec prefix where GTK is installed (optional)],
            gtk_config_exec_prefix="$withval", gtk_config_exec_prefix="")
AC_ARG_ENABLE(gtktest, [  --disable-gtktest       Do not try to compile and run a test GTK program],
		    , enable_gtktest=yes)

  if test x$gtk_config_exec_prefix != x ; then
     gtk_config_args="$gtk_config_args --exec-prefix=$gtk_config_exec_prefix"
     if test -f $gtk_config_exec_prefix/bin/${ac_tool_prefix}gtk-config-2.0; then
        GTK_CONFIG=$gtk_config_exec_prefix/bin/${ac_tool_prefix}gtk-config-2.0
     else
       if test x${GTK_CONFIG+set} != xset ; then
          GTK_CONFIG=$gtk_config_exec_prefix/bin/${ac_tool_prefix}gtk-config
       fi
     fi
  fi
  if test x$gtk_config_prefix != x ; then
     gtk_config_args="$gtk_config_args --prefix=$gtk_config_prefix"
     if test -f $gtk_config_prefix/bin/${ac_tool_prefix}gtk-config-2.0; then
        GTK_CONFIG=$gtk_config_prefix/bin/${ac_tool_prefix}gtk-config-2.0
     else
       if test x${GTK_CONFIG+set} != xset ; then
          GTK_CONFIG=$gtk_config_prefix/bin/${ac_tool_prefix}gtk-config
       fi
     fi
  fi


  min_gtk_version=ifelse([$1], ,1.2.0,$1)
  AC_MSG_CHECKING(for GTK - version >= $min_gtk_version)
  no_gtk=""
  if test "$GTK_CONFIG" = "no" ; then
    no_gtk=yes
  else
    GTK_CFLAGS=`$GTK_CONFIG $gtk_config_args --cflags`
    GTK_LIBS=`$GTK_CONFIG $gtk_config_args --libs`
    gtk_config_major_version=`$GTK_CONFIG $gtk_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
    gtk_config_minor_version=`$GTK_CONFIG $gtk_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
    gtk_config_micro_version=`$GTK_CONFIG $gtk_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
    if test "x$enable_gtktest" = "xyes" ; then
      ac_save_CFLAGS="$CFLAGS"
      ac_save_LIBS="$LIBS"
      CFLAGS="$CFLAGS $GTK_CFLAGS"
      LIBS="$LIBS $GTK_LIBS"
dnl
dnl Now check if the installed GTK is sufficiently new. (Also sanity
dnl checks the results of gtk-config to some extent
dnl
      rm -f conf.gtktest
      AC_TRY_RUN([
#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>

#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
#include <sys/stat.h>
#endif
#ifdef HAVE_FCNTL_H
#include <fcntl.h>
#endif

int
main ()
{
  int major, minor, micro;
  char *tmp_version;
  FILE *fp;

  /* Don't use system(3C) since it isn't thread-safe.
   *
   * system ("touch conf.gtktest");
   */
  if ((fp = fopen("conf.gtktest", "a+")) != 0) {
    fclose(fp);
  }

  /* HP/UX 9 (%@#!) writes to sscanf strings */
  tmp_version = g_strdup("$min_gtk_version");
  if (sscanf(tmp_version, "%d.%d.%d", &major, &minor, &micro) != 3) {
     printf("%s, bad version string\n", "$min_gtk_version");
     exit(1);
   }

  if ((gtk_major_version != $gtk_config_major_version) ||
      (gtk_minor_version != $gtk_config_minor_version) ||
      (gtk_micro_version != $gtk_config_micro_version))
    {
      printf("\n*** 'gtk-config --version' returned %d.%d.%d, but GTK+ (%d.%d.%d)\n",
             $gtk_config_major_version, $gtk_config_minor_version, $gtk_config_micro_version,
             gtk_major_version, gtk_minor_version, gtk_micro_version);
      printf ("*** was found! If gtk-config was correct, then it is best\n");
      printf ("*** to remove the old version of GTK+. You may also be able to fix the error\n");
      printf("*** by modifying your LD_LIBRARY_PATH enviroment variable, or by editing\n");
      printf("*** /etc/ld.so.conf. Make sure you have run ldconfig if that is\n");
      printf("*** required on your system.\n");
      printf("*** If gtk-config was wrong, set the environment variable GTK_CONFIG\n");
      printf("*** to point to the correct copy of gtk-config, and remove the file config.cache\n");
      printf("*** before re-running configure\n");
    }
  else
    {
      if ((gtk_major_version > major) ||
        ((gtk_major_version == major) && (gtk_minor_version > minor)) ||
        ((gtk_major_version == major) && (gtk_minor_version == minor) && (gtk_micro_version >= micro)))
      {
        return 0;
       }
     else
      {

      }
    }
  return 1;
}
],, no_gtk=yes,[
        # Cross-compiling
        AC_TRY_LINK([
#include <gtk/gtk.h>
#include <stdio.h>
        ], [
  return ((gtk_major_version) || (gtk_minor_version) || (gtk_micro_version));
        ], [
          echo $ac_n "cross compiling; looks ok... $ac_c"
        ], [
          no_gtk=yes
          echo $ac_n "cross compiling; linking failed... $ac_c"
        ])
      ])
      CFLAGS="$ac_save_CFLAGS"
      LIBS="$ac_save_LIBS"
    fi
  fi
  if test "x$no_gtk" = x ; then
     AC_MSG_RESULT(yes)
     ifelse([$2], , :, [$2])
  else
     AC_MSG_RESULT(no)
     if test "$GTK_CONFIG" = "no" ; then
       echo "*** The gtk-config script installed by GTK could not be found"
       echo "*** If GTK was installed in PREFIX, make sure PREFIX/bin is in"
       echo "*** your path, or set the GTK_CONFIG environment variable to the"
       echo "*** full path to gtk-config."
     else
       if test -f conf.gtktest ; then
        :
       else
          echo "*** Could not run GTK test program, checking why..."
          CFLAGS="$CFLAGS $GTK_CFLAGS"
          LIBS="$LIBS $GTK_LIBS"
          AC_TRY_LINK([
#include <gtk/gtk.h>
#include <stdio.h>
],      [ return ((gtk_major_version) || (gtk_minor_version) || (gtk_micro_version)); ],
        [ echo "*** The test program compiled, but did not run. This usually means"
          echo "*** that the run-time linker is not finding GTK or finding the wrong"
          echo "*** version of GTK. If it is not finding GTK, you'll need to set your"
          echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
          echo "*** to the installed location  Also, make sure you have run ldconfig if that"
          echo "*** is required on your system"
	  echo "***"
          echo "*** If you have an old version installed, it is best to remove it, although"
          echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH"
          echo "***"
          echo "*** If you have a RedHat 5.0 system, you should remove the GTK package that"
          echo "*** came with the system with the command"
          echo "***"
          echo "***    rpm --erase --nodeps gtk gtk-devel" ],
        [ echo "*** The test program failed to compile or link. See the file config.log for the"
          echo "*** exact error that occured. This usually means GTK was incorrectly installed"
          echo "*** or that you have moved GTK since it was installed. In the latter case, you"
          echo "*** may want to edit the gtk-config script: $GTK_CONFIG" ])
          CFLAGS="$ac_save_CFLAGS"
          LIBS="$ac_save_LIBS"
       fi
     fi
     GTK_CFLAGS=""
     GTK_LIBS=""
     ifelse([$3], , :, [$3])
  fi
  AC_SUBST(GTK_CFLAGS)
  AC_SUBST(GTK_LIBS)
  rm -f conf.gtktest
])






dnl end of function definitions, start of code.
AC_INIT(new_build_pgtk.pike)
AC_CONFIG_HEADER(pgtk_config.h)


PIKE_FEATURE_WITHOUT(GTK2)
PIKE_FEATURE_WITHOUT(GTK)
PIKE_FEATURE_WITHOUT(Gnome)
PIKE_FEATURE_WITHOUT(GTK.GladeXML)
PIKE_FEATURE_WITHOUT(GTK.GlArea)

AC_MODULE_INIT()

AC_ARG_WITH(GTK, [  --without-GTK           no support for GTK],[],[with_GTK=yes])
AC_ARG_WITH(GTK, [  --with-GTK2             Use GTK 2.0 if found],[],[with_GTK2=no])

AC_CHECK_FUNCS( gethrtime signal sigaction )

# Force prototypes from X's headerfiles.
AC_DEFINE(FUNCPROTO)

AC_HEADER_STDC
AC_CHECK_HEADERS( signal.h netinet/in.h arpa/inet.h sys/types.h sys/stat.h \
	fcntl.h)


if test "x$with_GTK" = "xyes" ; then
  
  PIKE_FEATURE_NODEP(GTK.GlArea)
  PIKE_FEATURE_NODEP(GTK)
  PIKE_FEATURE_NODEP(GTK.GladeXML)
  if test "x$with_GTK2" = "xyes" ; then
    PIKE_FEATURE_NODEP(GTK2)
    MY_AC_PATH_PROG(PKG_CONFIG,${ac_tool_prefix}pkg-config,no)
  else
     PKG_CONFIG=no
  fi

dnl Must be before..
AC_SUBST(have_x11)
AC_SUBST(have_gtk_20)
AC_SUBST(have_gtk_120)

 if test "$PKG_CONFIG" = "no" ; then
   MY_AC_PATH_PROG(GTK_CONFIG, ${ac_tool_prefix}gtk-config,no)
   AM_PATH_GTK(1.2.0,[have_gtk_120=gtk_120],[have_gtk_120=no_gtk_120])
   if test x$have_gtk_120 = xno_gtk_120 ; then
     AM_PATH_GTK(1.1.13,[WITH_GTK=1],[WITH_GTK=0])
   else
     WITH_GTK=1 
   fi
 else
   if ${ac_tool_prefix}pkg-config gtk+-2.0 2>/dev/null ; then
     PIKE_FEATURE_OK(GTK2)
     GTK_CFLAGS="`${ac_tool_prefix}pkg-config gtk+-2.0 --cflags`"
     GTK_LIBS="`${ac_tool_prefix}pkg-config gtk+-2.0 --libs`"
     echo "**** WARNING: Using GTK 2.0"
     echo "**** THis is not recommended"
     echo "LIBS: $GTK_LIBS"
     echo "CFLAGS: $GTK_CFLAGS"
     AC_CHECK_LIB(iconv,iconv,,,$GTK_LIBS)
     WITH_GTK=2
   else
     MY_AC_PATH_PROG(GTK_CONFIG, ${ac_tool_prefix}gtk-config,no)
     AM_PATH_GTK(1.2.0,[have_gtk_120=gtk_120],[have_gtk_120=no_gtk_120])
     if test x$have_gtk_120 = xno_gtk_120 ; then
       AM_PATH_GTK(1.1.13,[WITH_GTK=1],[WITH_GTK=0])
     else
       WITH_GTK=1
     fi
   fi
 fi
 AC_SUBST(pgtk_has_libglade)
 AC_SUBST(PGTK_CFLAGS)
 AC_SUBST(PGTK_LIBS)
 AC_SUBST(GNOME_CFLAGS)
 AC_SUBST(GNOME_LIBS)
 AC_SUBST(pgtk_cv_defined_HAVE_SAVE_SESSION_SIGNAL)
 AC_SUBST(pgtk_cv_defined_HAVE_PANEL_BIND_EVENTS)
 AC_SUBST(pgtk_cv_defined_HAVE_PANEL_PIXEL_SIZE)
 AC_SUBST(pgtk_cv_defined_HAVE_PANEL_DRAW_SIGNAL)
 AC_SUBST(pgtk_cv_defined_HAVE_APPLET_QUEUE_RESIZE)
 AC_SUBST(pgtk_has_gnome)
 AC_SUBST(pgtk_has_docklets)

 if test "x$WITH_GTK" = x2 ; then
   AC_DEFINE(PGTK_AUTO_UTF8)
   have_gtk_120=gtk_120
   have_gtk_20=gtk_20
   AC_DEFINE(HAVE_GTK_20)
   AC_SUBST(WITH_GTK)
   AC_SUBST(pgtk_has_libglade)
   AC_SUBST(PGTK_CFLAGS)
   AC_SUBST(PGTK_LIBS)
   PGTK_CFLAGS="$GTK_CFLAGS"
   PGTK_LIBS="$GTK_LIBS"
   CFLAGS="$CFLAGS $GTK_CFLAGS"
   LIBS="$MODULE_LDFLAGS $LIBS"

   # Not yet available with GTK 2.0 (Wait for gnome 2.0 etc.)
   pgtk_has_libglade=nolibglade
   pgtk_has_gnome=nognome
   pgtk_has_docklets=nodocklets
   GNOME_CFLAGS=""
   GNOME_LIBS=""
 else
   if test x"$pike_cv_sys_os" = xWindows_NT ; then
     AC_DEFINE(PGTK_AUTO_UTF8)
   else
     :
   fi
 fi

if test "x$WITH_GTK" = x1 ; then
 PIKE_FEATURE_OK(GTK)
 AC_SUBST(WITH_GTK)
 AC_SUBST(pgtk_has_libglade)
 AM_PATH_LIBGLADE([
 pgtk_has_libglade=libglade], [
  echo "********************************************************************"
  echo "Support for libglade not being compiled in."
  echo "See http://glade.pn.org/ and http://www.daa.com.au/~james/gnome/"
  echo "for more information."
  echo "********************************************************************"
  pgtk_has_libglade=nolibglade])

  if test "x$pgtk_has_libglade" = "xlibglade" ; then
    PIKE_FEATURE_OK(GTK.GladeXML)
  fi

 PGTK_CFLAGS="$GTK_CFLAGS"
 PGTK_LIBS="$GTK_LIBS"
 
 CFLAGS="$CFLAGS $GTK_CFLAGS"
 LIBS="$MODULE_LDFLAGS $LIBS"
 
 dnl Check for GL/MesaGL libraries
 AC_ARG_WITH(GL-prefix,  [  --with-GL-prefix=DIR    Prefix where GL/MesaGL is installed])
 AC_ARG_WITH(lib-GL,     [  --with-lib-GL           use '-lGL'])
 AC_ARG_WITH(lib-MesaGL, [  --with-lib-MesaGL       use '-lMesaGL'])
 
 if test "x$with_GL_prefix" = "x" ; then
  GL_LDOPTS=""
  GL_CFLAGS=""
 else
  GL_LDOPTS="-L$with_GL_prefix/lib"
  GL_CFLAGS="-I$with_GL_prefix/include"
 fi
 
 saved_LIBS="$LIBS"
 
 AC_ARG_WITH(gnome, [  --without-gnome         no support for gnome],[],[with_gnome=yes])
 
 if test "x$with_gnome" = "xyes"; then
 
 PIKE_FEATURE_NODEP(Gnome)
 MY_AC_PATH_PROG(GNOME_CONFIG,${ac_tool_prefix}gnome-config,no)
 
 if test "$GNOME_CONFIG" = "no"; then
   :
 else
   case "`$GNOME_CONFIG --version`" in
     gnome-libs\ 1.0.*)
       GNOME_CONFIG=no
       AC_MSG_WARN(Gnome 1.0.x not supported)
     ;;
   esac
 fi

 AC_MSG_CHECKING([gnome])
 
 if test "$GNOME_CONFIG" = "no"; then
   pgtk_has_gnome=nognome
   AC_MSG_RESULT(no);
 else
   GNOME_CFLAGS="`$GNOME_CONFIG --cflags gnome gnomeui gnorba gtkxmhtml applets`"
   GNOME_LIBS="`$GNOME_CONFIG --libs gnome gnomeui gnorba gtkxmhtml applets`"
   pgtk_has_gnome=gnome
   AC_MSG_RESULT(yes);
   PIKE_FEATURE_OK(Gnome)
 fi
 
 AC_MSG_CHECKING([gnome docklets])
 if test "$GNOME_CONFIG" = "no"; then
   pgtk_has_docklets=nodocklets
   AC_MSG_RESULT(no);
 else
   GNOME_DOCKLETS_LIBS="`$GNOME_CONFIG --libs docklets 2>/dev/null`"
   if test x"$GNOME_DOCKLETS_LIBS" = x ; then
     pgtk_has_docklets=nodocklets
     AC_MSG_RESULT(no);
   else
     pgtk_has_docklets=docklets
     GNOME_LIBS="`$GNOME_CONFIG --libs gnome gnomeui gnorba gtkxmhtml applets docklets`"
     GNOME_CFLAGS="`$GNOME_CONFIG --cflags gnome gnomeui gnorba gtkxmhtml applets docklets`"
     AC_MSG_RESULT(yes);
   fi
 fi

 oCFLAG="$CFLAGS"
 CFLAGS="$GNOME_CFLAGS"

 # Who came up with the XXX-config stupidity?
 if echo X "$GNOME_LIBS" | grep lpng10 >/dev/null 2>&1; then
   # Check if we actually have -lpng10...
   AC_CHECK_LIB(png10, png_read_png)
   AC_CHECK_LIB(png, png_read_png)
   if test "x$ac_cv_lib_png10_png_read_png$ac_cv_lib_png_png_read_png" = "xnoyes"; then
     AC_MSG_WARN([Adjusting LIBS to use -lpng instead of -lpng10.])
     GNOME_LIBS=`echo "$GNOME_LIBS"|sed -e 's/-lpng10/-lpng/g'`
   else :; fi
 fi

 if test "x$pgtk_has_gnome" = xgnome ; then
    # Try adding gnome-1.0 to the include path (FreeBSD uses that for gnome-1.0
    # storage path)
    real_include_dirs=''
    for flag in $CPPFLAGS; do
      case "$flag" in
        -I*)
          d="`echo Q$flag|sed -e 's/^Q-I//'`/gnome-1.0"
          AC_MSG_CHECKING($d)
          if test -d "$d/."; then
            REALDIR="`cd $d/. ; /bin/pwd`"
            if test "x$REALDIR" = x ; then
              REALDIR=UNKNOWN
            else
              :
            fi

            case " $CPPFLAGS $real_include_dirs " in
              *\ -I$d\ * | *\ -I$REALDIR\ *)
                 AC_MSG_RESULT(already added)
              ;;
              *)
	        OLD_CPPFLAGS="${CPPFLAGS}"
                CPPFLAGS="${CPPFLAGS} -I$d"
	        AC_TRY_CPP([include <stdio.h>], [
                  AC_MSG_RESULT(added)
                  if test "x$REALDIR" != xUNKNOWN; then
                    real_include_dirs="${real_include_dirs} -I$REALDIR"
                  else
                    :
                  fi
	        ], [
	          AC_MSG_RESULT(fails)
		  CPPFLAGS="${OLD_CPPFLAGS}"
	        ])
              ;;
	    esac
	  else
	    AC_MSG_RESULT(no)
	  fi
        ;;
      esac
   done

   # Do some extra effort to check for the header files, since some
   # Gnome packagings doesn't include them all (e.g. applet-widget.h on
   # Debian systems). Can't use AC_CHECK_HEADERS here since it doesn't
   # use $CFLAGS.
   define(REALLY_CHECK_HEADER, [
     AC_CACHE_CHECK([for $1], [pgtk_cv_header_]translit([$1],[./-],[___]), [
       AC_TRY_COMPILE([#include <$1>],,
		      [[pgtk_cv_header_]]]translit([$1],[./-],[___])[[[=yes]],
		      [[pgtk_cv_header_]]]translit([$1],[./-],[___])[[[=no]])
     ])
   ])
   REALLY_CHECK_HEADER(gnome.h)
   REALLY_CHECK_HEADER(libgnorba/gnorba.h)
   REALLY_CHECK_HEADER(applet-widget.h)
   if test "$pgtk_cv_header_gnome_h" != "yes" ; then
     pgtk_has_gnome=nognome
     PIKE_FEATURE(Gnome, [no (gnome.h not found)])
   elif test "$pgtk_cv_header_libgnorba_gnorba_h" != "yes" ; then
     pgtk_has_gnome=nognome
     PIKE_FEATURE(Gnome, [no (libgnorba/gnorba.h not found)])
   elif test "$pgtk_cv_header_applet_widget_h" != "yes" ; then
     pgtk_has_gnome=nognome
     PIKE_FEATURE(Gnome, [no (applet-widget.h not found)])
   else
     AC_DEFINE(HAVE_GNOME)
   fi
 fi
 
 AC_MSG_CHECKING([if HAVE_SAVE_SESSION_SIGNAL is defined in applet-widget.h])
 AC_CACHE_VAL(pgtk_cv_defined_HAVE_SAVE_SESSION_SIGNAL,[
 AC_TRY_COMPILE([
#include <applet-widget.h> 
 ], 
 [
   int i = HAVE_SAVE_SESSION_SIGNAL;
   exit(0);
 ], 
 [pgtk_cv_defined_HAVE_SAVE_SESSION_SIGNAL='defined HAVE_SAVE_SESSION_SIGNAL'],
 [pgtk_cv_defined_HAVE_SAVE_SESSION_SIGNAL=''])
 ])
 if test "x$pgtk_cv_defined_HAVE_SAVE_SESSION_SIGNAL" = "x" ; then
   AC_MSG_RESULT(no)
 else
   AC_MSG_RESULT(yes)
 fi
 
 AC_MSG_CHECKING([if HAVE_APPLET_BIND_EVENTS is defined in applet-widget.h])
 AC_CACHE_VAL(pgtk_cv_defined_HAVE_APPLET_BIND_EVENTS,[
 AC_TRY_COMPILE([
#include <applet-widget.h> 
 ], 
 [
   int i = HAVE_APPLET_BIND_EVENTS;
   exit(0);
 ], 
 [pgtk_cv_defined_HAVE_APPLET_BIND_EVENTS='defined HAVE_APPLET_BIND_EVENTS'],
 [pgtk_cv_defined_HAVE_APPLET_BIND_EVENTS=''])
 ])
 if test "x$pgtk_cv_defined_HAVE_APPLET_BIND_EVENTS" = "x" ; then
   AC_MSG_RESULT(no)
 else
   AC_MSG_RESULT(yes)
 fi
 
 
 AC_MSG_CHECKING([if HAVE_PANEL_PIXEL_SIZE is defined in applet-widget.h])
 AC_CACHE_VAL(pgtk_cv_defined_HAVE_PANEL_PIXEL_SIZE,[
 AC_TRY_COMPILE([
#include <applet-widget.h> 
 ], 
 [
   int i = HAVE_PANEL_PIXEL_SIZE;
   exit(0);
 ], 
 [pgtk_cv_defined_HAVE_PANEL_PIXEL_SIZE='defined HAVE_PANEL_PIXEL_SIZE'],
 [pgtk_cv_defined_HAVE_PANEL_PIXEL_SIZE=''])
 ])
 if test "x$pgtk_cv_defined_HAVE_PANEL_PIXEL_SIZE" = "x" ; then
   AC_MSG_RESULT(no)
 else
   AC_MSG_RESULT(yes)
 fi
 
 AC_MSG_CHECKING([if HAVE_PANEL_DRAW_SIGNAL is defined in applet-widget.h])
 AC_CACHE_VAL(pgtk_cv_defined_HAVE_PANEL_DRAW_SIGNAL,[
 AC_TRY_COMPILE([
#include <applet-widget.h> 
 ], 
 [
   int i = HAVE_PANEL_DRAW_SIGNAL;
   exit(0);
 ], 
 [pgtk_cv_defined_HAVE_PANEL_DRAW_SIGNAL='defined HAVE_PANEL_DRAW_SIGNAL'],
 [pgtk_cv_defined_HAVE_PANEL_DRAW_SIGNAL=''])
 ])
 if test "x$pgtk_cv_defined_HAVE_PANEL_DRAW_SIGNAL" = "x" ; then
   AC_MSG_RESULT(no)
 else
   AC_MSG_RESULT(yes)
 fi
 
 AC_MSG_CHECKING([if HAVE_APPLET_QUEUE_RESIZE is defined in applet-widget.h])
 AC_CACHE_VAL(pgtk_cv_defined_HAVE_APPLET_QUEUE_RESIZE,[
 AC_TRY_COMPILE([
#include <applet-widget.h> 
 ], 
 [
   int i = HAVE_APPLET_QUEUE_RESIZE;
   exit(0);
 ], 
 [pgtk_cv_defined_HAVE_APPLET_QUEUE_RESIZE='defined HAVE_APPLET_QUEUE_RESIZE'],
 [pgtk_cv_defined_HAVE_APPLET_QUEUE_RESIZE=''])
 ])
 if test "x$pgtk_cv_defined_HAVE_APPLET_QUEUE_RESIZE" = "x" ; then
   AC_MSG_RESULT(no)
 else
   AC_MSG_RESULT(yes)
 fi
 
 CFLAGS="$oCFLAGS"
 
 AC_CHECK_HEADERS( X11/xpm.h )
 AC_CHECK_LIB(Xpm, XpmReadFileToXpmImage,,,`$ac_cv_path_GTK_CONFIG --libs`)
 
 # End of gnome dependent stuff.
 fi
 
 AC_CHECK_LIB(gtkdatabox, main,,,`$ac_cv_path_GTK_CONFIG --libs`)
 AC_CHECK_HEADERS(gtkdatabox.h)
 
 AC_SUBST(pgtk_have_gtkdatabox)
 AC_SUBST(DATABOX_LIBS)
 DATABOX_LIBS=""
 AC_MSG_CHECKING([gtkdatabox support]);
 if test x$ac_cv_lib_gtkdatabox_main = xyes ; then
   if test x$ac_cv_header_gtkdatabox_h = xyes; then
     AC_MSG_RESULT(yes)
     DATABOX_LIBS=-lgtkdatabox
     pgtk_has_gtkdatabox=gtkdatabox
   else
     AC_MSG_RESULT(no)
     pgtk_has_gtkdatabox=nogtkdatabox
     echo "*******************************************"
     echo " Warning: Partial gtkdatabox installation  "
     echo " Library found, but no header files.       "
     echo " Databox support will be disabled.         "
     echo " The widget is available from              "
     echo " http://www.eudoxos.net/gtk/gtkdatabox/    "
     echo "*******************************************"
   fi
 else
   pgtk_has_gtkdatabox=nogtkdatabox
 fi


 AC_MSG_CHECKING([OpenGL])

 LIBS="$saved_LIBS $GL_LDOPTS -lGL $GTK_LIBS"
 AC_TRY_LINK( ,[ char glBegin(); glBegin(); ], have_GL=yes, have_GL=no)
 AC_MSG_RESULT($have_GL)

 if test "x$have_GL" = "xno" ; then
  AC_MSG_CHECKING([Mesa])
  LIBS="$saved_LIBS $GL_LDOPTS -lMesaGL $GTK_LIBS"
  AC_TRY_LINK( ,[ char glBegin(); glBegin(); ], have_MesaGL=yes, have_MesaGL=no)
  AC_MSG_RESULT($have_MesaGL)

  if test "x$have_MesaGL" = "xno"; then
   AC_MSG_CHECKING([Mesa with pthreads])
   LIBS="$saved_LIBS $GL_LDOPTS -lMesaGL -lpthread $GTK_LIBS"
   AC_TRY_LINK( ,[ char glBegin(); glBegin(); ], have_MesaGL_pthread=yes, have_MesaGL_pthread=no)
   AC_MSG_RESULT($have_MesaGL_pthread)
  fi
 fi

 LIBS="$saved_LIBS"


 if test "x$with_lib_GL" = "xyes"; then

 if test "x$have_GL" = "xyes"; then
  GL_LIBS="$GL_LDOPTS  -lGL"
 else
  AC_MSG_ERROR([Missing GL library])
 fi

 elif test "x$with_lib_MesaGL" = "xyes"; then

 if test "x$have_MesaGL" = "xyes"; then
  GL_LIBS="$GL_LDOPTS -lMesaGL"
 elif test "x$have_MesaGL_pthread" = "xyes"; then
  GL_LIBS="$GL_LDOPTS -lMesaGL -lpthread"
 else
  AC_MSG_ERROR([Missing MesaGL library])
 fi

 else

 if test "x$have_GL" = "xyes"; then
  GL_LIBS="$GL_LDOPTS -lGL"
 elif test "x$have_MesaGL" = "xyes"; then
  GL_LIBS="$GL_LDOPTS  -lMesaGL"
 elif test "x$have_MesaGL_pthread" = "xyes"; then
  GL_LIBS="$GL_LDOPTS  -lMesaGL -lpthread"
 else
  have_GL=no
 fi
 fi
 fi

 CFLAGS="$GL_CFLAGS $CFLAGS"

 AC_SUBST(pgtk_has_glarea)
 pgtk_has_glarea=noglarea

 if test "x$have_GL" = "xyes" ; then
  AC_CHECK_LIB(gtkgl, main,,,`$ac_cv_path_GTK_CONFIG --libs` $GL_LIBS)
  if test x$ac_cv_lib_gtkgl_main = xyes ; then
    pgtk_has_glarea=glarea
    PIKE_FEATURE_OK(GTK.GlArea)
    LIBS="$GL_LIBS $LIBS"
  else
    unset ac_cv_lib_gtkgl_main
    echo "*********************************************"
    echo " Warning: Failed to find the GTK GL widget.  "
    echo " GL-support will be disabled.                "
    echo " The widget is available from                "
    echo " http://www.student.oulu.fi/~jlof/gtkglarea/ "
    echo "*********************************************"
  fi
 fi
  AC_CHECK_LIB(X11,XSetScreenSaver,[have_x11=x11],[have_x11=nox11])
  if test "x$have_x11" = "xx11" ; then
   oCFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS $GTK_CFLAGS"
   AC_MSG_CHECKING([X11 in GDK using gdkx.h])
   AC_TRY_COMPILE([
#include <gdk/gdk.h> 
#include <gdk/gdkx.h> 
#include <gdk/gdkprivate.h>
 ], 
 [
     GdkWindowPrivate *w = (GdkWindowPrivate *)0;
     &w->xwindow;
 ], 
 [have_x11=x11],
 [have_x11=nox11])
  if test "x$have_x11" = "xx11" ; then
   AC_MSG_RESULT(yes)
  else
   AC_MSG_RESULT(no)
  fi
  if test "x$have_x11" = "xx11" ; then
  
   AC_MSG_CHECKING([X11 DPMS extension])

   AC_TRY_COMPILE([
#include <gdk/gdk.h> 
#include <gdk/gdkx.h> 
#include <X11/extensions/dpms.h> 
 ], 
 [
     CARD16 state;
     BOOL dpms_off;
     DPMSInfo(GDK_DISPLAY(), &state, &dpms_off);
 ], 
 [_res=1],
 [_res=0])

 if test "x$_res" = "x1" ; then
   AC_MSG_RESULT([yes])
   AC_DEFINE(HAVE_DPMS)
 else
   AC_MSG_RESULT([no])
 fi
 fi
  CFLAGS="$oCFLAGS"

  fi
else
  WITH_GTK=0
fi
AC_OUTPUT(Makefile options)

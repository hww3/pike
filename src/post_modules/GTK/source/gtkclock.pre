/* -*- C -*- */
require gnome;
class GTK.Clock;
inherit GTK.Label;
//! The GtkClock widget provides an easy way of providing a textual
//! clock in your application. It supports realtime display, as well as
//! count up and count down modes. The clock widget could conceivably
//! be used in such applications as an application's status bar, or as
//! the basis for a panel applet, etc.
//! <p>
//! Three modes of operation are supported. These are realtime - which
//! displays the current time, count-up/increasing - which counts up
//! from an initial value (like a stopwatch), and count-down/decreasing
//! - which counts down from an initial value.
//! </p><p>
//! Note, however, that the accuracy of the gtkclock widget is limited
//! to 1 second.</p>
//! IMG: GTK.Clock( GTK.ClockRealtime );
//! IMG: GTK.Clock( GTK.ClockDecreasing )->set_seconds(10000)->start();

constant int GTK_CLOCK_INCREASING;
constant int GTK_CLOCK_DECREASING;
constant int GTK_CLOCK_REALTIME;

void create( int type );
//! type is one of CONST(GTK_CLOCK_);
void set_format( string fmt );
//! Set the format of a GtkClock widget. The syntax of the format
//! string is identical to that of the function strftime(3). Further
//! information about time format strings can be found on this man
//! page. The widget defaults to a format string of "%H:%M" in realtime
//! mode, or "%H:%M:%S" in count-up or count-down modes.
void set_seconds( int seconds );
//! Set the current time as displayed by the clock in count-up and
//! count-down modes. This function has no effect in realtime mode, as
//! the clock time is determined by the system clock in realtime mode.
void set_update_interval( int seconds );
//! Set the interval at which the GtkClock widget is updated. The
//! seconds parameter is used to determine how often the time shown on
//! the widget is updated. The default value is to update every second,
//! but you may wish to increase this value. If you set the update
//! interval to 0, the clock is never updated.
void start();
//! Start the clock counting in count-up or count-down modes. The clock
//! will begin counting up or down from the time when this function is
//! called, until gtk_clock_stop is called. This function has no effect
//! in the realtime mode (you can't start and stop real time! :-).
void stop();
//! Stop the clock counting in count-up or count-down modes. The clock
//! ceases counting up or down, and the last time reached remains on
//! the display. This function has no effect in the realtime mode (you
//! can't start and stop real time! :-).


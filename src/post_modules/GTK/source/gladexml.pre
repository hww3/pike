require libglade;
class GTK.GladeXML;

//! <a href="http://glade.pn.org/">Glade</a> is a free GUI builder for
//! GTK+ and Gnome. It's normally used to create C-code, but can also
//! produce code for other languages. <a
//! href="http://www.daa.com.au/~james/gnome/">Libglade</a> is a utility
//! library that builds the GUI from the Glade XML save files. This
//! module uses libglade and allows you to easily make GUI designs to
//! be used with your Pike applications. Since PiGTK doesn't
//! support Gnome yet, you can only use the normal GTK widgets.

%{
#include <errno.h>
#include "builtin_functions.h"
#include <glade/glade.h>

RCSID("$Id: gladexml.pre,v 1.14 2003/01/18 06:56:15 neotron Exp $");

/* This function is used by signal_autoconnect to handle signal
   connection Basically it uses a mapping and data from the stack to
   do signal callbacks exactly in the same way as normal signals in
   PiGTK.

 */
 static void pgtk__low_signal_connect(const gchar *handler_name,
				      GtkObject *obj,
				      const gchar *signal_name,
				      const gchar *signal_data,
				      GtkObject *connect_object,
				      gboolean after,
				      gpointer args, int new_interface)
{
  struct mapping *callbacks;
  struct svalue *data;
  int id;
  struct signal_data *b;
  struct svalue *cb;
  struct pike_string *funname;
  guint signal_id;
#ifdef GLADE_CONNECT_DEBUG
  fprintf(stderr, "Connecting handler %s, signal %s,\n data %s, "
	  "after: %d\n",
	  handler_name, signal_name, signal_data, after);
#endif
  get_all_args("GTK.GladeXML->_signal_connect",
	       *(INT32 *)args, "%m%*", &callbacks, &data);

  funname = make_shared_string(handler_name);
  cb = low_mapping_string_lookup(callbacks, funname);
  free_string(funname);
  if(cb == NULL) {
    fprintf(stderr, "** WARNING **: Unknown function %s for signal %s\n",
	    handler_name, signal_name);
    return;
  } else if(cb->type != PIKE_T_FUNCTION) {
    fprintf(stderr, "** WARNING **: Value for handler %s for signal %s not a function\n.\n",
	    handler_name, signal_name);
    return;
  }
  b = (void *)xalloc(sizeof(struct signal_data));
  assign_svalue_no_free( &b->cb, cb);
  assign_svalue_no_free( &b->args, data);
  b->new_interface = new_interface;
  signal_id = gtk_signal_lookup (signal_name, GTK_OBJECT_TYPE (obj));
  if(!signal_id)
  {
    xfree(b);
#if 0
    fprintf(stderr,
	    "** WARNING **: Signal \"%s\" not defined in the `%s' "
	    "class ancestry\n",
	    signal_name, gtk_type_name (GTK_OBJECT_TYPE(obj)));
#endif
  }
  id = gtk_signal_connect_full(obj, signal_name, 0,
                               (void *)pgtk_signal_func_wrapper, b,
			       (void *)pgtk_free_signal_data, FALSE, after);
}

static void pgtk__signal_connect_new(const gchar *handler_name,
				     GtkObject *obj,
				     const gchar *signal_name,
				     const gchar *signal_data,
				     GtkObject *connect_object,
				     gboolean after,
				     gpointer args) {
  pgtk__low_signal_connect(handler_name, obj, signal_name, signal_data,
			   connect_object, after, args, 1);
}
 
static void pgtk__signal_connect(const gchar *handler_name,
                                 GtkObject *obj,
                                 const gchar *signal_name,
                                 const gchar *signal_data,
                                 GtkObject *connect_object,
                                 gboolean after,
                                 gpointer args)
{
  pgtk__low_signal_connect(handler_name, obj, signal_name, signal_data,
			   connect_object, after, args, 0);
}

static void glade_verify_setup()
{
  static int glade_is_setup = 0;
  pgtk_verify_setup();
  if(!glade_is_setup)
  {
    glade_init();
#if defined(NEED_GNOMESUPPORT_H) && defined(HAVE_GLADE_GNOME_INIT)
    if(Pike_sp[-args].type == PIKE_T_INT && Pike_sp[-1].u.integer != 0)
      glade_gnome_init();
#endif
    glade_is_setup = 1;
  }
}

%}

void new_from_memory(string data, string|void root, string|void domain)
//! Creates a new GladeXML object (and the corresponding widgets) from
//! the string data. Optionally it will only build the interface from
//! the widget node root. This feature is useful if you only want to
//! build say a toolbar or menu from the XML document, but not the
//! window it is embedded in. The third optional argument is used to
//! specify a different translation domain from the default to be used.
{
  GladeXML *xml = 0;
  struct pike_string *data = NULL;
  char *root = NULL, *domain = NULL;

  glade_verify_setup();

  if(THIS->obj)
    Pike_error("GladeXML->new_from_memory(): Already initialized!\n");

  switch(args)
  {
   case 3:
    if(Pike_sp[-1].type == PIKE_T_STRING) {
      domain = Pike_sp[-1].u.string->str;
      pop_n_elems(1);
      args--;
    } else
      Pike_error("GladeXML->new_from_memory(): Invalid argument 3, expected string.\n");
   case 2:
    if(Pike_sp[-1].type == PIKE_T_STRING) {
      root = Pike_sp[-1].u.string->str;
      pop_n_elems(1);
      args--;
    } else
      Pike_error("GladeXML->new_from_memory(): Invalid argument 2, expected string.\n");
   case 1:
    if(Pike_sp[-1].type == PIKE_T_STRING) {
      data = Pike_sp[-1].u.string;
      pop_n_elems(1);
      args--;
    } else
      Pike_error("GladeXML->new_from_memory(): Invalid argument 1, expected string.\n");

    break;
   default:
     Pike_error("Invalid number or arguments to GladeXML->new_from_memory()\n");
  }
  xml = glade_xml_new_from_memory(data->str,
				  data->len,
				  root,
				  domain);
  THIS->obj =  (GtkObject *)xml;
  ref_push_object(Pike_fp->current_object);
}

void new(string filename, string|void root, string|void domain)
//! Creates a new GladeXML object (and the corresponding widgets) from
//! the XML file filename. Optionally it will only build the interface
//! from the widget node root. This feature is useful if you only want
//! to build say a toolbar or menu from the XML file, but not the
//! window it is embedded in. Note also that the XML parse tree is
//! cached to speed up creating another GladeXML object for the same
//! file. The third optional argument is used to specify a different
//! translation domain from the default to be used.
{
  GladeXML *xml = 0;
  char *data = NULL, *root = NULL, *domain = NULL;

  glade_verify_setup();

  if(THIS->obj)
    Pike_error("GladeXML->new: Already initialized!\n");

  switch(args)
  {
   case 3:
    if(Pike_sp[-1].type == PIKE_T_STRING) {
      domain = Pike_sp[-1].u.string->str;
      pop_n_elems(1);
      args--;
    } else
      Pike_error("GladeXML->new(): Invalid argument 3, expected string.\n");

   case 2:
    if(Pike_sp[-1].type == PIKE_T_STRING) {
      root = Pike_sp[-1].u.string->str;
      pop_n_elems(1);
      args--;
    } else
      Pike_error("GladeXML->new(): Invalid argument 2, expected string.\n");

   case 1:
    if(Pike_sp[-1].type == PIKE_T_STRING) {
      data = Pike_sp[-1].u.string->str;
      pop_n_elems(1);
      args--;
    } else
      Pike_error("GladeXML->new(): Invalid argument 3, expected string.\n");
    break;
   default:
     Pike_error("Invalid number or arguments to GladeXML->new().\n");
  }
  if(domain != NULL)
    xml = glade_xml_new_with_domain(data, root, domain);
  else
    xml = glade_xml_new(data, root);
  THIS->obj = (GtkObject *)xml;
  ref_push_object(Pike_fp->current_object);
}


GTK.Widget get_widget(string name)
//! This function is used to get get the widget
//! corresponding to name in the interface description. You would use
//! this if you have to do anything to the widget after loading.
{
  GtkWidget *widget = NULL;
  GladeXML *xml;
  if(!THIS->obj)
    Pike_error("GladeXML->get_widget(): No widgets are loaded.\n");
  xml = (GladeXML *)THIS->obj;
  if(args == 1 && Pike_sp[-1].type == PIKE_T_STRING) {
    widget = glade_xml_get_widget(xml, Pike_sp[-1].u.string->str);
    pop_n_elems(args);
    push_gtkobjectclass( widget, pgtk_type_to_program(widget));
  } else
    Pike_error("GladeXML->get_widget(): Invalid argument, expected string.\n");
}


GTK.Widget get_widget_by_long_name(string long_name)
//! This function is used to get the widget
//! corresponding to long_name in the interface description. You would
//! use this if you have to do anything to the widget after
//! loading. This function differs from GladeXML->get_widget, in that
//! you have to give the long form of the widget name, with all its
//! parent widget names, separated by periods.
{
  GtkWidget *widget = NULL;
  GladeXML *xml;
  if(!THIS->obj)
    Pike_error("GladeXML->get_widget_by_long_name(): No widgets are loaded.\n");
  xml = (GladeXML *)THIS->obj;
  if(args == 1 && Pike_sp[-1].type == PIKE_T_STRING) {
    widget = glade_xml_get_widget_by_long_name(xml, Pike_sp[-1].u.string->str);
    pop_n_elems(args);
    push_gtkobjectclass( widget, pgtk_type_to_program(widget));
  } else
    Pike_error("GladeXML->get_widget_by_long_name(): Invalid argument, expected string.\n");
}

string get_widget_long_name(GTK.Widget widget)
//! Used to get the long name of a widget that was generated by a
//! GladeXML object.
{
  struct object *obj;
  GtkWidget *widget = NULL;
  const char *name;

  get_all_args("GladeXML->get_widget_long_name", args, "%o", &obj);
  widget = GTK_WIDGET(get_gtkobject(obj));
  if(!widget)
    Pike_error("GladeXML->get_widget_long_name: Invalid argument 1, wanted GTK object of type WIDGET.\n");

  name = glade_get_widget_long_name(widget);
  pop_n_elems(args);
  if(name != NULL)
  {
    struct pike_string *s;
    s = make_shared_string(name);
    push_string(s);
  } else
    push_int(0);
}


string get_widget_name(GTK.Widget widget)
//! Used to get the name of a widget that was generated by a
//! GladeXML object.
{
  struct object *obj;
  GtkWidget *widget = NULL;
  const char *name;

  get_all_args("GladeXML->get_widget_name", args, "%o", &obj);
  widget = GTK_WIDGET(get_gtkobject(obj));
  if(!widget)
    Pike_error("GladeXML->get_widget_name: Invalid argument 1, wanted GTK object of type WIDGET.\n");

  name = glade_get_widget_name(widget);
  pop_n_elems(args);
  if(name != NULL)
  {
    struct pike_string *s;
    s = make_shared_string(name);
#if 0
    fprintf(stderr, "name: %s\n", name);
#endif
    push_string(s);
  } else
    push_int(0);
}

void signal_autoconnect(mapping(string:function) callbacks, mixed data)
//! Try to connect functions to all signals in the interface. The
//! mapping should consist of handler name : function pairs. The
//! data argument will be saved and sent as the first argument to all
//! callback functions. 
{
  GladeXML *xml;
  if(args != 2 || Pike_sp[-args].type != PIKE_T_MAPPING)
    Pike_error("GTK.GladeXML->signal_autoconnect: Invalid arguments, expected (mapping,mixed)\n");
  if(!THIS->obj)
    Pike_error("GladeXML->get_widget_by_long_name(): No widgets are loaded.\n");
  xml = (GladeXML *)THIS->obj;
  glade_xml_signal_autoconnect_full(xml, pgtk__signal_connect, &args);
  RETURN_THIS();
}

void signal_autoconnect_new(mapping(string:function) callbacks, mixed data)
//! Try to connect functions to all signals in the interface. The
//! mapping should consist of handler name : function pairs. 
//! <p>This function differs from the signal_connect function in how it
//! calls the callback function.
//!
//! </p>
//!
//! <p>
//! The old interface:
//! <pre>
//!   void signal_handler( mixed data, GTK.Object object,
//!                        mixed ... signal_arguments )
//! </pre>
//! The new interface:
//! <pre>
//!   void signal_handler( mixed ... signal_arguments,
//!                        mixed data, GTK.Object object )
//! </pre>
{
  GladeXML *xml;
  if(args != 2 || Pike_sp[-args].type != PIKE_T_MAPPING)
    Pike_error("GTK.GladeXML->signal_autoconnect: Invalid arguments, expected (mapping,mixed)\n");
  if(!THIS->obj)
    Pike_error("GladeXML->get_widget_by_long_name(): No widgets are loaded.\n");
  xml = (GladeXML *)THIS->obj;
  glade_xml_signal_autoconnect_full(xml, pgtk__signal_connect_new, &args);
  RETURN_THIS();
}

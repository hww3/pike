require glarea;
class gl_area;
inherit drawing_area;
ADD_INCLUDE(#include <gtkgl/gdkgl.h>);
ADD_INCLUDE(#include <gtkgl/gtkglarea.h>);
#include <gtkgl/gdkgl.h>
#include <gtkgl/gtkglarea.h>

void create( intarray gloptions );
void make_current();

FUNCTION(swap_buffers, "function(void:object)");
{
  gdk_gl_swap_buffers( GTK_WIDGET(THIS->obj)->window );
  RETURN_THIS();
}

FUNCTION(wait_gl, "function(void:object)");
{
  gdk_gl_wait_gl();
  RETURN_THIS();
}

FUNCTION(wait_gdk, "function(void:object)");
{
  gdk_gl_wait_gdk();
  RETURN_THIS();
}

constant int GDK_GL_NONE;
constant int GDK_GL_USE_GL;
constant int GDK_GL_BUFFER_SIZE;
constant int GDK_GL_LEVEL;
constant int GDK_GL_RGBA;
constant int GDK_GL_DOUBLEBUFFER;
constant int GDK_GL_STEREO;
constant int GDK_GL_AUX_BUFFERS;
constant int GDK_GL_RED_SIZE;
constant int GDK_GL_GREEN_SIZE;
constant int GDK_GL_BLUE_SIZE;
constant int GDK_GL_ALPHA_SIZE;
constant int GDK_GL_DEPTH_SIZE;
constant int GDK_GL_STENCIL_SIZE;
constant int GDK_GL_ACCUM_RED_SIZE;
constant int GDK_GL_ACCUM_GREEN_SIZE;
constant int GDK_GL_ACCUM_BLUE_SIZE;
constant int GDK_GL_ACCUM_ALPHA_SIZE;
constant int GDK_GL_X_VISUAL_TYPE_EXT;
constant int GDK_GL_TRANSPARENT_TYPE_EXT;
constant int GDK_GL_TRANSPARENT_INDEX_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_RED_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_GREEN_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_BLUE_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_ALPHA_VALUE_EXT;


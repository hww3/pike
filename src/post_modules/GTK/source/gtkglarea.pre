/* -*- C -*- */
require glarea;
class GTK.GLArea;
inherit GTK.DrawingArea;
add_global {
#include <gtkgl/gdkgl.h>
#include <gtkgl/gtkglarea.h>
}; %{
#include <gtkgl/gdkgl.h>
#include <gtkgl/gtkglarea.h>
%}

void create( array(int) gloptions )
{
  int i;
  struct array *_arg_list;
  gint *arg_list;

  pgtk_verify_setup();
  if( (args < 1) ||
      Pike_sp[0-args].type != PIKE_T_ARRAY )
    Pike_error("Bad argument 0, expected array\n");

  _arg_list = Pike_sp[0-args].u.array;
  arg_list = g_malloc0( sizeof( arg_list[0] ) * (_arg_list->size+1));
  for( i = 0; i < _arg_list->size; i++ )
  {
    if( !PGTK_ISINT(&_arg_list->item[i]) )
    {
      free( arg_list );
      Pike_error("Wrong type array argument (index %d).\n", i );
    }
    arg_list[ i ] = (gint)PGTK_GETINT(&_arg_list->item[i]);
  }
  arg_list[i] = 0;
  THIS->obj =  (void *)  gtk_gl_area_new( arg_list );
  if( !THIS->obj )
  {
    g_free( arg_list );
    Pike_error("Failed to initialize GLArea\n");
  }
  my_pop_n_elems( args );
  push_int( 0 );
  g_free( arg_list );
  pgtk__init_object( Pike_fp->current_object );
}

void make_current();

void swap_buffers()
{
  gdk_gl_swap_buffers( GTK_WIDGET(THIS->obj)->window );
  RETURN_THIS();
}

void wait_gl()
{
  gdk_gl_wait_gl();
  RETURN_THIS();
}

void wait_gdk()
{
  gdk_gl_wait_gdk();
  RETURN_THIS();
}

constant int GDK_GL_NONE;
constant int GDK_GL_USE_GL;
constant int GDK_GL_BUFFER_SIZE;
constant int GDK_GL_LEVEL;
constant int GDK_GL_RGBA;
constant int GDK_GL_DOUBLEBUFFER;
constant int GDK_GL_STEREO;
constant int GDK_GL_AUX_BUFFERS;
constant int GDK_GL_RED_SIZE;
constant int GDK_GL_GREEN_SIZE;
constant int GDK_GL_BLUE_SIZE;
constant int GDK_GL_ALPHA_SIZE;
constant int GDK_GL_DEPTH_SIZE;
constant int GDK_GL_STENCIL_SIZE;
constant int GDK_GL_ACCUM_RED_SIZE;
constant int GDK_GL_ACCUM_GREEN_SIZE;
constant int GDK_GL_ACCUM_BLUE_SIZE;
constant int GDK_GL_ACCUM_ALPHA_SIZE;
constant int GDK_GL_X_VISUAL_TYPE_EXT;
constant int GDK_GL_TRANSPARENT_TYPE_EXT;
constant int GDK_GL_TRANSPARENT_INDEX_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_RED_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_GREEN_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_BLUE_VALUE_EXT;
constant int GDK_GL_TRANSPARENT_ALPHA_VALUE_EXT;



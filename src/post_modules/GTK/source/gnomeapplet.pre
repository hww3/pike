require gnome;
ADD_INCLUDE(#include <applet-widget.h>);
class gnome_applet_widget;
inherit plug;
#include <applet-widget.h>
signal change_orient;
signal change_pixel_size;
signal save_session;
signal back_change;
signal do_draw;
signal tooltip_state;
signal change_position;

void create( string applet_name );
// Make a new applet and register us with the panel, if you decide to
// cancel the load before calling add, you should call
// abort_load.

void add( widget what );
// Add a child (widget) to the applet. This finishes the handshaking
// with the panel started in applet_widget_new. You should never call
// this function twice for the same applet. If you have already
// created an applet widget, but need to cancel the loading of the
// applet, use abort_load.

void add_full( widget what, int bind_events );
// As add, but this function is only for special applets and you
// should use bind_events on some internal widget if bind_events was
// FALSE. Normally you'll just want to use add.

void abort_load();
//  Abort the applet loading, once applet has been created, this is a
//  way to tell the panel to forget about us if we decide we want to
//  quit before we add the actual applet to the applet-widget. This is
//  only useful before before add() is called.
void remove();
// Remove the plug from the panel, this will destroy the applet. You
// can only call this once for each applet.
void bind_events( widget to );
// Binds the 2nd and 3rd button clicks over this widget. Normally this
// is done during add, but if you need to bind events over a widget
// which you added later, use this function.

void set_tooltips( string to );
// Set a tooltip on the entire applet that will follow the tooltip
// setting from the panel configuration.

void set_widget_tooltip( widget widget, string text );
// Set a tooltip on the widget that will follow the tooltip setting
// from the panel configuration.

constant int GNOME_Panel_ORIENT_UP;
constant int GNOME_Panel_ORIENT_DOWN;
constant int GNOME_Panel_ORIENT_LEFT;
constant int GNOME_Panel_ORIENT_RIGHT;

int get_panel_orient();
// Gets the orientation of the panel this widget is on. it can be one
// of CONST(GNOME_Panel_ORIENT). This is not the position of the
// panel, but rather the direction that the applet should be "reaching
// out". So any arrows should for example point in this direction. It
// will be OrientUp or OrientDown for horizontal panels and OrientLeft
// or OrientRight for vertical panels

int get_panel_pixel_size();
// Gets the width of the panel in pixels. This is not the actual size,
// but the recomended one. The panel may be streched if the applets
// use larger sizes then this.

int get_free_space();
// Gets the free space left that you can use for your applet. This is
// the number of pixels around your applet to both sides. If you
// strech by this amount you will not disturb any other applets. If
// you are on a packed panel 0 will be returned.

void send_position( int enable );
// If you need to get a signal everytime this applet changes position
// relative to the screen, you need to run this function with TRUE for
// enable and bind the change_position signal on the applet. This
// signal can be quite CPU/bandwidth consuming so only applets which
// need it should use it. By default change_position is not sent.

void send_draw( int enable );
// If you are using rgb background drawing, call this function with
// TRUE for enable, and then bind the do_draw signal. Inside that
// signal you can get an RGB buffer to draw on with get_rgb_bg. The
// do_draw signal will only be sent when the RGB truly changed.


void register_callback( string name, string menutext, callback callback);
// Adds a menu item to the applet's context menu. The name should be a
// path that is separated by '/' and ends in the name of this
// item. You need to add any submenus with register_callback_dir.

void register_stock_callback( string name, string stock_type, string menutext, callback callback);
// Adds a menu item to the applet's context menu with a stock GNOME
// pixmap. This works almost exactly the same as register_callback.

void unregister_callback( string name );
// Remove a menu item from the applet's context menu. The name should
// be the full path to the menu item. This will not remove any
// submenus.

void register_callback_dir( string name, string menutext );
// Adds a submenu to the applet's context menu. The name should be the
// full path of the new submenu with the name of the new submenu as
// the last part of the path. The name can, but doesn't have to be
// terminated with a '/'.

void register_stock_callback_dir( string name, string stock_type, string menutext );
// Adds a submenu to the applet's context menu with a stock GNOME
// pixmap. This is similiar to register_callback_dir.

void unregister_callback_dir( string name );
// Removes a submenu from the applet's context menu. Use this instead
// of unregister_callback to remove submenus. The name can be, but
// doesn't have to be terminated with a '/'. If you have not removed
// the subitems of this menu, it will still be shown but without it's
// title or icon. So make sure to first remove any items and submenus
// before calling this function.

void callback_set_sensitive( string name, int sensitive );
// Sets the sensitivity of a menu item in the applet's context menu.

void sync_config();
// Tell the panel to save our session here (just saves, no
// shutdown). This should be done when you change some of your config
// and want the panel to save it's config, you should NOT call this in
// the session_save handler as it will result in a locked panel, as it
// will actually trigger another session_save signal for you. However
// it also asks for a complete panel save, so you should not do this
// too often, and only when the user has changed some preferences and
// you want to sync them to disk. Theoretically you don't even need to
// do that if you don't mind loosing settings on a panel crash or when
// the user kills the session without logging out properly, since the
// panel will always save your session when it exists.

void queue_resize();
// For shared library applets this calls gtk_widget_queue_resize on
// the internal panel eventbox, for external applets this just calls
// this on the AppletWidget itself, but in both cases it forces a
// resize of the socket on the panel

/* -*- C -*- */
class GTK.Calendar;
inherit GTK.Widget;
//! A calendar widget.
//! IMG: GTK.Calendar();
//! IMG: GTK.Calendar()->select_day( 16 );

signal month_changed;
signal day_selected;
signal day_selected_double_click;
signal prev_month;
signal next_month;
signal prev_year;
signal next_year;

void create();
//! Create a new calendar widget

int select_month( int month, int year );
//! Select the month to be viewed.

void select_day( int day_of_month );
//! Select a certain day of the currently selected month

void mark_day( int day_of_month );
//! Mark a day

void unmark_day( int day_of_month );
//! Unmark a day

void clear_marks();
//! Remove all day markers
void display_options( int options );
//! Bitwise or of one or more of CONST(GTK_CALENDAR).

mapping get_date()
//! returns a mapping:<br />
//! ([ "year":year, "month":month, "day":day ])
{
  guint y, m, d;
  gtk_calendar_get_date( GTK_CALENDAR( THIS->obj ), &y, &m, &d );
  push_text("year");
  push_int( y );
  push_text("month");
  push_int( m );
  push_text("day");
  push_int( d );
  f_aggregate_mapping( 6 );
}

void freeze();
//! Suspend all dynamic updating of the widget
void thaw();
//! Resume dynamic updating of the widget

member int focus_row;
//! The currently focused row
member int focus_col;
//! The currently focused column
member int highlight_row;
//! The currently highlighted row
member int highlight_col;
//! The currently highlighted column

member int month;
//! The current month
member int year;
//! The current year
member int selected_day;
//! The currently selected day
member int num_marked_dates;
//! The number of days that are marked

array(int) get_marked_dates()
//! Returns an array (with 31 elements) with 1es and 0es.
{
  int i;
  for(i=0; i<31; i++)
    push_int( GTK_CALENDAR( THIS->obj )->marked_date[i] );
  f_aggregate( 31 );
}

array(array(int)) get_day_month()
//! Return an array of 6x7 days, representing the cells in the
//! currently viewed calendar month.  The value is the day of month.
{
  int i,j;
  for(i=0; i<6; i++)
  {
    for(j=0; j<7; j++)
      push_int( GTK_CALENDAR( THIS->obj )->day_month[i][j] );
    f_aggregate( 7 );
  }
  f_aggregate( 6 );
}

array(array(int)) get_day()
//! Return an array of 6x7 days, representing the cells in the
//! currently viewed calendar month.
{
  int i,j;
  for(i=0; i<6; i++)
  {
    for(j=0; j<7; j++)
      push_int( GTK_CALENDAR( THIS->obj )->day[i][j] );
    f_aggregate( 7 );
  }
  f_aggregate( 6 );
}

void set_marked_date_color(int index, GDK.Color color)
//! Set the color to use to mark dates
{
  INT_TYPE n;
  struct object *o;
  get_all_args( "set_marked_date_color", args, "%i%o", &n, &o );
  if(!get_gdkobject(o, color))
    Pike_error("Argument 2 is not a GDK.Color object\n");
  n--;
  if(n > 30 || n<0)
    Pike_error("Argument 1 is not between 1 and 31, inclusive\n");
  GTK_CALENDAR( THIS->obj )->marked_date_color[n] =
                *(GdkColor*)get_gdkobject(o, color);
  RETURN_THIS();
}



PROGRAM(combo);
// Thee combo box is another fairly simple widget that is really just
// a collection of other widgets. From the user's point of view, the
// widget consists of a text entry box and a pull down menu from which
// the user can select one of a set of predefined
// entries. Alternatively, the user can type a different option
// directly into the text box.
// <p>
// The combo box has two principal parts that you as the programmer
// really care about: The W(entry) and the W(list).
// <p>
// IMG: GTK.Combo()
INHERIT(hbox);
COMPLEX_FUNCTION(create);
// Create a new combo box
COMPLEX_FUNCTION(set_value_in_list, int, int);
NAME_ARGS(value_must_be_in_list,ok_if_empty);
// If value_must_be_in_list is true, the user will not be able to
// enter any value that is not in the list. If ok_if_empty is true,
// empty values are possible as well as the values in the list.

COMPLEX_FUNCTION(set_use_arrows, int);
NAME_ARGS(use_arrows);
// set_use_arrows() lets the user change the value in the entry using
// the up/down arrow keys. This doesn't bring up the list, but rather
// replaces the current text in the entry with the next list entry (up
// or down, as your key choice indicates). It does this by searching
// in the list for the item corresponding to the current value in the
// entry and selecting the previous/next item accordingly. Usually in
// an entry the arrow keys are used to change focus (you can do that
// anyway using TAB). Note that when the current item is the last of
// the list and you press arrow-down it changes the focus (the same
// applies with the first item and arrow-up).

COMPLEX_FUNCTION(set_use_arrows_always, int);
NAME_ARGS(always_arrows);
// set_use_arrows_always() allows the use the the up/down arrow keys
// to cycle through the choices in the dropdown list, just as with
// set_use_arrows, but it wraps around the values in the list,
// completely disabling the use of the up and down arrow keys for
// changing focus.

COMPLEX_FUNCTION(set_case_sensitive, int);
NAME_ARGS(sensitivep);
// set_case_sensitive() toggles whether or not GTK searches for
// entries in a case sensitive manner. This is used when the Combo
// widget is asked to find a value from the list using the current
// entry in the text box. This completion can be performed in either a
// case sensitive or insensitive manner, depending upon the use of
// this function. The Combo widget can also simply complete the
// current entry if the user presses the key combination MOD-1 and
// "Tab". MOD-1 is often mapped to the "Alt" key, by the xmodmap
// utility. Note, however that some window managers also use this key
// combination, which will override its use within GTK.

COMPLEX_FUNCTION(set_item_string, item, string);
NAME_ARGS(item,text);
// The item is one of the ones in the list subwidget.
FUNCTION(set_popdown_strings, "function(array:object)" );
RETURNS(GTK.Combo);
NAME_ARGS(popdows_strings);
// Set the values in the popdown list.
{
  GList *s = NULL;
  struct array *a;
  int i;
  get_all_args("set_popdown_strings", args, "%a", &a);
  for(i=0; i<a->size; i++)
    if(a->item[i].type == T_STRING)
      s = g_list_append( s, a->item[i].u.string->str );
  if(!s)
    error("No items in list!\n");
  gtk_combo_set_popdown_strings( GTK_COMBO( THIS->obj ), s );
  g_list_free( s );

  RETURN_THIS();
}

SIMPLE_FUNCTION(disable_activate);
// This will disable the 'activate' signal for the entry widget in the
// combo box.

SUBWIDGET(entry, entry);
// The entry widget
SUBWIDGET(list, list);
// The list widget, contains the list of choices as W(Label) widgets.

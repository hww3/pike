%{
#ifndef __NT__
#include <gdk/gdkx.h>
#else
#include <gdk/win32/gdkwin32.h>
#endif
/* The main stuff.. */

int pigtk_is_setup = 0, gnome_is_setup = 0;
/* Not used in this file, really, but we need the require
 * 'preprocessor' stuff..
 */

int IS_OBJECT_PROGRAM(struct program *X)
{
  return  !(((X) == pgtk_style_program)
            || ((X) == pgtk_ctree_node_program)
            || ((X) == pgtk_ctree_row_program)
            || ((X) == pgtk_selection_data_program));
}

static void backend_callback(struct callback *_cb,
                             void *arg,
                             void *post_select)
{
  if( !post_select )
  {
    next_timeout = current_time;
    next_timeout.tv_usec += 20000;
    if(next_timeout.tv_usec > 1000000)
    {
      next_timeout.tv_usec-=1000000;
      next_timeout.tv_sec+=1;
    }
  } else
    while(g_main_iteration( 0 ) );
}

static struct callback *backend_cb;
%}
void parse_rc(string rc)
//! Takes a string and reads it as a gtkrc file.
{
  char *s;
  get_all_args("parse_rc", args, "%s", &s );
  gtk_rc_parse_string( s );
  my_pop_n_elems(args);
  push_int( 0 );
/*   gtk_widget_propagate_default_style(); */
}


GDK.Window root_window()
//! Returns the root window of the current display
{
  static struct object *_pgtk_root_window;
  my_pop_n_elems( args );
  if(_pgtk_root_window && _pgtk_root_window->prog )
  {
    ref_push_object( _pgtk_root_window );
    return;
  } else if( _pgtk_root_window )
    free_object( _pgtk_root_window );
  _pgtk_root_window = low_clone( pgdk_window_program );
  call_c_initializers( _pgtk_root_window );
  /* ugly...*/
#ifdef GDK_ROOT_PARENT
  ((struct object_wrapper *)_pgtk_root_window->storage)->obj=
    (void *)GDK_ROOT_PARENT();
#else
  ((struct object_wrapper *)_pgtk_root_window->storage)->obj=
    (void *)&gdk_root_parent;
#endif
  add_ref( _pgtk_root_window  );
  ref_push_object( _pgtk_root_window );
}


require gnome;
%{
#include <applet-widget.h>
CORBA_Environment gnorba_environment;
%}

void gnome_init(string app_id, string app_version,
                array(string) argv, int|void corba_init_flags)
//! Initializes the application. This sets up all of the GNOME
//! internals and prepares them (imlib, gdk/gtk, session-management,
//! triggers, sound, user preferences). If corba init flags are specified,
//! corba initialization is done as well as gnome initialization.
//! corba_init_flags is 0 or more of GNORBA_INIT_SERVER_FUNC (1),
//! GNORBA_INIT_DISABLE_COOKIES (2) and GNORBA_INIT_CORBA_PRIO_HIGH (4)
{
  gchar **data;
  char *id, *vers;
  INT_TYPE argc, flags=0;

  if( pigtk_is_setup )
    Pike_error( "You should only call GTK.setup_gtk() or Gnome.init() once\n");

  switch( args )
  {
   default:
     Pike_error( "Too few arguments, expected at least 3\n");
   case 4:
     flags = PGTK_GETINT( Pike_sp-1 );
   case 3:
     if( !PGTK_ISSTR( Pike_sp-args ) ||
         !PGTK_ISSTR( Pike_sp-args+1 ) )
       Pike_error("Illegal argument to Gnome.init()\n");
     id = PGTK_GETSTR( Pike_sp-args );
     vers = PGTK_GETSTR( Pike_sp-args+1 );
     data = get_argv( &argc, args-2 );
  }
  gnome_is_setup = 1;
  pigtk_is_setup = 1;

  gtk_set_locale();

  if( args == 4 )
    applet_widget_init( id, vers, argc, data, NULL, flags, NULL );
  else
    gnome_init( id, vers, argc, data );

  backend_cb = (void *)add_backend_callback( backend_callback, 0, 0);

  my_pop_n_elems(args);
  push_and_free_argv( data, argc, 1 );
}

void applet_widget_gtk_main_quit()
//! Exit from the applet_widget_gtk_main function on the next iteration.
{
  gtk_main_quit();
}

void applet_widget_gtk_main()
//! Special corba main loop for gnome panel applets
{
  applet_widget_gtk_main();
}
endrequire;

void set_new_signal_convention( int n )
{
  extern int pgtk_new_signal_call_convention;
  if( !args || !PGTK_ISINT( Pike_sp-args ) )
    Pike_error("Illegal argument to set_new_signal_convention\n" );
  pgtk_new_signal_call_convention = (int)PGTK_GETINT( Pike_sp-args );
  pop_n_elems( args );
}

%{
static gchar **get_argv( int *argc_ret, int an )
{
  struct array *a;
  int argc;
  gchar **data;
  if( Pike_sp[-an].type != PIKE_T_ARRAY )
    Pike_error("Expected array\n");
  a = Pike_sp[-an].u.array;
  data = g_malloc0(sizeof(char *)*(a->size+1));
  for( argc=0; argc<a->size; argc++ )
    if(!PGTK_ISSTR( a->item+argc ))
    {
      g_free(data);
      Pike_error("Index %d in the array given as argv  "
                 "is not a valid string.\n", argc);
    }
    else
      data[argc] = PGTK_GETSTR( a->item+argc );
  *argc_ret = argc;
  return data;
}

static void push_and_free_argv( gchar ** data, int argc, int np )
{
  int i;
  for( i=0; i<argc; i++ )
  {
    PGTK_PUSH_GCHAR( data[ i ] );
    if(!np) PGTK_FREESTR( data[ i ] );
  }
  if(!np)
    f_aggregate( argc );
  else
    push_int( 0 );
  g_free(data);
}
%}
void setup_gtk(array(string)|void argv, int|void do_not_parse_rc)
//! Initialize GTK, and all that comes with it.
//! Also parses $HOME/.pgtkrc and $HOME/.gtkrc if they exists.
//! The single argument, if supplied, is the argument array passed to
//! the program. This is used to set default window titles etc.
//! The second argument, if supplied, indicates that pike specific *rc files
//! should <b>not</b> be parsed.
//! <p>
//! The most common usage is GTK.setup_gtk(argv);</p>
{
  gchar **data;
  int argc;

  if( pigtk_is_setup )
    Pike_error( "You should only call GTK.setup_gtk() or Gnome.init() once\n");

  if(args)
    data = get_argv( &argc, args );
  else
  {
    data = g_malloc(sizeof(char *)*2);
    data[ 0 ] = "Pike GTK";
    argc=1;
  }
  pigtk_is_setup = 1;
  gtk_set_locale();
  gtk_init( &argc, &data );

  backend_cb = (void *)add_backend_callback( backend_callback, 0, 0);
  my_pop_n_elems(args);
  push_and_free_argv( data, argc, 0 );
}

void flush()
//! Flush GDK. Not normally needed, can be useful while doing calculations.
{
  gdk_flush();
  while(g_main_iteration( 0 ) );
  my_pop_n_elems(args);
  push_int(0);
}

void low_flush()
//! Flush, but do not process events. Not normally needed.
{
#ifndef __NT__
  XFlush( GDK_DISPLAY() );
#else
  gdk_flush();
#endif
  my_pop_n_elems( args );
  push_int( 0 );
}

void gtk_init(array(string)|void argc, int|void no_pgtkrc)
//! Low level GTK init function (used by setup_gtk).
//! This function is more or less equivalent to the C-GTK+ function gtk_init.
//! setup_gtk does some extra things (such as parsing ~/.pgtkrc).
{
  pgtk_setup_gtk( args );
}


void main()
//! Start GTK in blocking mode.<br />
//! Doing this disables asynchronous I/O in pike.<br />
//! You can return -1 from main in pike to run GTK (and the rest of
//! pike) in asynchrounous mode.
{
  gtk_main();
}

void main_quit()
//! Exit from the gtk_main function on the next iteration.
{
  gtk_main_quit();
}

int main_level()
//! Return the current recursion depth.
{
  push_int( gtk_main_level() );
}

int main_iteration_do(int block)
//! Run one iteration in the mainloop. If block is true, wait for an
//! event before returning.
{
  INT_TYPE n;
  get_all_args( "gtk_main_iteration_do", args, "%d", &n );
  push_int( g_main_iteration( n ) );
}

int true()
//! Always returns true.
{
  push_int( 1 );
}

int false()
//! Always returns false.
{
  push_int( 0 );
}

void grab_add(GTK.Widget widget)
{
  struct object *o;
  get_all_args( "gtk_grab_add", args, "%o", &o );
  gtk_grab_add( GTK_WIDGET( get_gtkobject( o ) ) );
  my_pop_n_elems( args );
}

void grab_remove(GTK.Widget widget)
{
  struct object *o;
  get_all_args( "gtk_grab_remove", args, "%o", &o );
  gtk_grab_remove( GTK_WIDGET( get_gtkobject( o ) ) );
  my_pop_n_elems( args );
}


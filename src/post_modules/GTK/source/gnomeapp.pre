COND_WIDGET(gnome);
PROGRAM(gnome_app);
INHERIT(window);
// Toplevel GNOME applications would normally use one Gnome.App widget
// as their toplevel window. You can create as many Gnome.App widgets
// as you want, for example, some people use one GnomeApp per document
// their application loads.
// <p>
// Once you have created one instance of this widget, you would add
// your main application view information to this window by using
// set_contents() routine.
// <p>
// The GnomeApp has support for including a menubar, one or more
// toolbars and a statusbar for your application. It also takes care
// of intalling the accelerators for you when used in conjuction with
// the gnome-app-helper routines. The toolbars are inserted into
// Gnome.Dock widgets.
// <p>
// The gnome-app-helper module provides various helper routines to
// simplify the configuration of your menus and toolbars, but you can
// create those yourself and use the set_menus(), add_toolbar(),
// set_toolbar(), add_dock_item() and add_docked().

COMPLEX_FUNCTION(create, string, string );
NAME_ARGS( appname, ?title );
// Create a new (empty) application window. You must specify the
// application's name (used internally as an identifier). title can be
// left as 0, in which case the window's title will not be set.

COMPLEX_FUNCTION(set_menus, menu_bar );
NAME_ARGS( menu_bar );
// Sets the menu bar of the application window.

COMPLEX_FUNCTION(set_toolbar, toolbar );
NAME_ARGS( toolbar );
// Sets the main toolbar of the application window.

COMPLEX_FUNCTION(set_statusbar, widget );
NAME_ARGS( statusbar );
// Sets the status bar of the application window.

COMPLEX_FUNCTION(add_toolbar, toolbar, string, int, int, int, int, int );
NAME_ARGS( toolbar, name, behavior, placement, band_num, band_position, offset );
// Create a new Gnome.DockItem widget containing toolbar, and add it
// to app's dock with the specified layout information. Notice that,
// if automatic layout configuration is enabled, the layout is
// overridden by the saved configuration, if any.
// <p>
//
// toolbar : Toolbar to be added to app's dock<br>
// name : Name for the dock item that will contain toolbar<br>
// behavior : Behavior for the new dock item. One or more of CONST(GNOME_DOCK_ITEM_BEH)
// placement :  Placement for the new dock item, one of Gnome.DockTop,  Gnome.DockRight,  Gnome.DockBottom,  Gnome.DockLeft and  Gnome.DockFloating <br>
// band_num : Number of the band where the dock item should be placed
// band_position : Position of the new dock item in band band_num
// offset : Offset from the previous dock item in the band; if there is no previous item, offset from the beginning of the band.

COMPLEX_FUNCTION(add_docked, widget, string, int, int, int, int, int );
NAME_ARGS( widget, name, behavior, placement, band_num, band_position, offset );
// Create a new Gnome.DockItem widget containing widget, and add it
// to app's dock with the specified layout information. Notice that,
// if automatic layout configuration is enabled, the layout is
// overridden by the saved configuration, if any.
// <p>
//
// widget : Widget to be added to app's dock<br>
// name : Name for the dock item that will contain toolbar<br>
// behavior : Behavior for the new dock item. One of CONST(GNOME_DOCK_ITEM_BEH)
// placement :  Placement for the new dock item, one of Gnome.DockTop,  Gnome.DockRight,  Gnome.DockBottom,  Gnome.DockLeft and  Gnome.DockFloating <br>
// band_num : Number of the band where the dock item should be placed
// band_position : Position of the new dock item in band band_num
// offset : Offset from the previous dock item in the band; if there is no previous item, offset from the beginning of the band.

COMPLEX_FUNCTION(add_dock_item, gnome_dock_item, int, int, int, int );
NAME_ARGS( item, placement, band_num, band_position, offset );
// Create a new Gnome.DockItem widget containing widget, and add it
// to app's dock with the specified layout information. Notice that,
// if automatic layout configuration is enabled, the layout is
// overridden by the saved configuration, if any.
// <p>
//
// item : Item to be added to app's dock<br>
// placement :  Placement for the new dock item, one of Gnome.DockTop,  Gnome.DockRight,  Gnome.DockBottom,  Gnome.DockLeft and  Gnome.DockFloating <br>
// band_num : Number of the band where the dock item should be placed
// band_position : Position of the new dock item in band band_num
// offset : Offset from the previous dock item in the band; if there is no previous item, offset from the beginning of the band.

COMPLEX_FUNCTION(enable_layout_config, int );
NAME_ARGS(enable);
// Specify whether the the dock's layout configuration should be
// automatically saved via gnome-config whenever it changes, or not.

gnome_dock COMPLEX_FUNCTION(get_dock );
// retrieved the Gnome.Dock widget contained in the App

gnome_dock_item COMPLEX_FUNCTION(get_dock_item_by_name, string );
NAME_ARGS( name );

END_COND_WIDGET(gnome);

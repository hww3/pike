PROGRAM(editable);
// The GTK.Editable class is a base class for widgets for editing text,
// such as W(Entry) and W(Text). It cannot be instantiated by
// itself. The editable class contains functions for generically
// manipulating an editable widget, a large number of action signals
// used for key bindings, and several signals that an application can
// connect to to modify the behavior of a widget.
SIGNAL("activate", "Indicates that the user has activated the widget in some fashion. Generally, this will be done with a keystroke. (The default binding for this action is Return for GTK.Entry and Control-Return for GTK.Text.");
SIGNAL("changed", "Called when the text in the edit area is changed");
SIGNAL("insert_text", "This signal is emitted when text is inserted into the widget by the user. The default handler for this signal will normally be responsible for inserting the text, so by connecting to this signal and then stopping the signal with signal_emit_stop(), it is possible to modify the inserted text, or prevent it from being inserted entirely.");
SIGNAL("delete_text", "This signal is emitted when text is deleted from the widget by the user. The default handler for this signal will normally be responsible for inserting the text, so by connecting to this signal and then stopping the signal with signal_emit_stop(), it is possible to modify the inserted text, or prevent it from being inserted entirely. The start_pos and end_pos parameters are interpreted as for delete_text()");
SIGNAL("set_editable", "Determines if the user can edit the text in the editable widget or not. This is meant to be overriden by child classes and should not generally be useful to applications.");
SIGNAL("move_cursor", "An action signal. Move the cursor position.");
SIGNAL("move_word", "An action signal. Move the cursor by words.");
SIGNAL("move_page", "An action signal. Move the cursor by pages.");
SIGNAL("move_to_row", "An action signal. Move the cursor to the given row.");
SIGNAL("move_to_column", "An action signal. Move the cursor to the given column.");
SIGNAL("kill_char", "An action signal. Delete a single character.");
SIGNAL("kill_word", "n action signal. Delete a single word.");
SIGNAL("kill_line", "An action signal. Delete a single line.");
SIGNAL("cut_clipboard", "An action signal. Causes the characters in the current selection to be copied to the clipboard and then deleted from the widget.");
SIGNAL("copy_clipboard", "An action signal. Causes the characters in the current selection to be copied to the clipboard.");
SIGNAL("paste_clipboard", "An action signal. Causes the contents of the clipboard to be pasted into the editable widget at the current cursor position.");
INHERIT(widget);
COMPLEX_FUNCTION(select_region, int, int);
NAME_ARGS(start_pos,end_pos);
// Selects a region of text. The characters that are selected are
// those characters at positions from start_pos up to, but not
// including end_pos. If end_pos is negative, then the the characters
// selected will be those characters from start_pos to the end of the
// text. are
COMPLEX_FUNCTION(insert_text, string, int, intp);
NAME_ARGS(text,num_chars,where);
// Insert 'num_chars' characters from the text at the position 'where'.
COMPLEX_FUNCTION(delete_text, int, int);
NAME_ARGS(start_pos,end_pos);
// Delete a sequence of characters. The characters that are deleted
// are those characters at positions from start_pos up to, but not
// including end_pos. If end_pos is negative, then the the characters
// deleted will be those characters from start_pos to the end of the
// text.
COMPLEX_FUNCTION(cut_clipboard);
// Causes the characters in the current selection to be copied to the
// clipboard and then deleted from the widget.
COMPLEX_FUNCTION(copy_clipboard);
// Causes the characters in the current selection to be copied to the
// clipboard.
COMPLEX_FUNCTION(paste_clipboard);
// Causes the contents of the clipboard to be pasted into the given
// widget at the current cursor position.
COMPLEX_FUNCTION(claim_selection,int, int);
NAME_ARGS(claimp,unix_time);
// Claim or disclaim ownership of the PRIMARY X selection.
string COMPLEX_FUNCTION(get_chars, int,int);
NAME_ARGS(start_pos,end_pos);
// Retrieves a sequence of characters. The characters that are
// retrieved are those characters at positions from start_pos up to,
// but not including end_pos. If end_pos is negative, then the the
// characters retrieved will be those characters from start_pos to the
// end of the text.
COMPLEX_FUNCTION(set_position, int);
NAME_ARGS(pos);
// Sets the cursor position.
int COMPLEX_FUNCTION(get_position);
// Returns the cursor position
COMPLEX_FUNCTION(set_editable, int);
NAME_ARGS(editablep);
// Determines if the user can edit the text in the editable widget or
// not.
CLASSMEMBER(selection_start_pos, int);
// returns the cursor position of the selection start
CLASSMEMBER(selection_end_pos, int);
// returns the cursor position of the selection end
CLASSMEMBER(clipboard_text, string);
// returns the text currently in the clipboard.
SIMPLE_FUNCTION(delete_selection);
// Deletes the current contents of the widgets selection and disclaims
// the selection.
SIMPLE_FUNCTION(changed);
// Causes the "changed" signal to be emitted.

PROGRAM(paned);
// GTK.Paned is the base class for widgets with two panes, arranged
// either horizontally (W(HPaned)) or vertically (W(VPaned)). Child
// widgets are added to the panes of the widget with pack1() and
// pack2(). The division beween the two children is set by default
// from the size requests of the children, but it can be adjusted by
// the user.

// <p>

// A paned widget draws a separator between the two child widgets and
// a small handle that the user can drag to adjust the division. It
// does not draw any relief around the children or around the
// separator. (The space in which the separator is called the
// gutter). Often, it is useful to put each child inside a W(Frame)
// with the shadow type set to GTK.ShadowIn so that the gutter
// appears as a ridge.

// <p>

// Each child has two options that can be set, resize and shrink. If
// resize is true, then when the GTK.Paned is resized, that child will
// expand or shrink along with the paned widget. If shrink is true,
// then when that child can be made smaller than it's requisition by
// the user. Setting shrink to 0 allows the application to set a
// minimum size. If resize is false for both children, then this is
// treated as if resize is true for both children.

// <p>

// The application can set the position of the slider as if it were
// set by the user, by calling set_position().
INHERIT(container);
COMPLEX_FUNCTION(add1, widget);
NAME_ARGS(left_or_top);
// Set the left or topmost item.<br>
// This is equivalent to pack1(left_or_top,0,1)
COMPLEX_FUNCTION(add2, widget);
NAME_ARGS(right_or_bottom);
// Set the right or bottommost item<br>
// This is equivalent to pack2(left_or_top,0,1)
COMPLEX_FUNCTION(set_handle_size, int);
NAME_ARGS(hsize);
// The size of the handle in pixels
COMPLEX_FUNCTION(set_gutter_size, int);
NAME_ARGS(gsize);
// Set the width of the gutter. (The area between the two panes).
COMPLEX_FUNCTION(set_position, int);
NAME_ARGS(position);
// Set the position of the separator, as if set by the user. If
// position is negative, the remembered position is forgotten, and
// the division is recomputed from the the requisitions of the
// children.
COMPLEX_FUNCTION(pack1, widget, int, int);
NAME_ARGS(widget,resize, shrink);
// Add a child to the top or left pane.
COMPLEX_FUNCTION(pack2, widget, int, int);
NAME_ARGS(widget,resize, shrink);
// Add a child to the bottom or right pane.
CLASSMEMBER(handle_size, int);
// The size of the handle, in pixels
CLASSMEMBER(gutter_size, int);
// The size of the gutter, in pixels

CLASSMEMBER(handle_xpos, int);
// The xpos of the handle, in pixels
CLASSMEMBER(handle_ypos, int);
// The ypos of the handle, in pixels

CLASSMEMBER(min_position, int);
// The minimum handle position possible.
CLASSMEMBER(max_position, int);
// The maximum handle position possible.

CLASSMEMBER(in_drag, int);
// Return 1 if the user is dragging the handle

/* -*- C -*- */
class GTK.Pixmap;
inherit GTK.Misc;
//! Pixmaps are data structures that contain pictures. These pictures
//! can be used in various places, but most visibly as icons on the
//! X-Windows desktop, or as cursors. A bitmap is a 2-color pixmap.
//! <p>
//! To use pixmaps in GTK, you must first build a GDK.Pixmap object
//! using GDK.Pixmap.
//! </p><p>
//! The pixels in a GTK.Pixmap cannot be manipulated by the application
//! after creation, since under the X Window system the pixel data is
//! stored on the X server and so is not available to the client
//! application. If you want to create graphical images which can be
//! manipulated by the application, look at W(Image).
//! </p><p>
//! IMG: GTK.Pixmap( GDK.Pixmap( Image.Image(100,100)->test()) )
//! IMG: GTK.Pixmap( GDK.Pixmap( Image.Image(100,100)->test()), GDK.Bitmap(Image.Image(100,100,255,255,255)->box(10,10,80,80, 0,0,0) ))
//! </p>

void create( GDK.Pixmap pixmap, ?GDK.Bitmap mask );
//! Create a new pixmap object, and sets the image and the mask.

void set( GDK.Pixmap pixmap, ?GDK.Bitmap mask );
//! Sets the GDK.Pixmap image and the optinal GDK.Bitmap mask

member int build_insensitive;

mapping(string:mixed) get()
//! Returns ([ <br />
//!            "pixmap":pixmap, <br />
//!            "mask":mask,  <br />
//!            "pixmap_insensitive":insensitive version of the pixmap <br />
//!          ]) <br />
{
  my_pop_n_elems( args );

  push_text( "pixmap" );
  if( GTK_PIXMAP( THIS->obj )->pixmap )
  {
    gdk_pixmap_ref( GTK_PIXMAP( THIS->obj )->pixmap );
    push_gdkobject( GTK_PIXMAP( THIS->obj )->pixmap, pixmap );
  }
  else
    push_int( 0 );

  push_text( "mask" );
  if( GTK_PIXMAP( THIS->obj )->mask )
  {
    gdk_pixmap_ref( GTK_PIXMAP( THIS->obj )->mask );
    push_gdkobject( GTK_PIXMAP( THIS->obj )->mask, bitmap );
  }
  else
    push_int( 0 );

  push_text( "pixmap_insensitive" );
  if( GTK_PIXMAP( THIS->obj )->pixmap_insensitive )
  {
    gdk_pixmap_ref( GTK_PIXMAP( THIS->obj )->pixmap_insensitive );
    push_gdkobject( GTK_PIXMAP( THIS->obj )->pixmap_insensitive, pixmap );
  }
  else
    push_int( 0 );
  f_aggregate_mapping( 6 );
}

void set_build_insensitive( int buildp );
//! Set to TRUE if an extra pixmap should be automatically created to
//! use when the pixmap is insensitive.

void set_insensitive_pixmap(GDK.Pixmap insensitive_pixmap)
//! Set the pixmap to use when the pixmap is insensitive.
{
  struct object *o;
  get_all_args( "set_pixmap_insensitive", args, "%o", &o );
  if(!get_gdkobject( o, pixmap ))
    Pike_error("This is not a GDK.Pixmap\n");
  if( GTK_PIXMAP( THIS->obj )->pixmap_insensitive !=
      get_gdkobject( o, pixmap ) )
  {
    gdk_pixmap_ref( get_gdkobject( o, pixmap ) );
    if(GTK_PIXMAP( THIS->obj )->pixmap_insensitive)
      gdk_pixmap_unref( GTK_PIXMAP( THIS->obj )->pixmap_insensitive );
    GTK_PIXMAP( THIS->obj )->pixmap_insensitive = get_gdkobject( o, pixmap );
  }
  RETURN_THIS();
}



/* -*- C -*- */
class GTK.Clist;
inherit GTK.Container;

//! The GtkCList widget is a multi-column list widget that is capable
//! of handling literally thousands of rows of information. Each column
//! can optionally have a title, which itself is optionally active,
//! allowing us to bind a function to it's selection.

//! IMG: GTK.Clist(2)->set_column_title(0,"Col 1")->set_column_title(1,"Col 2")->column_titles_show()->set_column_width(0,50)->set_usize(150,70)

signal select_row;
//! Called when a row is selected
signal unselect_row;
//! Called when a row is deselected
signal click_column;
//! Called when a column is clicked
signal resize_column;
//! Called when a column is resized
signal toggle_focus_row;
signal select_all;
signal unselect_all;
signal undo_selection;
signal start_selection;
signal end_selection;
signal toggle_add_mode;
signal extend_selection;
signal scroll_vertical;
signal scroll_horizontal;
signal abort_column_resize;


/* FIXME: add with titles later on.. */
void create( int columns );
//! Create a new empty clist, columns columns wide.
//! <p>
//! Not all columns have to be visible, some can be used to store data that is
//! related to a certain cell in the list.
//!</p>
void set_hadjustment( GTK.Adjustment adjustment );
//! Set the W(Adjustment) object used for horizontal scrolling
void set_vadjustment( GTK.Adjustment adjustment );
//! Set the W(Adjustment) object used for vertical scrolling

GTK.Adjustment get_hadjustment();
//! Return the W(Adjustment) object used for horizontal scrolling
GTK.Adjustment get_vadjustment();
//! Return the W(Adjustment) object used for vertical scrolling


void set_shadow_type( int shadowtype );
//! One of CONST(GTK_SHADOW)

void set_selection_mode( int mode );
//! One of CONST(GTK_SELECTION)<br />

void set_reorderable( int reorderablep );
//! If true, the user can drag around the rows in the list.
void set_use_drag_icons( int dragiconsp );
//! If true, hard coded drag icons will be used.
void set_button_actions( int button, int action );
//! Action is a bitwise or of CONST(GTK_BUTTON)<br />
//! Button is the mouse button (normally 1-3, 4 and 5 sometimes beeing
//! scroll wheel up and scroll wheel down)

void freeze();
//! freeze all visual updates of the list, and then thaw the list after
//! you have made a number of changes and the updates wil occure in a
//! more efficent mannor than if you made them on a unfrozen list
void thaw();
//! freeze all visual updates of the list, and then thaw the list after
//! you have made a number of changes and the updates wil occure in a
//! more efficent mannor than if you made them on a unfrozen list

void column_titles_show();
//! Show the column titles.
void column_titles_hide();
//! Hide the column titles
void column_titles_active();
//! The column titles can be pressed
void column_titles_passive();
//! The column titles can't be pressed

void column_title_active( int column );
//! Make a specific column title active

void column_title_passive( int column );
//! Make a specific column title passive

void set_column_title( int column, string title );
//! Set the column title of a specified column. It is a good idea to
//! set the titles before the column title buttons are shown.

string get_column_title( int column );
//! Returns the title of a specified column.
void set_column_widget( int column, GTK.Widget widget );
//! Put a widget as a column title. The widget will be added to a
//! W(Button).

GTK.Widget get_column_widget( int column );
//! Return the widget for the specified column title
void set_column_visibility( int column, int visiblep );
//! Hide or show a column
void set_column_resizeable( int column, int resizeablep );
//! Make a column resizable, or remove it's the resizability.

void set_column_auto_resize( int column, int autoresizep );
//! Automatically resize a column to the width of it's widest contents.

int columns_autosize();
//! Resize all columns according to their contents
int optimal_column_width( int column );
//! Return the optimal width of the specified column

void set_column_justification( int column, int justification );
//! justification is one of CONST(GTK_JUSTIFY)

void set_column_width( int column, int width );
//! Width in pixels
void set_column_min_width( int column, int width );
//! Width in pixels

void set_column_max_width( int column, int width );
//! if width 6lt; 0 , there is no restriction

void set_row_height( int pixels );
//! in pixels

void moveto( int row, int column, float xpos, float ypos );
//! Make the specified row and column visible, and place it relative to
//! xpos and ypos in the area the Clist occupies.  <p> xpos and ypos
//! are relative, 0.0 == top, 1.0 == bottom</p>

int get_cell_type( int row, int column );
//! Return value is one of CONST(GTK_CELL)

void set_text( int row, int column, string text );
//! Set the text for the specified cell. Please note that even if auto
//! sorting is enabled, the row will not be resorted. Use the 'sort()'
//! function.
void get_text(int row, int col)
//! Return the text associated with a specific cell.
{
  INT_TYPE x, y;
  gchar *p = NULL;
  get_all_args( "get_*", args, "%i%i", &x, &y );

  my_pop_n_elems( args );
  gtk_clist_get_text( GTK_CLIST( THIS->obj ), x, y, &p );
  if(p)
    push_text(p);
  else
    push_int(0);
}

void set_pixmap(int row, int col, GDK.Pixmap image, GDK.Bitmap mask )
//! Set the pixmap of the specified cell. The mask is optional
{
  INT_TYPE x, y;
  struct object *a, *b=0;
  GdkPixmap *img;
  GdkBitmap *mask = NULL;
  if(args == 3)
    get_all_args("set_pixmap", args, "%i%i%o", &y,&x,&a );
  else
    get_all_args("set_pixmap", args, "%i%i%o%o", &y,&x,&a,&b );

  img = get_gdkobject( a, pixmap );
  if(b) mask = get_gdkobject( b, bitmap );

  gtk_clist_set_pixmap( GTK_CLIST( THIS->obj ), y, x, img, mask );

  RETURN_THIS();
}

void get_pixmap(int row, int column)
//! Return the pixmap for the specified cell
{
  INT_TYPE x, y;
  GdkPixmap *p = NULL;
  GdkBitmap *b = NULL;
  get_all_args( "get_*", args, "%i%i", &x, &y );

  my_pop_n_elems( args );
  gtk_clist_get_pixmap( GTK_CLIST( THIS->obj ), x, y, &p, &b );
  push_text( "pixmap" );
  if(p)
  {
    push_gdkobject(p, pixmap);
    gdk_pixmap_ref( p );
  }
  else
    push_int( 0 );
  push_text( "mask" );
  if(b)
  {
    push_gdkobject(b, bitmap);
    gdk_bitmap_ref( b );
  }
  else
    push_int( 0 );
  f_aggregate_mapping( 2 );
}

void set_pixtext(int row, int column, string text,
                 int spacing, GDK.Pixmap image, GDK.Bitmap|void mask)
//! Set the pixmap and text of the specified cell. The mask is optional
//! The spacing is the number of pixels between the pixmap and the text.
{
  INT_TYPE x, y, s;
  struct object *a, *b=0;
  char *t;
  GdkPixmap *img;
  GdkBitmap *mask = NULL;
  if(args == 5)
    get_all_args("set_pixmap", args, "%i%i%s%i%o", &y,&x, &t, &s, &a );
  else
    get_all_args("set_pixmap", args, "%i%i%s%i%o%o", &y,&x, &t, &s,&a,&b );

  img = get_gdkobject( a, pixmap );
  if(b) mask = get_gdkobject( b, bitmap );

  gtk_clist_set_pixtext( GTK_CLIST( THIS->obj ), y, x, t,s, img, mask );

  RETURN_THIS();
}

mapping get_pixtext(int row, int col)
//! Return the pixmap and text for the specified cell as a mapping:<br />
//! ([ "spacing":spacing, "text":text, "pixmap":pixmap ])
{
  INT_TYPE x, y;
  guint8 s;
  gchar *t = NULL;
  GdkPixmap *p = NULL;
  GdkBitmap *b = NULL;
  get_all_args( "get_*", args, "%i%i", &x, &y );

  gtk_clist_get_pixtext( GTK_CLIST( THIS->obj ), x, y, &t, &s, &p, &b );
  my_pop_n_elems( args );

  push_text( "spacing" );
  push_int( s );

  push_text( "text" );
  if(t)
    push_text( t );
  else
    push_int( 0 );
  push_text( "pixmap" );
  if(p)
  {
    push_gdkobject(p, pixmap);
    gdk_pixmap_ref( p );
  }
  else
    push_int( 0 );
  push_text( "mask" );
  if(b)
  {
    push_gdkobject(b, bitmap);
    gdk_bitmap_ref( b );
  }
  else
    push_int( 0 );

  f_aggregate_mapping( 8 );
}

void set_foreground(int row, GDK.Color color)
//! Set the foreground color of the specified row to the specified color
{
  struct object *a;
  INT_TYPE row;
  GdkColor *c;
  get_all_args( "set_foreground", args, "%i%o", &row, &a );
  c = get_gdkobject( a, color );
  gtk_clist_set_foreground( GTK_CLIST( THIS->obj ), row, c );

  RETURN_THIS();
}

void set_background(int row, GDK.Color color)
//! Set the background color of the specified row the the specified color
{
  struct object *a;
  INT_TYPE row;
  GdkColor *c;
  get_all_args( "set_background", args, "%i%o", &row, &a );
  c = get_gdkobject( a, color );
  gtk_clist_set_background( GTK_CLIST( THIS->obj ), row, c );

  RETURN_THIS();
}

void set_cell_style( int row, int column, GTK.Style style );
//! Set a W(Style) for a specific cell
GTK.Style get_cell_style( int row, int col );
//! return the W(Style) associated with a specific cell
void set_row_style( int row, GTK.Style style );
GTK.Style get_row_style( int row );
//! Return the W(style) object associated with the specified row
void set_shift( int row, int column, int yshift, int xshift );
//! The contents of the specified cell will be drawn shifted (indented)
//! the specifid number of pixels.
//! <p>
//! This can be useful to generate a tree-like layout when you do not
//! want to make a W(Ctree)
//! </p>
void set_selectable( int row, int selectablep );
//! If true, the row can be selected by the user, otherwise it cannot
//! be selected, only focused.
int get_selectable( int row );
//! Return 1 if the specified row can be selected by the user.
int append( array(string,size=GTK_CLIST(THIS->obj)->columns) columns );
//!  The return value of indicates the index of the row that was just
//!  added.
//! <p>
//! 'columns' are the texts we want to put in the columns. The size of
//! the array should equal the number of columns in the list.</p>

int prepend( array(string,size=GTK_CLIST(THIS->obj)->columns) columns );
//!  The return value of indicates the index of the row that was just
//!  added.
//! <p>
//! 'columns' are the texts we want to put in the columns. The size of
//! the array should equal the number of columns in the list.</p>

int insert( int row,array(string,size=GTK_CLIST(THIS->obj)->columns) columns );
//! Insert a row after a specified row.<p>
//!  The return value of indicates the index of the row that was just
//!  added, please note that this is not nessasarily the same row as
//!  the specified one, if autosort is activated, the row will be
//!  inserted so that the list is sill sorted.
//! </p><p>
//! 'columns' are the texts we want to put in the columns. The size of
//! the array should equal the number of columns in the list.</p>

void remove( int row );
//! Delete a specified row. If you want to remove all rows in a Clist,
//! use 'clear()' instead of calling remove multiple times.

void set_row_data(int row, object data)
//! Set the user data associated with the specified row.
//! This data can be used to find rows, and when a row is selected it
//! can be easily retrieved using node_get_row_data.
//! <p>
//! <b>You can only use objects as row data right now</b></p>
{
  INT_TYPE row;
  struct object *obj;
  get_all_args( "set_row_data", args, "%i%o", &row, &obj );
 add_ref(obj);
  gtk_clist_set_row_data_full( GTK_CLIST( THIS->obj ), row, obj,
                               (void *)pgtk_free_object );
  RETURN_THIS();
}

object get_row_data(int row)
//! Return the data associated with a row, or 0.
{
  INT_TYPE row;
  struct object *o;
  get_all_args( "get_row_data", args, "%i", &row );

  o = gtk_clist_get_row_data( GTK_CLIST( THIS->obj ), row );
  my_pop_n_elems( args );
  if(o)
    ref_push_object( o );
  else
    push_int( 0 );
}

int find_row_from_data(object data)
//! Find a row in the list that has the given user data.  If no node is
//! found, -1 is returned.
{
  int row;
  struct object *o;
  get_all_args( "find_row_from_data", args, "%o", &o );
  row = gtk_clist_find_row_from_data( GTK_CLIST( THIS->obj ), o );
  my_pop_n_elems(args);
  push_int( row );
}

void select_row( int row, int column );
//! Select the given row. The column is sent to the signal handler, but
//! ignored for all other purposes.

void unselect_row( int row, int column );
//! Unselect the given row. The column is sent to the signal handler,
//! but ignored for all other purposes.

void undo_selection();
//! Undo the previous selection
void clear();
//! remove all rows

mapping get_selection_info(int x, int y)
//! Return the row column corresponding to the x and y coordinates,
//! the returned values are only valid if the x and y coordinates
//! are relative to the clist window coordinates
{
  INT_TYPE x, y;
  gint r=-1, c=-1;
  get_all_args( "get_selection_info", args, "%i%i", &x, &y );
  gtk_clist_get_selection_info( GTK_CLIST( THIS->obj ), x, y, &r, &c );

  my_pop_n_elems( args );
  push_text( "row" );
  push_int( r );
  push_text( "column" );
  push_int( c );
  f_aggregate_mapping( 4 );
}

void select_all();
//! Select all rows
void unselect_all();
//! Unselect all rows

void row_move( int from_row, int to_row );
//! Move the specified row to just before the specified destination
//! row.

GDK.Color get_foreground( int row )
//! Return the foregroun color for the specified row
{
  GtkCListRow *clist_row;
  GtkCList *clist = GTK_CLIST( THIS->obj );
  GtkStyle *style;
  INT_TYPE row;
  get_all_args("get_foreground", args, "%i", &row );
  my_pop_n_elems(args);
  if (row < 0 || row >= clist->rows)
    Pike_error("Invalid row.\n");
  clist_row = (g_list_nth (clist->row_list, row))->data;
  if( clist_row->fg_set )
  {
    push_gdkobject( (void *)&clist_row->foreground, color );
    return;
  }  else if( (style = clist_row->style) ) {
    push_gdkobject( (void *)&style->fg[GTK_STATE_NORMAL], color );
    return;
  }  else if( (style = clist->container.widget.style) ) {
    push_gdkobject( (void *)&style->fg[GTK_STATE_NORMAL], color );
    return;
  } else {
    push_int( 0 );
    return;
  }
}

GDK.Color get_background( int row )
//! Return the background color of a specified row
{
  GtkCListRow *clist_row;
  GtkCList *clist = GTK_CLIST( THIS->obj );
  GtkStyle *style;
  INT_TYPE row;
  get_all_args("get_background", args, "%i", &row );
  my_pop_n_elems(args);
  if (row < 0 || row >= clist->rows)
    Pike_error("Invalid row.\n");
  clist_row = (g_list_nth (clist->row_list, row))->data;
  if( clist_row->bg_set )
  {
    push_gdkobject( &clist_row->background, color );
    return;
  }  else if( (style = clist_row->style) ) {
    push_gdkobject( &style->base[GTK_STATE_ACTIVE], color );
    return;
  } else if( (style = clist->container.widget.style) ) {
    push_gdkobject( (void *)&style->base[GTK_STATE_ACTIVE], color );
    return;
  } else {
    push_int( 0 );
  }
}
%{
static gint please_do_compare_with_pike_func( GtkCList *clist,
                                              GtkCListRow *row1,
                                              GtkCListRow *row2 )
{
  /*
     Asume we are called from a thread that started it's life in pike.
     Also asume that we have the interpreter lock.
     Otherwise, we are toasted. Really toasted.
     We could of course start a new thread here for just the compare
     function. That might not be desireable.
  */
  int ret;
  struct svalue *sf = gtk_object_get_data(GTK_OBJECT(THIS->obj),
                                          "pike_clist_sort_fun");
  struct svalue *op = Pike_sp;

  if(!sf)
    return 1;

  push_constant_text( "clist" );
  push_gtkobjectclass( clist, pgtk_clist_program );

  push_constant_text( "sort_column" );
  push_int( clist->sort_column );

  push_constant_text( "row1_data" );
  if( row1->data )
    ref_push_object( (struct object *)row1->data );
  else
    push_int( 0 );

  push_constant_text( "row2_data" );
  if( row2->data )
    ref_push_object( (struct object *)row2->data );
  else
    push_int( 0 );


  push_constant_text( "row1_text" );
  switch(row1->cell[clist->sort_column].type)
  {
    case GTK_CELL_PIXTEXT:
      push_text(GTK_CELL_PIXTEXT (row1->cell[clist->sort_column])->text);
      break;
    case GTK_CELL_TEXT:
      push_text(GTK_CELL_TEXT (row1->cell[clist->sort_column])->text);
      break;
   default:
     push_int(0);
  }

  push_constant_text( "row2_text" );
  switch(row2->cell[clist->sort_column].type)
  {
    case GTK_CELL_PIXTEXT:
      push_text(GTK_CELL_PIXTEXT (row2->cell[clist->sort_column])->text);
      break;
    case GTK_CELL_TEXT:
      push_text(GTK_CELL_TEXT (row2->cell[clist->sort_column])->text);
      break;
   default:
     push_int(0);
  }


  f_aggregate_mapping( Pike_sp-op );
  apply_svalue( sf, 1 );
  ret = Pike_sp[-1].u.integer;
  pop_stack();
  return ret;
}

static struct svalue *my_dup_svalue( struct svalue *s )
{
  struct svalue *res;
  res = (void *)xalloc(sizeof(struct svalue));
  assign_svalue_no_free( res, s );
  return res;
}

static void my_free_svalue( struct svalue *s )
{
  free_svalue( s );
  xfree( s );
}
%}

void set_compare_func( function(mapping(string:mixed):int) cmpfun )
//! Set the compare function. The function will be called with a
//! mapping as it's only argument, like this:<br /><pre>
//! &nbsp; ([
//! &nbsp;    "clist":the clist widget,
//! &nbsp;    "sort_column":the column to sort on,
//! &nbsp;    "row1_data":The user data pointer for the first row,
//! &nbsp;    "row2_data":The user data pointer for the second row,
//! &nbsp;    "row1_text":The text in the sort cell in the first row
//! &nbsp;    "row2_text":The text in the sort cell in the second row
//! &nbsp; ])
//! </pre>
//! The return value is one of:<p>
//!   1: Row 1 is more than row 2<br />
//!   0: The rows are equal<br />
//!  -1: Row 1 is lesser than row 2</p>
//! To remove the comparefunction, use 0 as the argument.
{
  if(UNSAFE_IS_ZERO(Pike_sp-1))
  {
    gtk_object_remove_data( THIS->obj, "pike_clist_sort_fun" );
    gtk_clist_set_compare_func( GTK_CLIST( THIS->obj ), NULL );
  } else {
    gtk_object_set_data_full(THIS->obj, "pike_clist_sort_fun",
                             (void*)my_dup_svalue(Pike_sp-1), (void*)my_free_svalue);
    gtk_clist_set_compare_func( GTK_CLIST( THIS->obj ),
                                (void *)please_do_compare_with_pike_func );
  }
  RETURN_THIS();
}

array(int) get_selection()
//! Return an array with all selected rows.
{
  GList *work = GTK_CLIST(THIS->obj)->selection;
  int nelems = 0;
  while( work )
  {
    push_int64( (ptrdiff_t)( work->data ) );
    work = work->next;
    nelems++;
  }
  f_aggregate( nelems );
}

void set_sort_type( int direction );
//! Ascending or descending (One of CONST(GTK_SORT))
void set_sort_column( int column );
void sort();
//! Set the column on which all sorting will be performed
void set_auto_sort( int sortp );
//! If true, the clist will automatically be re-sorted when new rows
//! are inserted. Please note that it will not be resorted if the text
//! in cells are changed, use 'sort()' to force a reorder. The sort
//! function is stable.
member int shadow_type;
//! Return the curreent shadow type. One of CONST(GTK_SHADOW)
member int selection_mode;
//! Return the selection mode. One of CONST(GTK_SELECTION)
member int drag_button;
//! Return the button used to drag items (by default 1)
member int focus_row;
//! The currently focused row
member int sort_type;
//! The sort method, one of CONST(GTK_SORT)
member int sort_column;
//! The column that will be used to sort the rows
member int flags;
//! Return the flags. A bitwise or of CONST(GTK_CLIST_)
member int rows;
//! Return the number of rows
member int row_height;
//! Return the height of the row
/* 
member int row_center_offset;
//! Return the number of pixels from the top of the row to the center
//! of the row.
*/
member int columns;
//! Return the number of columns in this clist



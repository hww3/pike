class list;
// This class is not yet finished enough to be usable.
signal selection_changed;
// ...
signal select_child;
// ...
signal unselect_child;
// ...
inherit container;
void create();
FUNCTION(selection, "function(void:array(object))");
RETURNS(array(GTK.Widget));
{
  GList *s = GTK_LIST( THIS->obj )->selection;
  int j = 0;
  my_pop_n_elems(args);
  while( s )
  {
    push_gtkobjectclass( (void *)s->data, pgtk_list_item_program );
    j++;
    s = s->next;
  }
  f_aggregate( j );
}

int child_position( widget child );
void extend_selection( int scroll_type, float position, int auto_start_selection );
void start_selection();
void end_selection();
void select_all();
void unselect_all();
void scroll_horizontal( int scroll_type, float position );
void scroll_vertical( int scroll_type, float position );
void toggle_add_mode();
void toggle_focus_row();
void toggle_row( widget child );
void undo_selection();
void end_drag_selection();

FUNCTION(insert_items, "function(array(object),int:object)");
ARGS(array(GTK.ListItem),int);
NAME_ARGS(items,position);
{
  struct array *a;
  INT_TYPE p;
  GList *items = NULL;
  int i;
  get_all_args("insert_items", args, "%a%d", &a, &p);
  
  for(i=0; i<a->size; i++)
    if(a->item[i].type == PIKE_T_OBJECT &&
       get_pgtkobject( a->item[i].u.object, pgtk_list_item_program ))
      g_list_prepend(items, get_pgtkobject(a->item[i].u.object,
                                           pgtk_list_item_program));
  if(items)
    gtk_list_insert_items( GTK_LIST( THIS->obj ), items, p );
  g_list_free( items );
  RETURN_THIS();
}

FUNCTION(append_items, "function(array(object):object)");
ARGS(array(GTK.ListItem),int);
NAME_ARGS(items,position);
{
  struct array *a;
  GList *items = NULL;
  int i;
  get_all_args("append_items", args, "%a", &a);
  
  for(i=0; i<a->size; i++)
    if(a->item[i].type == PIKE_T_OBJECT &&
       get_pgtkobject( a->item[i].u.object, pgtk_list_item_program ))
      g_list_prepend(items, get_pgtkobject(a->item[i].u.object,
                                           pgtk_list_item_program));
  if(items)
    gtk_list_append_items( GTK_LIST( THIS->obj ), items );
  g_list_free( items );
  RETURN_THIS();
}

FUNCTION(prepend_items, "function(array(object):object)");
ARGS(array(GTK.ListItem),int);
NAME_ARGS(items,position);
{
  struct array *a;
  GList *items = NULL;
  int i;
  get_all_args("prepend_items", args, "%a", &a);
  
  for(i=0; i<a->size; i++)
    if(a->item[i].type == PIKE_T_OBJECT &&
       get_pgtkobject( a->item[i].u.object, pgtk_list_item_program ))
      g_list_prepend(items, get_pgtkobject(a->item[i].u.object,
                                           pgtk_list_item_program));
  if(items)
    gtk_list_prepend_items( GTK_LIST( THIS->obj ), items );
  g_list_free( items );
  RETURN_THIS();
}

FUNCTION(remove_items, "function(array(object):object)");
ARGS(array(GTK.ListItem),int);
NAME_ARGS(items,position);
{
  struct array *a;
  GList *items = NULL;
  int i;
  get_all_args("remove_items", args, "%a", &a);
  
  for(i=0; i<a->size; i++)
    if(a->item[i].type == PIKE_T_OBJECT &&
       get_pgtkobject( a->item[i].u.object, pgtk_list_item_program ))
      g_list_prepend(items, get_pgtkobject(a->item[i].u.object,
                                           pgtk_list_item_program));
  if(items)
    gtk_list_remove_items( GTK_LIST( THIS->obj ), items );
  g_list_free( items );
  RETURN_THIS();
}


void clear_items( int start, int end );
void select_item( int item );
void unselect_item( int item );
void select_child( widget child );
void unselect_child( widget child );
void set_selection_mode( int selection_mode );

subwidget list_item last_focus_child;
subwidget list_item undo_focus_child;

member int htimer;
member int vtimer;
member int anchor;
member int drag_pos;
member int anchor_state;
member int selection_mode;
member int drag_selection;
member int add_mode;



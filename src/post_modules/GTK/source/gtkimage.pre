PROGRAM(image);
// An image is a image object stored in client, not X server, memory.
// A pixmap, on the other hand, is a image object stored in the X-server.
// See GDK.Image and GDK.Pixmap.
//<p>
// IMG: GTK.Image( GDK.Image(0)->set(Image.image(200,200)->test() ) );
INHERIT(misc);

COMPLEX_FUNCTION(create, GdkImage, ?GdkBitmap);
NAME_ARGS(image,mask);
// You can skip the mask. The mask is used to mask the drawing of the image
// on it's background. It will not make the container transparent, though.
// Use shape_combine_mask on the container with the mask for that.

COMPLEX_FUNCTION(set, GdkImage, ?GdkBitmap);
NAME_ARGS(image,mask);
// Args: GDK.Image and GDK.Bitmap, respectively.
// You can skip the mask. The mask is used to mask the drawing of the image
// on it's background. It will not make the container transparent, though.
// Use shape_combine_mask on the container with the mask for that.
// <p>
// There is no need to call 'set' with the same GDK.Image again if
// you have modified the image. You must, however, use -&gt;queue_draw()
// to redraw the image. Otherwise the old contens will be shown until
// an refresh of the widget is done for any other reason.

FUNCTION(get, "function(void:mapping)");
// returns ([ "image":GDK.Image img, "mask":GDK.Bitmap mask ])
{
  GdkImage *v;
  GdkBitmap *m;
  my_pop_n_elems(args);
  gtk_image_get( GTK_IMAGE( THIS->obj ), &v, &m );
  push_text( "image" );
  if(v)
  {
    push_gdkobject( v, Image );
/*     gdk_image_ref( v );  we cannot do this.. */
  }
  else
    push_int(0);
  push_text( "mask" );
  if(m)
  {
    push_gdkobject( m, Bitmap );
    gdk_bitmap_ref( m );
  }
  else
    push_int(0);
}

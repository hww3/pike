/* -*- C -*- */
class GTK.Toolbar;
inherit GTK.Container;
//! Toolbars are usually used to group some number of widgets in order
//! to simplify customization of their look and layout. Typically a
//! toolbar consists of buttons with icons, labels and tooltips, but
//! any other widget can also be put inside a toolbar. Finally, items
//! can be arranged horizontally or vertically and buttons can be
//! displayed with icons, labels, or both.

//! <p>
//! Examples:
//! IMG: lambda(){object t=GTK.Toolbar( GTK.ORIENTATION_HORIZONTAL, GTK.TOOLBAR_TEXT );t->append_item( "Button 1", "Tooltip 1", "", GTK.Frame(), lambda(){},0);t->append_space();t->append_item( "Button 2", "Tooltip 2", "", GTK.Frame(), lambda(){},0);t->append_item( "Button 3", "Tooltip 3", "", GTK.Frame(), lambda(){},0);t->append_space();t->append_item( "Button 4", "Tooltip 4", "", GTK.Frame(), lambda(){},0);t->append_item( "Button 5", "Tooltip 5", "", GTK.Frame(), lambda(){},0);return t;}()
//! IMG: lambda(){object t=GTK.Toolbar( GTK.ORIENTATION_VERTICAL, GTK.TOOLBAR_TEXT );t->append_item( "Button 1", "Tooltip 1", "", GTK.Frame(), lambda(){},0);t->append_space();t->append_item( "Button 2", "Tooltip 2", "", GTK.Frame(), lambda(){},0);t->append_item( "Button 3", "Tooltip 3", "", GTK.Frame(), lambda(){},0);t->append_space();t->append_item( "Button 4", "Tooltip 4", "", GTK.Frame(), lambda(){},0);t->append_item( "Button 5", "Tooltip 5", "", GTK.Frame(), lambda(){},0);return t;}()
//! IMG: lambda(){object i=GDK.Image()->set(Image.image(20,20)->test());object t=GTK.Toolbar( GTK.ORIENTATION_HORIZONTAL, GTK.TOOLBAR_BOTH );t->append_item( "Button 1", "Tooltip 1", "", GTK.Image(i), lambda(){},0);t->append_space();t->append_item( "Button 2", "Tooltip 2", "", GTK.Image(i), lambda(){},0);t->append_item( "Button 3", "Tooltip 3", "", GTK.Image(i), lambda(){},0);t->append_space();t->append_item( "Button 4", "Tooltip 4", "", GTK.Image(i), lambda(){},0);t->append_item( "Button 5", "Tooltip 5", "", GTK.Image(i), lambda(){},0);return t;}()
//! </p>
signal orientation_changed;
signal style_changed;
void create( int orientation, int style );
//! Orientation is one of
//! CONST(GTK_ORIENTATION). Style is one of CONST(GTK_TOOLBAR)

void append_item( string label, string tooltip,
                  string prv,  GTK.Widget icon,
                  function(callback) clicked );
//! <p>Adds a new button to the start of the toolbar.</p>
void prepend_item( string label, string tooltip, string prv,
                   GTK.Widget icon, function(callback) clicked );
//! Arguments as for append_item
//! <p>Adds a new button to the end of the toolbar.</p>
void insert_item( string label, string tooltip, string prv,
                  GTK.Widget icon, function(callback) clicked,
                  int position );
//! Arguments as for append_item, but an extra position argument at the end.
//! <p>Adds a new button after the item at the specified position.</p>
void append_space();
//! Adds a small space.
void prepend_space();
//! Adds a small space.
void insert_space( int pixels );
//! Inserts a small space at the specified postion.

void append_widget( GTK.Widget widget, string tootip, string prv );
//! Append a custom widgets. Arguments are widget, tooltip, private
void prepend_widget( GTK.Widget widget, string tootip, string prv );
//! Prepend a custom widgets. Arguments are widget, tooltip, private
void insert_widget( GTK.Widget widget, string tootip, string prv, int pos );
//! Insert a custom widgets.

void set_orientation( int orientation );
//! Set the orientation, one of CONST(GTK_ORIENTATION)
void set_style( int style );
//! Set the style, one of CONST(GTK_TOOLBAR)
void set_space_size( int pixels );
//! Set the width (or height) of the space created by append_space.
void set_space_style( int style );
void set_tooltips( int tootipp );
//! If true, show the tooltips.

void set_button_relief( int relief );
int get_button_relief();



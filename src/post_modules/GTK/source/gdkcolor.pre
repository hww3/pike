class GdkColor;
// The GDK.Color object is used to represent a color.
// When you call GDK.Color(r,g,b) the color will be allocated
// from the X-server. The constructor can return an  exception if there are
// no more colors to allocate.
// NOIMG
FUNCTION(create, "function(object|int,int|void,int|void:void)")
NAME_ARGS(r|color,g,b);
// r g and b are in the range 0 to 255, inclusive.
// If color is specified, it should be an Image.Color object, and the
// only argument.
{
  int r,g,b;
  GdkColormap *col = gdk_colormap_get_system();
  GdkColor *c;
  pgtk_verify_setup();
  pgtk_verify_not_inited();
  if( args == 1)
  {
    struct object *o;
    get_all_args("GdkColor", args, "%o", &o);
    if( !get_color_from_pikecolor( o, &r, &g, &b ) )
      error("Bad argument 1 to GDK.Color(). Exptected color object\n");
  }
  else
  {
    get_all_args("GdkColor", args, "%d%d%d", &r, &g, &b);
    r*=257;
    g*=257;
    b*=257;
  }

  c = malloc(sizeof(GdkColor));
  THIS->obj = (void *)c;
  c->red   = r;
  c->green = g;
  c->blue  = b;
  c->pixel = 0;
  if(!gdk_color_alloc( col, c ))
  {
    free(c);
    THIS->obj = 0;
    error("Failed to allocate color.\n");
  }
}

FUNCTION(rgb, "function(void:array(int))")
// Returns the red green and blue color components as an array.
{
  push_int(((GdkColor *)THIS->obj)->red/257);
  push_int(((GdkColor *)THIS->obj)->green/257);
  push_int(((GdkColor *)THIS->obj)->blue/257);
  f_aggregate(3);
}

FUNCTION(red, "function(void:int)")
// Returns the red color component.
{
  push_int(((GdkColor *)THIS->obj)->red/257);
}

FUNCTION(green, "function(void:int)")
// Returns the green color component.
{
  push_int(((GdkColor *)THIS->obj)->green/257);
}

FUNCTION(blue, "function(void:int)")
// Returns the blue color component.
{
  push_int(((GdkColor *)THIS->obj)->blue/257);
}

FUNCTION(pixel, "function(void:int)")
// Returns the pixel value of the color. See <a href=GdkImage.html#set_pixel>GDK.Image->set_pixel</a>.
{
  push_int(((GdkColor *)THIS->obj)->pixel);
}

FUNCTION(image_color_object, "function(void:object)");
// Return a Image.Color.Color instance.<br>
// This gives better precision than the rgb function.
{
  unsigned char colorname[4+4+4+2];
  sprintf( colorname, "#%04x%04x%04x",
           ((GdkColor *)THIS->obj)->red,
           ((GdkColor *)THIS->obj)->green,
           ((GdkColor *)THIS->obj)->blue );

  my_pop_n_elems(args);
  pgtk_get_image_module();
  pgtk_index_stack( "Color" );
  pgtk_index_stack(colorname);
}

FUNCTION(destroy, "function(void:void)")
// Destroys the color object. Please note that this function does
// _not_ free the color from the X-colormap right now.
{
  if(THIS->obj)
  {
    free(THIS->obj);
    THIS->obj = 0;
  }
}

class selection_data;
// The data associated with a selection.
FUNCTION(data, "function(void:string)");
// Returns the selection in the data.
// The return value is always a string, but the width can vary (8, 16
// or 32 bits per character).
{
  int length = ((GtkSelectionData *)THIS->obj)->length;
  my_pop_n_elems( args );
  if(length < 0)
  {
    push_int(0);
    return;
  }
  switch( ((GtkSelectionData *)THIS->obj)->format )
  {
   case 8:
     push_string( make_shared_binary_string((void *)((GtkSelectionData *)THIS->obj)
                                            ->data, length ) );
     break;
   case 16:
     length /= 2;
     push_string( make_shared_binary_string1((void *)((GtkSelectionData *)THIS->obj)
                                             ->data, length ) );
     break;
   case 32:
     length /= 4;
     push_Xpseudo32bitstring( (void *)((GtkSelectionData *)THIS->obj)->data,
                              length );
     break;
  }
}
FUNCTION(format, "function(void:int)");
// Returns the selction format.<br />
// The format is the number of bits per character.
{
  my_pop_n_elems( args );
  push_int( ((GtkSelectionData *)THIS->obj)->format );
}
FUNCTION(length, "function(void:int)");
// Return the size of the selection data, in bytes.
// <p>
// The size of the data in characters (as returned by data()) is not
// necessarily the same.
// </p>
{
  my_pop_n_elems( args );
  push_int( ((GtkSelectionData *)THIS->obj)->length );
}
FUNCTION(set, "function(string:object)");
NAME_ARGS(data);
//  Store new data into a GtkSelectionData object. Should _only_ by
//  called from a selection handler callback.

{
  struct pike_string *s;
  get_all_args( "set", args, "%W", &s );
  gtk_selection_data_set( ((GtkSelectionData *)THIS->obj),
                          ((GtkSelectionData *)THIS->obj)->target,
                          8<<s->size_shift,
                          s->str,
                          (s->len * 1<<s->size_shift) );
  RETURN_THIS();
}
%{
#define RETURN_GDKATOM(X) my_pop_n_elems(args); push_pgdkobject( ((void *)((GtkSelectionData *)THIS->obj)->X), pgtk_Gdk_Atom_program );
%}

FUNCTION(target, "function(void:object)");
// The target, as a GDK(Atom).
{
  RETURN_GDKATOM( target );
}
FUNCTION(type, "function(void:object)");
// The selection type, as a GDK(Atom).
{
  RETURN_GDKATOM( type );
}
FUNCTION(selection, "function(void:object)");
// The selection id, as a GDK(Atom).
{
  RETURN_GDKATOM( selection );
}

PROGRAM(menu);
// A GTK.Menu is a W(MenuShell) that implements a drop down menu
// consisting of a list of W(MenuItem) objects which can be navigated
// and activated by the user to perform application functions.

// <p>

// A GTK.Menu is most commonly dropped down by activating a W(MenuItem)
// in a W(MenuBar) or popped up by activating a W(MenuItem) in another
// GTK.Menu.

// <p>

// A GTK.Menu can also be popped up by activating a
// W(OptionMenu). Other composite widgets such as the W(Notebook) can
// pop up a GTK.Menu as well.

// <p>

// Applications can display a GTK.Menu as a popup menu by calling the
// popup() function. The example below shows how an application can
// pop up a menu when the 3rd mouse button is pressed.

// <p>

// <pre><font size=-1>
// &nbsp; GTK.Menu menu = create_menu();
// &nbsp; GTK.Window window = create_window();
// &nbsp; window->signal_connect( "button_press_event", lambda(GTK.Menu m,
// &nbsp;                                                      GTK.Window w,
// &nbsp;                                                      mapping e ) {
// &nbsp;           if( e->button == 3 )
// &nbsp;            menu->popup();
// &nbsp;        }, menu );
// <font size=-1></pre>
INHERIT(menu_shell);
FUNCTION(popup, "function(int|void:object)")
RETURNS(GTK.Menu);
NAME_ARGS(button_pressed_to_show_menu);
// The default button is 3.
{
  int button = 3;
  if( args )
    get_all_args( "popup", args, "%d", &button );
  gtk_menu_popup(GTK_MENU(THIS->obj), NULL,NULL,NULL,NULL, button, time(0));
  RETURN_THIS();
}

SIMPLE_FUNCTION(reposition);
// Repositions the menu according to its position function.

SIMPLE_FUNCTION(popdown);
// Removes the menu from the screen.

COMPLEX_FUNCTION(set_accel_group, accel_group);
NAME_ARGS(accelerators);
// Set the W(AccelGroup) which holds global accelerators for the menu.

COMPLEX_FUNCTION(create);
// Create a new GTK.Menu widget.

COMPLEX_FUNCTION(append, widget);
NAME_ARGS(widget);
// Adds a new W(MenuItem) to the end of the menu's item list.

COMPLEX_FUNCTION(prepend, widget);
NAME_ARGS(widget);
// Adds a new W(MenuItem) to the start of the menu's item list.

COMPLEX_FUNCTION(insert, widget, int);
NAME_ARGS(widget,position);
// Adds a new W(MenuItem) to the menu's item list at the position
// indicated by position.
COMPLEX_FUNCTION(set_active, int);
NAME_ARGS(activep);
// Selects the specified menu item within the menu. This is used by
// the W(OptionMenu).

COMPLEX_FUNCTION(reorder_child, widget, int);
NAME_ARGS(menuitem,pos);
// Moves a W(MenuItem) to a new position within the GTK.Menu.

SIMPLE_FUNCTION(detach);
//  Detaches the menu from the widget to which it had been attached. 
COMPLEX_FUNCTION(attach_to_widget, widget, NULL);
NAME_ARGS(widget);
// Attach the menu to a widget
COMPLEX_FUNCTION(set_title, string);
NAME_ARGS(new_title);
// Sets the title string for the menu. The title is displayed when the
// menu is shown as a tearoff menu.

widget COMPLEX_FUNCTION(get_active);
// Returns the selected menu item from the menu.<br>
//  This is used by the W(OptionMenu).

widget COMPLEX_FUNCTION(get_attach_widget);
// Returns the W(Widget) that the menu is attached to.
COMPLEX_FUNCTION(set_tearoff_state, int);
NAME_ARGS(torn_off);
// Changes the tearoff state of the menu. A menu is normally displayed
// as drop down menu which persists as long as the menu is active. It
// can also be displayed as a tearoff menu which persists until it is
// closed or reattached.

CLASSMEMBER(torn_off, int);
// return 1 if the menu is torn off.

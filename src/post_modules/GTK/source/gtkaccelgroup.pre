class GTK.AccelGroup;
inherit GTK.Data;
//! An AccelGroup stores keybindings.
//! A group is automatically created by W(MenuFactory)
//!
//! NOIMG
void create()
//! Create a new accelerator group
{
  pgtk_verify_setup();
  pgtk_verify_not_inited();
  THIS->obj = (void *)gtk_accel_group_new();
/* add_ref(fp->current_object);   one extra ref... No, not really */
}
void add_accel(GTK.Widget widget, string signal,
               int key, int modifiers, int flags )
//! the widget is the one in which the signal specified by 'signal'
//! recides.
//! 
//! The key is the character code (such as 'a' for the a key and '@'
//! for the @ key), and modifiers is a bitmap of one or more bits, the
//! bits are CONST(_MASK). Flags is one or more of CONST(GTK_ACCEL)
{
  struct object *o;
  INT_TYPE k;
  char *sig;
  INT_TYPE mods;
  INT_TYPE flags;
  get_all_args("add_accel", args, "%o%s%d%d", &o, &sig, &k, &mods, &flags );
  gtk_accel_group_add((void *)THIS->obj, k, mods, flags,
                      get_gtkobject( o ), sig );
  RETURN_THIS();
}
void remove(GTK.Widget widget, int key, int modifiers )
//! Remove all bindings for the specified key/mask in the specified object.
{
  struct object *o;
  INT_TYPE k, mods;
  get_all_args("remove", args, "%o%d%d", &o, &k, &mods );
  gtk_accel_group_remove((void *)THIS->obj, k,mods, get_gtkobject( o ));
  RETURN_THIS();
}
void destroy()
{
  gtk_accel_group_unref( (void *)THIS->obj );
  THIS->obj = 0;
}


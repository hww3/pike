class GTK.Button;
inherit GTK.Container;
//! A container that can only contain one child, and accepts events.
//! draws a bevelbox around itself.
//! IMG: GTK.Button("A button")
//! IMG: GTK.Button("A button\nwith multiple lines\nof text")
//! IMG: GTK.Button()->add(GTK.Image(GDK.Image(0)->set(Image.image(100,40)->test())))

member GTK.Widget child;
//! The (one and only) child of this container.
signal pressed;
//! Called when the button is pressed
signal released;
//! Called when the button is released
signal clicked;
//! Called when the button is pressed, and then released
signal enter;
//! Called when the mouse enters the button
signal leave;
//! Called when the mouse leaves the button

void create(string|void label_text)
//! If a string is supplied, a W(Label) is created and added to the button.
{
  pgtk_verify_not_inited();
  pgtk_verify_setup();
  if(args)
  {
    gchar *s = PGTK_GETSTR( Pike_sp-args );
    if( s )
    {
      THIS->obj = GTK_OBJECT( gtk_button_new_with_label( s ) );
      PGTK_FREESTR( s );
    }
    else
      THIS->obj = GTK_OBJECT( gtk_button_new( ) );
  } else {
    THIS->obj = GTK_OBJECT( gtk_button_new( ) );
  }
  pgtk__init_this_object();
}
void pressed();
//! Emulate a 'press' event.
void released();
//! Emulate a 'release' event.
void clicked();
//! Emulate a 'clicked' event (press followed by release).
void enter();
//! Emulate a 'enter' event.
void leave();
//! Emulate a 'leave' event.
void set_relief( int newstyle );
//! One of CONST(GTK_RELIEF)
int get_relief();
//! One of CONST(GTK_RELIEF), set with set_relief()




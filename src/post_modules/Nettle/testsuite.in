START_MARKER
// Nettle
test_true([[objectp(Nettle)]])

// MD5
cond_resolv( Nettle.MD5_State, [[

  test_true([[objectp(Nettle.MD5_State())]])
  test_eq([[Nettle.MD5_State()->update("")->digest()]],
  	  [[String.hex2string("d41d8cd98f00b204e9800998ecf8427e")]])
  test_eq([[Nettle.MD5_State()->update("a")->digest()]],
  	  [[String.hex2string("0cc175b9c0f1b6a831c399e269772661")]])
  test_eq([[Nettle.MD5_State()->update("abc")->digest()]],
  	  [[String.hex2string("900150983cd24fb0d6963f7d28e17f72")]])
  test_eq([[Nettle.MD5_State()->update("message digest")->digest()]],
  	  [[String.hex2string("f96b697d7cb7938d525a2f31aaf161d0")]])
  test_eq([[Nettle.MD5_State()->update("abcdefghijklmnopqrstuvwxyz")->digest()]],
  	  [[String.hex2string("c3fcd3d76192e4007dfb496cca67e13b")]])
  test_eq([[Nettle.MD5_State()->update("ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  		"abcdefghijklmnopqrstuvwxyz0123456789")->digest()]],
	[[String.hex2string("d174ab98d277d9f5a5611c2c9f419d9f")]])
  test_eq([[Nettle.MD5_State()->update("1234567890123456789012345678901234567890"
		"1234567890123456789012345678901234567890")->digest()]],
	  [[String.hex2string("57edf4a22be3c955ac49da2e2107b67a")]])
]])

// SHA1
cond_resolv( Nettle.SHA1_State, [[

  test_true([[objectp(Nettle.SHA1_State())]])
  test_eq([[Nettle.SHA1_State()->update("abc")->digest()]],
   	[[String.hex2string("a9993e364706816aba3e25717850c26c9cd0d89d")]])
]])

// AES
cond_resolv( Nettle.AES_State, [[
  test_true([[objectp(Nettle.AES_State())]])
  test_eq([[Nettle.AES_State()
  	    ->set_encrypt_key(String.hex2string(
  		  "00010203050607080A0B0C0D0F101112"))
  	    ->crypt(String.hex2string("506812A45F08C889B97F5980038B8359"))]],
  	  [[String.hex2string("D8F532538289EF7D06B506A4FD5BE9C9")]])
  
  test_eq([[Nettle.AES_State()
  	    ->set_decrypt_key(String.hex2string(
  		  "14151617191A1B1C1E1F202123242526"))
  	    ->crypt(String.hex2string("59AB30F4D4EE6E4FF9907EF65B1FB68C"))]],
  	  [[String.hex2string("5C6D71CA30DE8B8B00549984D2EC7D4B")]])
]])

cond_resolv( Nettle.CBC, [[
  test_eval_error( Nettle.CBC( class{} ) )
  test_eval_error( object o=class{}(); Nettle.CBC(o); )
  test_eval_error([[
    class A {
      int block_size() { return 0; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.CBC(A);
  ]])
  test_eval_error([[
    class A {
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.CBC(A);
  ]])
  test_do([[
    class A {
      int block_size() { return 512; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      int `()() { return 0; }
      string crypt(string data) {}
    };
    Nettle.CBC(A);
  ]])
  test_eq( Nettle.CBC(Crypto.AES())->block_size(), 16)
  test_eq( Nettle.CBC(Crypto.AES)->block_size(), 16)
  test_eq( Nettle.CBC(Crypto.AES())->key_size(), 0)
  test_eq( Nettle.CBC(Crypto.AES)->key_size(), 0)
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES());
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return cbc->key_size();]], 32)
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES);
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return cbc->key_size();]], 32)
  test_eval_error([[
    object cbc=Nettle.CBC(Crypto.AES());
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    cbc->crypt("123");
  ]])
  test_eval_error([[
    object cbc=Nettle.CBC(Crypto.AES);
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    cbc->crypt("123");
  ]])
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES());
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return String.string2hex(cbc->crypt("0123456789abcdef"));
  ]], "b71a7f6d29d66bd468294ed9cfda2af1")
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES);
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return String.string2hex(cbc->crypt("0123456789abcdef"));
  ]], "b71a7f6d29d66bd468294ed9cfda2af1")
  
]])

cond_resolv( Nettle.Proxy, [[
  test_eval_error( Nettle.Proxy( class{} ) )
  test_eval_error( object o=class{}(); Nettle.Proxy(o); )
  test_eval_error([[
    class A {
      int block_size() { return 0; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.Proxy(A);
  ]])
  test_eval_error([[
    class A {
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.Proxy(A);
  ]])
  test_do([[
    class A {
      int block_size() { return 512; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      int `()() { return 0; }
      string crypt(string data) {}
    };
    Nettle.Proxy(A);
  ]])
  test_eq( Nettle.Proxy(Crypto.AES())->block_size(), 16)
  test_eq( Nettle.Proxy(Crypto.AES)->block_size(), 16)
  test_eq( Nettle.Proxy(Crypto.AES())->key_size(), 0)
  test_eq( Nettle.Proxy(Crypto.AES)->key_size(), 0)
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES());
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->key_size();]], 32)
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES);
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->key_size();]], 32)
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES());
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    string r = "";
    foreach( "0123456789abcdefg"/1, string str )
      r += proxy->crypt(str);
    return r;
  ]], String.hex2string("b71a7f6d29d66bd468294ed9cfda2af1"))
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES);
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->crypt("123");
  ]], "")
  
]])
	  
cond_resolv( Nettle.CBC, [[
test_tests(
  array(int) a() {
    return Tools.Testsuite.run_script (({"]]SRCDIR[[/rijndaeltest.pike",
				         "--quick"}));
  }
)
]])

cond_resolv( Nettle.SHA1_State, [[
test_tests(
  array(int) a() {
    return Tools.Testsuite.run_script ("]]SRCDIR[[/sha1test.pike");
  }
)
]])

cond_resolv( Nettle.Yarrow, [[
  test_any_equal([[
    object y = Nettle.Yarrow()->seed("What happen? Somebody set up us the bomb.");
    return ({ y->get_seed(), y->random_string(20), y->get_seed(), y->random_string(20) });
  ]], [[({String.hex2string("73a35b2f896a8061be0ad434a592a43a82b81b9ed6c018f1c5a51300bbc8d53d"),
	  String.hex2string("7847458e32fb789ff6b6cd6e1c8cc3712ba532a8"),
	  String.hex2string("73a35b2f896a8061be0ad434a592a43a82b81b9ed6c018f1c5a51300bbc8d53d"),
	  String.hex2string("49a090656a6d93782e169994f41005a3616d3cd7")})]])
]])
END_MARKER

# This line is needed on some machines.
@SET_MAKE@

# Don't change this line.  Define EXTRALIBS before this line if you
# wish to add any libraries.
LIBS=@LIBS@ $(EXTRALIBS)

# not used yet
INSTALL=@INSTALL@

SRCDIR=@srcdir@
VPATH=@srcdir@

# These are used while compiling
TMP_LIBDIR = @LIBDIR@
TMP_BINDIR = @BINDIR@
TMP_BUILDDIR = @BUILDDIR@
TMP_DOCDIR = @DOCDIR@

prefix = @prefix@
exec_prefix = $(prefix)/bin
lib_prefix = $(prefix)/lib/ulpc

#
# use bison please, yacc doesn't always work good enough.
#
YACC=@YACC@
YFLAGS=-d -v

# If you don't have 'strchr', then add next flag to CFLAGS.
# -Dstrchr=index -Dstrrchr=rindex
#
PROFIL=
#PROFIL=-pg

#
#Enable warnings from the compiler, if wanted.
#
WARN=@WARN@
#WARN=-W -Wunused -Wformat
#WARN -Wunused -Wformat -Wuninitialized
#WARN= -Wall -Wshadow -Dlint

#add extra defines here
# Be sure to use -g and -DDEBUG when looking for bugs
DEBUGDEF=-DDEBUG
DEFINES=-DDEFAULT_MASTER=\"$(lib_prefix)/master.lpc\"

# -O should work with all compilers
OPTIMIZE=@OPTIMIZE@

# Preprocessor flags.
PREFLAGS=-I. -I$(SRCDIR) $(DEFINES)
OTHERFLAGS=$(DEBUGDEF) $(OSFLAGS) $(OPTIMIZE) $(WARN) $(PROFIL)
CFLAGS=$(PREFLAGS) $(OTHERFLAGS)

CC=@CC@
CPP=@CPP@

LD=$(CC)
LDFLAGS=$(CFLAGS)

RUNULPC=$(TMP_BUILDDIR)/ulpc -m $(TMP_LIBDIR)/master.lpc $(LPCOPTS)
FIXDEP=$(TMP_BINDIR)/fixdepends.sh

MAKE_FLAGS = "prefix=$(prefix)" "exex_prefix=$(exex_prefix)" "CC=$(CC)" "OTHERFLAGS=$(OTHERFLAGS)" "FIXDEP=$(FIXDEP)" "DEBUGDEF=$(DEBUGDEF)"

# Add alloca.o if you don't have alloca() on your machine.
# Add ualarm.o if you don't have ualarm() on your machine.
#
OBJ= \
 add_efun.o \
 array.o \
 backend.o \
 builtin_efuns.o \
 callback.o \
 docode.o \
 dynamic_buffer.o \
 error.o \
 fd_control.o \
 fsort.o \
 gc.o \
 hashtable.o \
 interpret.o \
 language.o \
 las.o \
 lex.o \
 list.o \
 lpc_signal.o \
 lpc_types.o \
 main.o \
 mapping.o \
 memory.o \
 module.o \
 object.o \
 opcodes.o \
 operators.o \
 peep.o \
 port.o \
 program.o \
 rusage.o \
 stralloc.o \
 stuff.o \
 svalue.o \
 @EXTRA_OBJS@
#
# User callable targets
#

all: $(OBJ) module_objects
	$(MAKE) $(MAKE_FLAGS) ulpc

ulpc: $(OBJ) modules/linker_options
	-mv ulpc ulpc.old
	$(LD) $(LDFLAGS) $(OBJ) `cat modules/linker_options` $(LIBS) -o ulpc

# purify
pure: $(OBJ) module_objects
	-mv ulpc ulpc.old
	purify -free-queue-length=500 -inuse-at-exit=yes -chain-length=12 $(LD) $(LDFLAGS) $(OBJ) $(MODULE_OBJS) -o ulpc $(LIBS)

# purecov
cover: $(OBJ) module_objects
	-mv ulpc ulpc.old
	purecov purify -free-queue-length=500 -inuse-at-exit=yes -chain-length=12 $(LD) $(LDFLAGS) $(OBJ) $(MODULE_OBJS) -o ulpc $(LIBS)

# quantify
quant: $(OBJ) module_objects
	-mv ulpc ulpc.old
	quantify $(LD) $(LDFLAGS) $(OBJ) $(MODULE_OBJS) -o ulpc $(LIBS) 

# install
install:
	if [ ! -d "$(prefix)" ]; then mkdir "$(prefix)" ; chmod 755 "$(prefix)" ; fi
	if [ ! -d "$(exec_prefix)" ]; then mkdir "$(exec_prefix)" ; chmod 755 "$(exec_prefix)" ; fi
	$(INSTALL) ./ulpc $(exec_prefix)
	if [ ! -d "$(prefix)/lib" ]; then mkdir "$(prefix)/lib" ; chmod 755 "$(prefix)/lib" ; fi
	if [ ! -d "$(lib_prefix)" ]; then mkdir "$(lib_prefix)" ; chmod 755 "$(lib_prefix)" ; fi
	$(INSTALL) $(TMP_LIBDIR)/master.lpc $(lib_prefix)
	$(INSTALL) $(TMP_LIBDIR)/simulate.lpc $(lib_prefix)

# tidy up a bit
tidy:
	-rm -f *.o core y.output y.tab.c y.tab.h
	-rm -f $(TMP_BINDIR)/core *.o *.i *.i~

# make clean
clean: tidy
	-for a in $(MODULES) ; do ( cd $$a ; ${MAKE} $(MAKE_FLAGS) clean ) ; done
	-for a in $(MODULES) ; do rm -f $$a/*.o ; done
	-rm -f TAGS tags
	-rm -f yacc.acts yacc.debug yacc.tmp *.debug.log a.out

# make _really_ clean
spotless: clean
	rm -f Makefile machine.h
	find . -type f '(' -name '*~' -o -name '.*~' -o -name core -o -name '.nfs*' -name '#*#' ')' -print | xargs rm -f
	-rm -f lexical.c mon.out *.ln config.status
	-rm -f $(TMP_BINDIR)/driver $(TMP_BINDIR)/*~ $(TMP_BINDIR)/#*#
	-rm -f .pure driver* l.outa*

# create tags
tags:
	ctags *.c

TAGS:
	etags -t *.h *.c

# verify / debug
verify_manual:
	$(RUNULPC) $(SRCDIR)/test/verifymanual.lpc $(TMP_DOCDIR)

verify: $(SRCDIR)/test/testsuite
	$(RUNULPC) $(SRCDIR)/test/test_lpc.lpc $(SRCDIR)/test/testsuite

# verify / debug verbose
verbose_verify: $(SRCDIR)/test/testsuite
	$(RUNULPC) $(SRCDIR)/test/test_lpc.lpc $(SRCDIR)/test/testsuite --verbose

# verify & debug VERBOSE
gdb_verify: $(SRCDIR)/test/testsuite
	@echo >.gdbinit handle SIGUSR1 nostop noprint pass
	@echo >>.gdbinit run -m $(TMP_LIBDIR)/master.lpc $(LPCOPTS) $(SRCDIR)/test/test_lpc.lpc $(SRCDIR)/test/testsuite -v -v -f
	gdb ./ulpc
	@rm .gdbinit

# run hilfe, for interactive testing
run_hilfe:
	$(RUNULPC) $(TMP_BINDIR)/hilfe

# make export archive (requires compiled uLPC)
# Do not compile in source tree if you want to use this!
# Beware that export archive this includes bison/yacc/byacc source
# and thus has to follow the rules stated in that code.
export: $(SRCDIR)/test/testsuite new_peep_engine $(SRCDIR)/language.c $(SRCDIR)/language.h depend
	chmod +x $(SRCDIR)/install-sh
	$(RUNULPC) $(TMP_BINDIR)/export.lpc

new_peep_engine:
	$(RUNULPC) $(TMP_BINDIR)/mkpeep.lpc $(SRCDIR)/peep.in >$(SRCDIR)/peep_engine.c

peep_engine.c: peep.in
	echo "" >$(SRCDIR)/peep_engine.c
	-$(RUNULPC) $(TMP_BINDIR)/mkpeep.lpc $(SRCDIR)/peep.in >$(SRCDIR)/peep_engine.c

peep.o: peep_engine.c

# make dependencies (requires compiled uLPC)
depend: language.c
	gcc -MM $(PREFLAGS) $(SRCDIR)/*.c | $(FIXDEP) $(SRCDIR)
	( cd modules ; $(MAKE) $(MAKE_FLAGS) depend )

docs:
	mkdir docs

html_docs: docs
	$(RUNULPC) $(TMP_BINDIR)/htmlify_docs docs $(TMP_DOCDIR) `echo $(SRCDIR)/modules/*/doc`
#
# uLPC internal targets
#
module_objects:
	( cd modules ; ${MAKE} $(MAKE_FLAGS) )

lang.o: lang.c config.h object.h interpret.h program.h

$(SRCDIR)/language.h: language.y
	@echo "Expect 1 shift/reduce conflict."
	$(YACC) $(YFLAGS) $(SRCDIR)/language.y
	mv y.tab.c $(SRCDIR)/language.c
	mv y.tab.h $(SRCDIR)/language.h

$(SRCDIR)/language.c: language.h
	touch $(SRCDIR)/language.c

module.c: modlist.h

$(SRCDIR)/configure: configure.in
	cd $(SRCDIR) && autoconf

config.status: $(SRCDIR)/configure
	./config.status --recheck

$(SRCDIR)/Makefile.in: $(SRCDIR)/Makefile.src
	gcc -MM $(PREFLAGS) $(SRCDIR)/*.c | $(FIXDEP) $(SRCDIR)

Makefile: $(SRCDIR)/Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS= ./config.status
	@echo "Run make again"
	@exit 1

machine.h: stamp-h
stamp-h: machine.h.in config.status
	CONFIG_FILES= CONFIG_HEADERS=machine.h ./config.status

$(SRCDIR)/test/testsuite: $(SRCDIR)/test/create_testsuite
	m4 <$(SRCDIR)/test/create_testsuite >$(SRCDIR)/test/testsuite



#!/usr/local/bin/ulpc

int main(int argc, string *argv)
{
  int e, verbose, successes, errors, t;
  string *tests;
  program testprogram;
  int start, fail;

  for(e=1;e<argc;e++)
  {
    switch(argv[e])
    {
      case "-h":
      case "--help":
        perror("Usage: "+argv[e]+" [-v | --verbose] [-h | --help] [-t <testno>] <testfile>\n");
        return 0;

      case "-v":
      case "--verbose":
        verbose++;
        break;

      case "-s":
      case "--start-test":
	sscanf(argv[++e],"%d",start);
	start--;
	break;

      case "-f":
      case "--fail":
	fail++;
	break;


      case "-t":
      case "--trace":
	t++;
	break;

      default:
	if(tests)
	{
	  perror("Uknown argument: "+argv[e]+".\n");
	  exit(1);
	}
	tests=(read_bytes(argv[e])||"")/"\n....\n";
	tests=tests[0..sizeof(tests)-2];
	if(sizeof(tests) < 10)
	{
	  perror("Failed to read test file!\n");
	  exit(1);
	}
    }
  }

  for(e=start;e<sizeof(tests);e++)
  {
    string test;
    int type;
    object o;
    mixed a,b;

    sscanf(tests[e],"%s\n%s",type,test);
    sscanf(type,"%*s expected result: %s",type);

    if(verbose)
    {
      perror("Doing test "+(e+1)+"\n");
      if(verbose>1)
	perror(test+"\n");
    }

    switch(type)
    {
    case "COMPILE_ERROR":
      master()->set_inhibit_compile_errors(1);
      if(catch(compile_string(test,"Test "+(e+1))))
      {
	successes++;
      }else{
	perror("Test "+(e+1)+" failed.\n");
	perror(test+"\n");
	errors++;
      }
      master()->set_inhibit_compile_errors(0);
      break;

    case "EVAL_ERROR":
      master()->set_inhibit_compile_errors(1);
      if(catch(clone(compile_string(test,"Test "+(e+1)))->a()))
      {
	successes++;
      }else{
	perror("Test "+(e+1)+" failed.\n");
	perror(test+"\n");
	errors++;
      }
      master()->set_inhibit_compile_errors(0);
      break;

    default:
      o=clone(compile_string(test,"Test "+(e+1)));

      a=b=0;
      if(t) trace(t);
      if(functionp(o->a)) a=o->a();
      if(functionp(o->b)) b=o->b();
      if(t) trace(0);
      switch(type)
      {
      case "FALSE":
	a=!a;
	
      case "TRUE":
	if(!a)
	{
	  perror("Test "+(e+1)+" failed.\n");
	  perror(test+"\n");
	  errors++;
	}else{
	  successes++;
	}
	break;

      case "RUN":
	successes++;
	break;

      case "EQ":
	if(a!=b)
	{
	  perror("Test "+(e+1)+" failed.\n");
	  perror(test+"\n");
	  perror(sprintf("o->a(): %O\n",a));
	  perror(sprintf("o->b(): %O\n",b));
	  errors++;
	}else{
	  successes++;
	}
	break;
      
      case "EQUAL":
	if(!equal(a,b))
	{
	  perror("Test "+(e+1)+" failed.\n");
          perror(test+"\n");
	  perror(sprintf("o->a(): %O\n",a));
	  perror(sprintf("o->b(): %O\n",b));
	  errors++;
	}else{
	  successes++;
	}
	break;

      default:
	perror(sprintf("Unknown test type (%O).\n",type));
	errors++;
      }
    }
    if(fail && errors)
      exit(1);
  }

  if(errors + successes != sizeof(tests))
  {
    perror("Errors + Successes != number of tests!\n");
    errors++;
  }
  if(errors || verbose)
  {
    perror("Failed tests: "+errors+".\n");
  }

  return errors;
}

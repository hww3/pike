AC_INIT(jvm.c)
AC_CONFIG_HEADER(config.h)

sinclude(../module_configure.in)

OLD_LIBS=$LIBS
OLD_LDFLAGS=$LDFLAGS
OLD_CPPFLAGS=$CPPFLAGS
JAVA_LIBS=""
JAVA_LIBPATH=""
JAVA_AVAILABLE=0
LINKER_OPTIONS=""

AC_ARG_WITH(java,  [  --without-java       no support for Java],[],[with_java=yes])

if test "x$with_java" = xyes; then

  AC_MSG_CHECKING(which architecture we're using)
  AC_CACHE_VAL(pike_cv_java_arch, [
    if pike_cv_java_arch="`uname -p`"; then :; else pike_cv_java_arch=no; fi
  ])
  AC_MSG_RESULT($pike_cv_java_arch)

  AC_MSG_CHECKING(which operating system we're using)
  AC_CACHE_VAL(pike_cv_java_sysos, [
    pike_cv_java_sysos="`uname`"
    case "$pike_cv_java_sysos" in
      SunOS)
        case "`uname -r`" in
          5.*|6.*|7.*) pike_cv_java_sysos="solaris";
        esac
      ;;
    esac
  ])
  AC_MSG_RESULT($pike_cv_java_sysos)

  AC_MSG_CHECKING(what kind of threads to use)
  AC_CACHE_VAL(pike_cv_java_threads_type, [
    if test "x$THREADS_FLAG" = x; then
      pike_cv_java_threads_type=native_threads
    else
      pike_cv_java_threads_type="${THREADS_FLAG}_threads"
    fi
  ])
  AC_MSG_RESULT($pike_cv_java_threads_type)

  AC_MSG_CHECKING(for JAVA_HOME)
  AC_CACHE_VAL(pike_cv_java_java_home, [
    if test "x$JAVA_HOME" = x; then
      pike_cv_java_java_home=no
      for tmp_java_home in /usr/java /usr/local/java /usr/local/jdk* /usr/java*/jre /usr/local/java*/jre /usr/local/jdk*/jre /usr/local/jre*; do
        if test -d $tmp_java_home/.; then
          if ls "$tmp_java_home/lib/$pike_cv_java_arch/$pike_cv_java_threads_type"/libjvm* >/dev/null 2>&1 || \
	    ls "$tmp_java_home/lib/$pike_cv_java_arch"/libjvm* >/dev/null 2>&1 || \
	    ls "$tmp_java_home/lib/$pike_cv_java_arch"/classic/libjvm* >/dev/null 2>&1; then
	      pike_cv_java_java_home="$tmp_java_home"
	  else
	    :
	  fi
        else
          :
        fi
      done
    else
      pike_cv_java_java_home="$JAVA_HOME"
    fi
  ])
  AC_MSG_RESULT($pike_cv_java_java_home)

  AC_MSG_CHECKING(for Java libraries)
  AC_CACHE_VAL(pike_cv_java_lib_dir, [
    pike_cv_java_lib_dir=""
    if test -d "$pike_cv_java_java_home/lib/$pike_cv_java_arch/$pike_cv_java_threads_type" ; then
      pike_cv_java_lib_dir="$pike_cv_java_lib_dir$pike_cv_java_java_home/lib/$pike_cv_java_arch/$pike_cv_java_threads_type "
    else
      :
    fi
    if test -d "$pike_cv_java_java_home/lib/$pike_cv_java_arch/classic" ; then
      pike_cv_java_lib_dir="$pike_cv_java_lib_dir$pike_cv_java_java_home/lib/$pike_cv_java_arch/classic "
    else
      :
    fi
    if test -d "$pike_cv_java_java_home/lib/$pike_cv_java_arch" ; then
      pike_cv_java_lib_dir="$pike_cv_java_lib_dir$pike_cv_java_java_home/lib/$pike_cv_java_arch "
    else
      :
    fi
    if test -z "$pike_cv_java_lib_dir" ; then pike_cv_java_lib_dir=no; else
      :
    fi
  ])
  AC_MSG_RESULT($pike_cv_java_lib_dir)

  if test "x$pike_cv_java_lib_dir" = xno; then :; else
    echo Adding $pike_cv_java_lib_dir to the library search path.
    for i in $pike_cv_java_lib_dir; do
      LDFLAGS="-L$i -R$i ${LDFLAGS}"
      LINKER_OPTIONS="-L$i -R$i ${LINKER_OPTIONS}"
      JAVA_LIBPATH="${JAVA_LIBPATH}${JAVA_LIBPATH:+:}$i"
    done
  fi

  AC_MSG_CHECKING(for the Java include directory)
  AC_CACHE_VAL(pike_cv_java_include_dir, [
    pike_cv_java_include_dir=no
    for tmp_java_incdir in /usr/java* /usr/local/java* /usr/local/jdk* /usr/local/jre* "$pike_cv_java_java_home"; do
      if test -d $tmp_java_incdir/. -a -d $tmp_java_incdir/include/$pike_cv_java_sysos/.; then
        if ls "$tmp_java_incdir/include/jni.h" >/dev/null 2>&1 ; then
	  pike_cv_java_include_dir="$tmp_java_incdir/include"
	else
	  :
	fi
      else
        :
      fi
    done
  ])
  AC_MSG_RESULT($pike_cv_java_include_dir)

  if test "x$pike_cv_java_include_dir" = xno; then :; else
    echo Adding $pike_cv_java_include_dir and $pike_cv_java_include_dir/$pike_cv_java_sysos to the include search path.
    CPPFLAGS="-I$pike_cv_java_include_dir -I$pike_cv_java_include_dir/$pike_cv_java_sysos ${CPPFLAGS}"
  fi

  AC_CHECK_HEADERS(jni.h winbase.h)

  pike_cv_java=no

  if test "$ac_cv_header_jni_h" = yes; then

    AC_MSG_CHECKING([for JNI_CreateJavaVM in -ljvm])
    AC_CACHE_VAL(ac_cv_lib_jvm_JNI_CreateJavaVM, [
      ac_save_LIBS="$LIBS"
      LIBS="-ljvm $LIBS"
      AC_TRY_LINK([#include <jni.h>], dnl
	[JNI_CreateJavaVM((JavaVM**)0,(void**)0,(void*)0);], dnl
	[ac_cv_lib_jvm_JNI_CreateJavaVM=yes], dnl
	[ac_cv_lib_jvm_JNI_CreateJavaVM=no])
      LIBS="$ac_save_LIBS"
    ])
    if test x"$ac_cv_lib_jvm_JNI_CreateJavaVM" = xyes; then
      LIBS="-ljvm $LIBS"
      JAVA_LIBS="-ljvm ${JAVA_LIBS}"
      pike_cv_java=yes;
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi

    if test "$pike_cv_java" = yes; then

      AC_CHECK_LIB(java, Java_java_lang_Class_isInstance, [
        LIBS="-ljava $LIBS"
        JAVA_LIBS="-ljava ${JAVA_LIBS}"
      ], [])

      AC_CHECK_LIB(zip, Java_java_util_zip_Inflater_inflateBytes, [
        LIBS="-lzip $LIBS"
        JAVA_LIBS="-lzip ${JAVA_LIBS}"
      ], [])

      AC_CHECK_LIB(hpi, sysOpen, [
        LIBS="$LIBS -lhpi"
        JAVA_LIBS="${JAVA_LIBS} -lhpi"
      ], [])

      AC_CHECK_LIB(thread, thr_create, [
        LIBS="$LIBS -lthread"
        JAVA_LIBS="${JAVA_LIBS} -lthread"
	LINKER_OPTIONS="${LINKER_OPTIONS} -lthread"
      ], [])

    else
      :
    fi
  else
    :
  fi

  if test "$pike_cv_java" = yes; then
    AC_MSG_CHECKING(if the JVM really works)
    AC_CACHE_VAL(pike_cv_java_working, [
      AC_TRY_RUN([#ifdef HAVE_JNI_H
#include <jni.h>
#endif
        int main(int argc, char *argv[])
        {
          JavaVM *jvm;
          JNIEnv *env;
          JavaVMInitArgs vm_args;
          JavaVMOption vm_options[2];
          vm_args.version = 0x00010002;
          vm_args.nOptions = 1;
          vm_args.options = vm_options;
          vm_args.ignoreUnrecognized = JNI_TRUE;
          vm_options[0].optionString = "-Djava.library.path=$JAVA_LIBPATH";
          vm_options[0].extraInfo = NULL;
          if(JNI_CreateJavaVM(&jvm, (void**)&env, &vm_args))
            exit(1);
	  return 0;
        };
      ], [pike_cv_java_working=yes], [pike_cv_java_working=no])
    ])
    AC_MSG_RESULT($pike_cv_java_working)
    if test "$pike_cv_java_working" = no; then
      pike_cv_java=no;
    fi
  else
    :
  fi

  if test "x$pike_cv_java" = xno; then
    LIBS="$OLD_LIBS"
    CPPFLAGS="$OLD_CPPFLAGS"
    LDFLAGS="$OLD_LDFLAGS"
    JAVA_LIBS=""
    LINKER_OPTIONS=""
  else
    AC_DEFINE(HAVE_JAVA)
    JAVA_AVAILABLE=1
    if test "x$pike_cv_java_java_home" = xno; then :; else
      AC_DEFINE_UNQUOTED(JAVA_HOME, "${pike_cv_java_java_home}")
    fi
    if test "x$pike_cv_sys_os" = xWindows_NT ; then
      dnl We'll do LoadLibrary ourselves instead of relying on jvm.lib to
      dnl do it for us.  That way we'll avoid nasty popup dialogs...
      JAVA_LIBS=""
    else
      :
    fi
  fi

  AC_MSG_CHECKING(for known machine language)
  AC_CACHE_VAL(pike_cv_java_cpu, [
    case $pike_cv_java_arch  in
      sparc) pike_cv_java_cpu=sparc;;
      i386|x86) pike_cv_java_cpu=x86;;
      *) pike_cv_java_cpu=no;;
    esac
  ])
  AC_MSG_RESULT($pike_cv_java_cpu)

  case $pike_cv_java_cpu in
    sparc) AC_DEFINE(HAVE_SPARC_CPU);;
    x86) AC_DEFINE(HAVE_X86_CPU);;
  esac

  if test "x$JAVA_LIBPATH" = x; then :; else
    AC_DEFINE_UNQUOTED(JAVA_LIBPATH, "${JAVA_LIBPATH}")
  fi

  true
else
  :
fi

AC_SUBST(LINKER_OPTIONS)
AC_SUBST(JAVA_LIBS)
AC_SUBST(JAVA_AVAILABLE)

AC_OUTPUT(Makefile module.pmod.in,echo FOO >stamp-h )

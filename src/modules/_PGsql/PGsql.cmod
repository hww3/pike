/* -*- c -*-
 * $Id: PGsql.cmod,v 1.24 2008/08/21 03:13:46 srb Exp $
 *
 * PGsql, accelerator functions for Sql.pgsql for Pike.
 *
 */

#include "global.h"
#include "config.h"

#include "svalue.h"
#include "object.h"
#include "mapping.h"
#include "module.h"
#include "operators.h"
#include "interpret.h"
#include "threads.h"
#include "builtin_functions.h"
#include "fdlib.h"
#include "dmalloc.h"

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_NETINET_TCP_H
#include <netinet/tcp.h>
#endif

DECLARATIONS

/*#define PGSQL_DEBUG */

#ifdef PGSQL_DEBUG
#define PD(X)	fprintf X
#else /* !PGSQL_DEBUG */
#define PD(X)
#endif /* PGSQL_DEBUG */

#define BUFSIZE	     4096

typedef unsigned char uchar;
#define STRLEN(x)    (sizeof(x)-1)
#define THISOBJ	     (Pike_fp->current_object)

#define BOOLOID         16
#define BYTEAOID        17
#define CHAROID         18
#define INT8OID         20
#define INT2OID         21
#define INT4OID         23
#define TEXTOID         25
#define OIDOID          26
#define XMLOID          142
#define FLOAT4OID       700
#define MACADDROID      829
#define INETOID         869
#define BPCHAROID       1042
#define VARCHAROID      1043
#define CTIDOID         1247
#define UUIDOID         2950

#define PGMSG_DATAROW	'D'

PIKECLASS PGsql
{
  CVAR uchar buf[BUFSIZE];
  CVAR uchar*plow,*phigh;
  CVAR uchar*extrabuf;
  CVAR unsigned extrafilled;
  PIKEVAR int flushed;
  PIKEVAR object portal;

  INIT {
    THIS->phigh=THIS->plow=THIS->buf;
    THIS->extrabuf=xalloc(1);
    THIS->extrafilled=0;
    THIS->flushed=-1;
  }

  EXIT {
    xfree(THIS->extrabuf);
  }

  static int rread(void*const a,const int len) {
    int i;
    push_int(len);
    push_int(1);
    apply(THISOBJ,"read",2);
    if(Pike_sp[-1].type == PIKE_T_STRING) {
      i=Pike_sp[-1].u.string->len;
      memcpy(a,Pike_sp[-1].u.string->str,i);
    }
    else
      i=-1;
    pop_stack();
    return i;
  }

  static int low_peek(const int timeout) {
    int retval;
    push_int(timeout);
    apply(THISOBJ, "peek", 1);
    retval = Pike_sp[-1].u.integer;
    pop_stack();
    return retval;
  }

  static int medium_peek(const int timeout) {
    int retval=1;
    if(THIS->phigh==THIS->plow && !THIS->extrafilled) {
      PD((stderr,"PGsql peek %d\n",timeout));
      retval=low_peek(timeout);
    }
    return retval;
  }

  static void flushifneeded(void) {
    if(!THIS->flushed && low_peek(0)) {
      apply(THISOBJ,"sendflush",0);
      pop_stack();				  /* void function returns 0 */
    }
    if(THIS->extrafilled) {
      if(THIS->extrafilled>BUFSIZE)
        THIS->extrabuf=realloc(THIS->extrabuf,1);
      THIS->extrafilled=0;
    }
  }

  static int low_getbyte(void) {
    int retval;
    if(THIS->phigh!=THIS->plow) {
ret:  retval=*THIS->plow++;
ret2: PD((stderr,"PGsql getbyte 0x%02x=%c\n",retval,retval));
      return retval;
    }
    flushifneeded();
    retval = rread(THIS->buf, BUFSIZE);
    if(retval>0) {
      THIS->phigh=(THIS->plow=THIS->buf)+retval;
      goto ret;
    }
    retval=-1;
    goto ret2;
  }

  static int low_getint16(void) {
    int s0=low_getbyte();
    int r=(s0&0x7f)<<8|low_getbyte();
    return s0&0x80 ? r-(1<<15) : r ;
  }

  static int low_getint32(void) {
    int r=low_getint16();
    r=r<<8|low_getbyte();
    return r<<8|low_getbyte();
  }

  static struct pike_string*low_getstring(int length) {
    struct pike_string*retval;
    struct string_builder sb,*psb=0;
    int len,left;
    uchar*p;
#ifdef PIKE_DEBUG                                  /* placate silly warnings */
    len=0;retval=0;p=0;		        /* these initialisations are useless */
#endif
    if(length) {
      len=length;
      retval=begin_shared_string(len);
      p=(uchar*)retval->str;
    }
    do {
      left=THIS->phigh-THIS->plow;
      if(length) {
        if(left>=len) {
ret:      memcpy(p,THIS->plow,len);
          THIS->plow+=len;
ret2:     PD((stderr,"PGsql getstring %d\n",length));
          return low_end_shared_string(retval);
        }
        memcpy(p,THIS->plow,left);
        len-=left;p+=left;THIS->plow+=left;
      }
      else {
        p=memchr(THIS->plow,0,left);
        if(p) {
          len=p-THIS->plow;
	  if(!psb) {
            retval=begin_shared_string(len++);      /* nul terminated anyway */
	    p=(uchar*)retval->str;
            goto ret;
	  }
          PD((stderr,"PGsql getstring %s\n",psb->s->str));
          return finish_string_builder(&sb);
        }
        else if(!psb)
          init_string_builder(psb=&sb,0);
        string_builder_binary_strcat0(psb,THIS->plow,left);
      }
      flushifneeded();
      for(;len>BUFSIZE;len-=left,p+=left)
        if((left=rread(p,len))<=0)
          goto bad;
      if(!len)
        goto ret2;
      left=rread(THIS->buf,BUFSIZE);
      THIS->phigh=(THIS->plow=THIS->buf)+left;
    } while(left>0);
bad:
    Pike_error("Missing %d bytes from network\n",len);
  }

  PIKEFUN void create() {
#ifdef TCP_NODELAY
    apply(THISOBJ,"query_fd",0);
    if(Pike_sp[-1].type == PIKE_T_INT) {
      int fd=Pike_sp[-1].u.integer;
      int newval = 1;
      setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &newval, sizeof(newval));
    }
    pop_stack();
#endif
  }

  PIKEFUN void setportal(void|object portal) {
    if(THIS->portal)
      free_object(THIS->portal);
    if((THIS->portal=portal)) {
      debug_malloc_touch(THIS->portal);
      Pike_sp--;				/* don't decrease references */
    }
    else
      pop_stack();
  }

  PIKEFUN int bpeek(void|int timeoutp) {
    int timeout=0;
    if(timeoutp)
      timeout=timeoutp->u.integer;
    RETURN medium_peek(timeout);
  }

  PIKEFUN int getbyte() {
    push_int(low_getbyte());
  }

  PIKEFUN int getint16() {
    push_int(low_getint16());
  }

  PIKEFUN int getint32() {
    push_int(low_getint32());
  }

  PIKEFUN string getstring(void|int length) {
    RETURN low_getstring(length ? length->u.integer : 0);
  }

  PIKEFUN void unread(string oldbuf) {
    int len = oldbuf->len;
    if(len) {
      uchar*q;
      int left=THIS->phigh-THIS->plow;
      PD((stderr,"PGsql unread %d\n",len));
      if(THIS->extrafilled) {
        memmove(THIS->extrabuf,THIS->plow,left);
        q=realloc(THIS->extrabuf,left+len);
        if(!q)
outofmem: Pike_fatal("Out of memory\n");
      }
      else {
        q=realloc(THIS->extrabuf,left+len);
        if(!q)
	  goto outofmem;
        memcpy(q,THIS->plow,left);
      }
      THIS->phigh=(THIS->plow=THIS->extrabuf=q)+left+len;
      memcpy(q+left,oldbuf->str,len);
      THIS->extrafilled=left+len;
    }
  }

  PIKEFUN void decodedatarow(int msglen) {
    int i;
    long totalrecvd=0, recvdbstats=0;
    int nrows=0, buffer=0;
    int rowsreceived,inflight,fetchlimit,parentfetchlimit,portalbuffersize;
    struct svalue*bytesreceived;
    struct array*datarowdesc;
    struct object*portal,*pgsqlsess;
    pop_stack();					      /* drop msglen */
    ref_push_object(portal=THIS->portal);	  /* increase refs on portal */

    ref_push_object(portal); ref_push_string(MK_STRING("_pgsqlsess"));
    f_arrow(2); pgsqlsess=Pike_sp[-1].u.object;
						      /* preserve _pgsqlsess */
    ref_push_object(portal); ref_push_string(MK_STRING("_datarowdesc"));
    f_arrow(2); datarowdesc=Pike_sp[-1].u.array;
						    /* preserve _datarowdesc */
    object_index_no_free2(bytesreceived=Pike_sp, portal,0,
     MK_STRING_SVALUE("_bytesreceived"));
    Pike_sp++;					  /* preserve _bytesreceived */

    ref_push_object(portal); ref_push_string(MK_STRING("_inflight"));
    f_arrow(2); inflight=Pike_sp[-1].u.integer;
    pop_stack();

    ref_push_object(portal); ref_push_string(MK_STRING("_fetchlimit"));
    f_arrow(2); fetchlimit=Pike_sp[-1].u.integer;
    pop_stack();

    ref_push_object(portal); ref_push_string(MK_STRING("_portalbuffersize"));
    f_arrow(2); portalbuffersize=Pike_sp[-1].u.integer;
    pop_stack();

    ref_push_object(portal); ref_push_string(MK_STRING("_buffer"));
    f_arrow(2);
    if(Pike_sp[-1].type == PIKE_T_INT)
      buffer=Pike_sp[-1].u.integer;
    pop_stack();

    ref_push_object(pgsqlsess); ref_push_string(MK_STRING("_fetchlimit"));
    f_arrow(2); parentfetchlimit=Pike_sp[-1].u.integer;
    pop_stack();

    ref_push_object(portal); ref_push_string(MK_STRING("_rowsreceived"));
    f_arrow(2);
    if(Pike_sp[-1].type != PIKE_T_INT)
      Pike_error("Driver needs to be fixed to support more than 2^31 rows\n");
    rowsreceived=Pike_sp[-1].u.integer;
    pop_stack();

    for(;;) {
      int cols=low_getint16();
      if(cols != datarowdesc->size)
        Pike_error("Mismatching dataset and description sizes\n");
      totalrecvd+=msglen;
      msglen-=2+4*cols;
      for(i=0; i<cols; i++) {
        int collen=low_getint32();
        if(collen>0) {
          struct svalue drd,*svp;
          msglen-=collen;
          array_index_no_free(&drd,datarowdesc,i);
          svp = low_mapping_string_lookup(drd.u.mapping, MK_STRING("type"));
	  free_svalue(&drd);
          switch(svp->u.integer) {
            default:push_string(low_getstring(collen));
              break;
            case CHAROID:
            case BOOLOID:push_int(low_getbyte());
              break;
            case FLOAT4OID: {
              char*tb=xalloc(collen+1);
              char*p=tb;
              do
                *p++=low_getbyte();
              while(--collen);
              *p=0; push_float(atof(tb)); xfree(tb);
              break;
            }
            case INT2OID:push_int(low_getint16());
              break;
            case INT8OID: {
              int firstword = low_getint32();
              int nextword = low_getint32();
              switch(firstword) {
                default:
                  push_int(firstword);push_int(32);f_lsh(2);
                  if(nextword>=0)
		    goto nextor;
                  push_int((nextword>>1)&0x7fffffff); push_int(1); f_lsh(2);
                  f_or(2);
                  goto tor;
                case -1:
		  if(nextword<0)
		    goto simple;
                  push_int(firstword);push_int(32);f_lsh(2);
                  goto nextor;
                case 0:
                  if(nextword<0) {
                    push_int((nextword>>1)&0x7fffffff); push_int(1); f_lsh(2);
tor:		    if(nextword&1) {
		      nextword=1;
nextor:               push_int(nextword);
                      f_or(2);
		    }
                  }
                  else
simple:             push_int(nextword);
              }
              break;
            }
            case OIDOID:
            case INT4OID:push_int(low_getint32());
          }
        }
        else if(!collen)
          push_empty_string();
        else
          push_undefined();
      }
      if(msglen)
        Pike_error("Protocol error\n");
      f_aggregate(cols);
      nrows++;
      inflight--;
      if(medium_peek(0)>0)
        switch(low_getbyte()) {
	  case PGMSG_DATAROW:

	    switch(buffer) {
	      case 0:
	      case 1:
	        if(fetchlimit) {
	          if(parentfetchlimit) {
	            push_int(portalbuffersize/2);
	            push_int(rowsreceived+nrows);
	            f_multiply(2);
	            push_svalue(bytesreceived);
		    push_int(totalrecvd);
		    f_add(2);
	            f_divide(2);
	            fetchlimit=Pike_sp[-1].u.integer;
	            if(fetchlimit>parentfetchlimit)
	              fetchlimit=parentfetchlimit;
	            else if(!fetchlimit)
	              fetchlimit=1;
	            pop_stack();
	          }
	          else
	            fetchlimit=0;
	          switch(buffer) {
	            case 1: {
		      ref_push_object(pgsqlsess);
		      ref_push_string(MK_STRING("_nextportal"));
		      f_arrow(2); i=Pike_sp[-1].u.integer;
		      pop_stack();

                      if(i)
		        break;
	            }
	            case 0:
	              if(fetchlimit && inflight<=fetchlimit-1) {
			push_int(fetchlimit);
			apply(pgsqlsess, "_sendexecute", 1);
			inflight+=fetchlimit;
			pop_stack();		  /* void function returns 0 */
		      }
	          }
	        }
	    }

	    PD((stderr,"PGsql DataRow fast fetch\n"));
	    msglen=low_getint32();
	    recvdbstats+=1+msglen;
	    msglen-=4;
	    continue;
	  default:THIS->plow--;				         /* ungetc() */
	  case -1:;
        }
      break;
    }

    f_aggregate(nrows);
    ref_push_object(portal); ref_push_string(MK_STRING("_datarows"));
    f_arrow(2);

    if(Pike_sp[-1].u.array->size) {
      push_undefined();
      object_set_index2(portal,0, MK_STRING_SVALUE("_datarows"), Pike_sp-1);
      pop_stack();
      stack_swap();
      f_add(2);
    }
    else
      pop_stack();
    object_set_index2(portal,0, MK_STRING_SVALUE("_datarows"), Pike_sp-1);
    pop_stack();
				      /* bytesreceived is still on the stack */
    push_int(totalrecvd);
    f_add(2);
    object_set_index2(portal,0, MK_STRING_SVALUE("_bytesreceived"), Pike_sp-1);
    pop_stack();

    push_int(inflight);
    object_set_index2(portal,0, MK_STRING_SVALUE("_inflight"), Pike_sp-1);
    pop_stack();

    push_int(fetchlimit);
    object_set_index2(portal,0, MK_STRING_SVALUE("_fetchlimit"), Pike_sp-1);
    pop_stack();

    if(--nrows) {
      push_int(rowsreceived+nrows);
      object_set_index2(portal,0, MK_STRING_SVALUE("_rowsreceived"),
       Pike_sp-1);
      pop_stack();

      ref_push_object(pgsqlsess);
      ref_push_string(MK_STRING("_msgsreceived"));
      f_arrow(2);
      Pike_sp[-1].u.integer+=nrows;
      object_set_index2(pgsqlsess,0, MK_STRING_SVALUE("_msgsreceived"),
       Pike_sp-1);
      pop_stack();

      ref_push_object(pgsqlsess);
      ref_push_string(MK_STRING("_bytesreceived"));
      f_arrow(2);
      push_int(recvdbstats);
      f_add(2);
      object_set_index2(pgsqlsess,0, MK_STRING_SVALUE("_bytesreceived"),
       Pike_sp-1);
      pop_stack();
    }

    pop_n_elems(3);		  /* pop _datarowdesc, _pgsqlsess and portal */
  }
}

PIKE_MODULE_INIT {
  INIT;
}

PIKE_MODULE_EXIT {
  EXIT;
}

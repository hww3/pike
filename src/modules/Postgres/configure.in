dnl $Id: configure.in,v 1.19 2003/04/28 09:49:39 grubba Exp $

AC_INIT(postgres.c)
AC_CONFIG_HEADER(pgres_config.h)

AC_MODULE_INIT()

PIKE_FEATURE_WITHOUT(Postgres)

echo "Configuring Postgres module"

AC_ARG_WITH(postgres,
	[  --with(out)-postgres               postgres95 DB server support],
	[],[with_postgres=yes])
AC_ARG_WITH(postgres-include-dir, 
	[  --with-postgres-include-dir=dir    look for header-files in dir],
	[pike_postgres_user_include_directory=$withval])
AC_ARG_WITH(libpq-dir, 
	[  --with-libpq-dir=dir               look for library-files in dir],
	[pike_postgres_user_lib_directory=$withval])

ac_pike_postgres_skip=no

dnl set up search paths

include_searchpath=""
lib_searchpath=""
for a in $with_root/usr/local $with_root/usr $with_root/opt $with_root/usr/lib $HOME; do
  for b in postgres95 postgres pgsql postgresql .; do
    include_searchpath="$include_searchpath $a/$b/include $a/include/$b"
    lib_searchpath="$lib_searchpath $a/$b/lib $a/lib/$b"
  done
done
include_searchpath="$pike_postgres_user_include_directory $include_searchpath"
lib_searchpath="$pike_postgres_user_lib_directory $lib_searchpath"

dnl check for dirname and locate, we might need them
AC_CHECK_PROG(dirname,dirname,yes)
AC_CHECK_PROG(locate,locate,yes)
if test x$ac_cv_prog_dirname$ac_cv_prog_locate = xyesyes; then
  pike_try_locate=yes
fi

dnl start actual work
if test x$with_postgres = xyes; then
  PIKE_FEATURE_NODEP(Postgres)

  OLD_CPPFLAGS=$CPPFLAGS
  OLD_LIBS=$LIBS
  OLD_LDFLAGS=$LDFLAGS

dnl see if we can find the include files in any of the standard locations
  AC_MSG_CHECKING(for location of the Postgres include files)
  AC_CACHE_VAL(pike_cv_pgres_include_dir, [
    for pike_cv_pgres_include_dir in $include_searchpath no; do
      if test -f $pike_cv_pgres_include_dir/libpq-fe.h; then
	break
      fi
    done
  ])
  if test x$pike_cv_pgres_include_dir != xno; then
    AC_MSG_RESULT(found.)
  else
    AC_MSG_RESULT(not found.)
  fi

dnl last ditch. The locator could be confused e.g. by pike include files
dnl unluckily there's no way out of it.
  if test x$pike_cv_pgres_include_dir$pike_try_locate = xnoyes; then
    AC_MSG_CHECKING(whether we can locate it anyway...)
    for pike_cv_pgres_locate_include_file in `locate libpq-fe.h`; do
dnl check it not to be a stale entry
      if test -f $pike_cv_pgres_locate_include_file; then
	pike_cv_pgres_include_dir=`dirname $pike_cv_pgres_locate_include_file`
	break
      fi
    done
    if test x$pike_cv_pgres_include_dir != xno; then
      AC_MSG_RESULT(found in $pike_cv_pgres_include_dir.)
    else
      AC_MSG_RESULT(not found.)
    fi
  fi

  if test x$pike_cv_pgres_include_dir != xno; then
    CPPFLAGS="$CPPFLAGS -I$pike_cv_pgres_include_dir"
  fi

dnl final ckeck, just to be sure we didn't mess up
  AC_CHECK_HEADERS(postgres.h postgres_fe.h \
		   server/postgres.h server/postgres_fe.h \
		   libpq-fe.h)
  
dnl check whether we have Postgres 7.2 or newer
  HAVE_PG72=no
  if test -f $pike_cv_pgres_include_dir/pg_config.h; then
    case `grep 'PG_VERSION \"' $pike_cv_pgres_include_dir/pg_config.h | cut -d '"' -f 2` in
       7.[[2-9]]*|[8-9].*) HAVE_PG72=yes
             AC_DEFINE(HAVE_PG72) ;;
    esac
  fi
  
  echo "Have Postgres 7.2? $HAVE_PG72"
  if test "x$ac_cv_header_libpq_fe_h" = xno -o
	  "x$HAVE_PG72$ac_cv_header_postgres_h$ac_cv_header_postgres_fe_h$ac_cv_header_server_postgres_h$ac_cv_header_server_postgres_fe_h" = xnonononono ; then
    ac_pike_postgres_skip=yes
  fi

dnl okay, now let's start working on the libraries
  if test x$ac_pike_postgres_skip = xno; then
    AC_MSG_CHECKING(for location of the Postgres library)
    AC_CACHE_VAL(pike_cv_pgres_lib_dir,[
      for pike_cv_pgres_lib_dir in $lib_searchpath no; do
        if test -f $pike_cv_pgres_lib_dir/libpq.a -o \
	        -f $pike_cv_pgres_lib_dir/libpq.so; then
	  # FIXME: pq.lib, pq.library, libpq.sa
	  break
        fi
      done
    ])
    if test x$pike_cv_pgres_lib_dir != xno; then
      AC_MSG_RESULT(found.)
    else
      AC_MSG_RESULT(not found.)
    fi
    if test x$pike_cv_pgres_lib_dir$pike_cv_can_try_locate = xnoyes; then
      AC_MSG_CHECKING(whether we can locate it anyway)
      for pike_cv_pgres_locate_lib_file in `locate libpq.so libpq.a`; do
	# FIXME: pq.lib, pq.library, libpq.sa
	if test -f $pike_cv_pgres_locate_lib_file; then
	  pike_cv_pgres_lib_dir=`dirname $pike_cv_pgres_locate_lib_file`
	fi
      done
      if test x$pike_cv_pgres_lib_dir != xno; then
	AC_MSG_RESULT(found in $pike_cv_pgres_lib_dir.)
      else
	AC_MSG_RESULT(not found.)
      fi
    fi

dnl last check, just to be sure
    if test x$pike_cv_pgres_lib_dir != xno; then
      LDFLAGS="$LDFLAGS -L$pike_cv_pgres_lib_dir -R$pike_cv_pgres_lib_dir"
    fi
    AC_CHECK_LIB(crypt, crypt)
    AC_CHECK_LIB(pq,PQclear)
  fi
  AC_CHECK_FUNCS(PQsetdbLogin)
  if test x$ac_cv_func_PQsetdbLogin = xno; then
    AC_MSG_WARN(No Login-related functions, username and password will be silently ignored)
  fi
  AC_CHECK_FUNCS(PQsetnonblocking)
fi

if test  x$ac_cv_lib_pq_PQclear != xyes; then
  CPPFLAGS=$OLD_CPPFLAGS
  LDFLAGS=$OLD_LDFLAGS
  LIBS=$OLD_LIBS
  echo "Postgres not found. We won't support it."
else
  echo "Postgres found, module configured. Thank you for your collaboration."
  POSTGRES_SUPPORTED="yes"
  PIKE_FEATURE_OK(Postgres)
fi

AC_SUBST(POSTGRES_SUPPORTED)
AC_OUTPUT(Makefile)

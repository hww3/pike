# $Id: configure.in,v 1.8 2006/07/01 23:53:19 mast Exp $
AC_INIT(accept_and_parse.c)
AC_CONFIG_HEADER(config.h)

AC_SET_MAKE

AC_MODULE_INIT()

AC_CHECK_LIB(bind, __inet_ntoa)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(net, __get_socket_descriptor)

AC_CHECK_HEADERS(poll.h sys/poll.h sys/socket.h netinet/in.h arpa/inet.h \
		 asm/unistd.h sys/uio.h sys/types.h winsock2.h)

AC_CHECK_FUNCS(poll gmtime_r gmtime sendfile signal inet_ntoa inet_ntop)

AC_SUBST(RANLIB)

#
# NOTE: The test for sendfile is a duplicate of the test in the files module.
# It should probably be moved to the main configure-script.
# Note also that the test in the files module is more complete than this one.
# Note also that the Linux sendfile syscall test is not present there.
#	/grubba 2000-03-26
#
if test "$ac_cv_func_sendfile" = "yes"; then
  AC_MSG_CHECKING(if sendfile takes 4(Linux) or 7(FreeBSD) arguments)
  AC_CACHE_VAL(pike_cv_freebsd_sendfile, [
    AC_TRY_COMPILE([
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif /* HAVE_SYS_TYPES_H */
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif /* HAVE_SYS_SOCKET_H */
#ifdef HAVE_SYS_UIO_H
#include <sys/uio.h>
#endif /* HAVE_SYS_UIO_H */
    ], [
      return sendfile(0,0,0,0,(void *)0,(void *)0,0);
    ], [
      # Probably FreeBSD-style, but we need to check that
      # we indeed have a prototype...
      AC_TRY_COMPILE([
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif /* HAVE_SYS_TYPES_H */
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif /* HAVE_SYS_SOCKET_H */
#ifdef HAVE_SYS_UIO_H
#include <sys/uio.h>
#endif /* HAVE_SYS_UIO_H */
      ], [
        /* This should fail on FreeBSD
         * If it succeeds, we don't have a prototype,
         * which would indicate Linux.
         */
        return sendfile(0,0,(void *)0,0);
      ], [ pike_cv_freebsd_sendfile=no ], [ pike_cv_freebsd_sendfile=yes ])
    ], [ pike_cv_freebsd_sendfile=no ])
  ])
  if test "$pike_cv_freebsd_sendfile" = "yes"; then
    AC_MSG_RESULT([7 - FreeBSD style])
    AC_DEFINE(HAVE_FREEBSD_SENDFILE)

    AC_MSG_CHECKING([if sendfile looks thread-safe])
    AC_CACHE_VAL(pike_cv_freebsd_sendfile_threadsafe, [
      # We're optimistic -- default to assuming it works.
      pike_cv_freebsd_sendfile_threadsafe="yes"
      if test -f /usr/lib/libc_r.so; then
        if /usr/bin/nm -D /usr/lib/libc_r.so 2>&1 | grep _thread_sys >/dev/null 2>&1; then
	  # Ok, looks like we can perform the test.
	  # Assume we have a broken sendfile(2).
          pike_cv_freebsd_sendfile_threadsafe="no"
	  if /usr/bin/nm -D /usr/lib/libc_r.so 2>&1 | grep _thread_sys_sendfile >/dev/null 2>&1; then
	    # Wee! They have actually added a wrapper for sendfile(2)!
	    pike_cv_freebsd_sendfile_threadsafe="yes"
	  else :; fi
	else :; fi
      else :; fi
    ])

    if test "$pike_cv_freebsd_sendfile_threadsafe" = "yes"; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no - disabling use of sendfile)
      AC_DEFINE(HAVE_BROKEN_SENDFILE)
    fi
  else
    AC_MSG_RESULT([4 - Linux style])
  fi
else
  if test "${pike_cv_sys_os}" = "Linux"; then
    if test "$pike_cv_sys_ccshared" != ""; then
      AC_MSG_CHECKING(sendfile on linux without sendfile in header files with shared code)
      AC_CACHE_VAL(pike_cv_sendfile_for_early_linux_with_new_gcc_shared, [
	OLD_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS $pike_cv_sys_ccshared"
	AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/errno.h>
#include <asm/unistd.h>
#ifndef __NR_sendfile
# define __NR_sendfile 187
#endif
_syscall4(ssize_t,sendfile,int,out,int,in,off_t*,off,size_t,size);
	], [], [pike_cv_sendfile_for_early_linux_with_new_gcc_shared=yes], 
	     [pike_cv_sendfile_for_early_linux_with_new_gcc_shared=no])
	CFLAGS="$OLD_CFLAGS"
      ])

      if test "$pike_cv_sendfile_for_early_linux_with_new_gcc_shared" = "yes" ; then
	AC_DEFINE(CAN_HAVE_LINUX_SYSCALL4)
	AC_MSG_RESULT(perhaps)
      else
	AC_MSG_RESULT(no)
      fi
    else
      pike_cv_sendfile_for_early_linux_with_new_gcc_shared=no
    fi

    if test "$pike_cv_sendfile_for_early_linux_with_new_gcc_shared" = "no" ; then
      AC_MSG_CHECKING(sendfile on linux without sendfile in header files with nonshared code)
      AC_CACHE_VAL(pike_cv_sendfile_for_early_linux_with_new_gcc_nonshared, [
	AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/errno.h>
#include <asm/unistd.h>
#ifndef __NR_sendfile
# define __NR_sendfile 187
#endif
_syscall4(ssize_t,sendfile,int,out,int,in,off_t*,off,size_t,size);
	], [], [pike_cv_sendfile_for_early_linux_with_new_gcc_nonshared=yes], 
	     [pike_cv_sendfile_for_early_linux_with_new_gcc_nonshared=no])
      ])

      if test "$pike_cv_sendfile_for_early_linux_with_new_gcc_nonshared" = "yes" ; then
	AC_DEFINE(CAN_HAVE_NONSHARED_LINUX_SYSCALL4)
	AC_MSG_RESULT(perhaps)
      else
	AC_MSG_RESULT(no)
      fi
    fi

    if test "$pike_cv_sendfile_for_early_linux_with_new_gcc_shared" = "no" -o \
            "$pike_cv_sendfile_for_early_linux_with_new_gcc_nonshared" = "no"; then
      AC_MSG_CHECKING(sendfile on linux without sendfile in header files with new gcc)
  
      AC_CACHE_VAL(pike_cv_sendfile_for_early_linux, [
        AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/errno.h>

int sendfile(int out, int in, int *off, int size)
{
  int retval;
  asm volatile("pushl %%ebx\n\t"
               "movl %%edi,%%ebx\n\t"
               "int $0x80\n\t"
               "popl %%ebx"
               :"=a" (retval)
               :"0" (187),
               "D" (out), /* pseudo-ebx */
               "c" (in),
               "d" (off),
               "S" (size)
               );
  if ((unsigned long) retval > (unsigned long)-1000) 
  {
    errno = -retval;
    retval = -1;
  }
  return retval;
}
        ],[],[pike_cv_sendfile_for_early_linux=yes],
          [pike_cv_sendfile_for_early_linux=no])])

      if test "$pike_cv_sendfile_for_early_linux" = "yes" ; then
	AC_DEFINE(CAN_HAVE_SENDFILE)
	AC_MSG_RESULT(perhaps)
      else
	AC_MSG_RESULT(no)
      fi
    fi
  fi
fi

if test x"$pike_cv_sys_os" = xWindows_NT ; then
  # FIXME: These look suspiciouly much like 32bit versions.
  #        We probably want to use 64bit versions on IA64.
  LDFLAGS="-lws2_32  $LDFLAGS"
fi


AC_OUTPUT(Makefile,echo FOO >stamp-h )

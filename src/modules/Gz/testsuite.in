START_MARKER
// $Id: testsuite.in,v 1.22 2007/06/09 23:54:57 nilsson Exp $

cond_resolv(Gz.deflate,
[[
  test_true(Gz.deflate())
  test_true(Gz.deflate()->deflate)
  test_true(Gz.inflate())
  test_true(Gz.inflate()->inflate)

define(dotest,[[
  test_do([[add_constant("____gz_tmp_constant",$1);]])
  test_true([[Gz.deflate(1)->deflate(____gz_tmp_constant)]])
  test_true([[Gz.inflate()->inflate(Gz.deflate(1)->deflate(____gz_tmp_constant))==____gz_tmp_constant]])
  test_true([[Gz.inflate()->inflate(Gz.deflate(9)->deflate(____gz_tmp_constant))==____gz_tmp_constant]])
  test_true([[object o=Gz.deflate(); Gz.inflate()->inflate(o->deflate(____gz_tmp_constant,o->PARTIAL_FLUSH) + o->deflate(____gz_tmp_constant,o->FINISH)) == (____gz_tmp_constant)+(____gz_tmp_constant)]])
  test_do([[add_constant("____gz_tmp_constant");]])
]])

  dotest("")
  dotest("foo")
  dotest(sprintf("%'fomp'1000n"))
  dotest(sprintf("%'fomp'100000n"))

  test_false(Process.system(RUNPIKE+" SRCDIR/flushtest.pike"))
  test_false(Process.system(RUNPIKE+" SRCDIR/buffertest.pike"))

  test_true(Gz.File)
  test_any([[
    string orig = ((string) Array.enumerate(256)) * 1024;
    object f = Gz.File("gz_test.gz", "wb");
    f->write(orig);
    f->close();
    f = Gz.File("gz_test.gz", "rb");
    rm("gz_test.gz");
    string readback = f->read();
    f->close();
    return orig==readback;
]], 1)

  dotest(random_string(32768))
  dotest(random_string(524288))

  test_eq(Gz.uncompress(Gz.compress("hello")),"hello")
  test_eq(Gz.uncompress(Gz.compress("")),"")
  test_eq(Gz.uncompress(Gz.compress("hello",1),1),"hello")
  test_eq(Gz.uncompress(Gz.compress("",1),1),"")
  test_eq(Gz.uncompress(Gz.compress("a test",0,0)),"a test")
  test_eq(Gz.uncompress(Gz.compress("a test",0,9)),"a test")
  test_eq(Gz.compress("a test",0,9,Gz.DEFAULT_STRATEGY),Gz.compress("a test",0,9))
  test_eq(Gz.uncompress(Gz.compress("a test",0,9,Gz.FILTERED)),"a test")
  test_eq(Gz.uncompress(Gz.compress("a test",0,9,Gz.HUFFMAN_ONLY)),"a test")
cond_resolv(Gz.RLE,
[[
  test_eq(Gz.uncompress(Gz.compress("a test",0,9,Gz.RLE)),"a test")
]])
cond_resolv(Gz.FIXED,
[[
  test_eq(Gz.uncompress(Gz.compress("a test",0,9,Gz.FIXED)),"a test")
]])
  test_eq(Gz.uncompress(Gz.compress("a test",0,9,Gz.DEFAULT_STRATEGY,8)),"a test")
  test_eq(Gz.uncompress(Gz.compress("a test",0,9,Gz.DEFAULT_STRATEGY,15)),"a test")

  test_eval_error(Gz.uncompress("");)
  test_eval_error(Gz.uncompress("x");)
  test_eval_error(Gz.uncompress(Gz.compress("x",1)))
  test_eval_error(Gz.uncompress(Gz.compress("x"),1))
  test_eval_error([[
int x = 1 + max(Gz.FILTERED, Gz.HUFFMAN_ONLY
#if constant(Gz.RLE)
Gz.RLE,
#endif
#if constant(Gz.FIXED)
Gz.FIXED,
#endif
);
return Gz.compress("x",0,9,x);
]])
  test_eval_error(return Gz.compress("x",0,-1);)
  test_eval_error(return Gz.compress("x",0,10);)
  test_eval_error(return Gz.compress("x",0,-1);)
  test_eval_error(return Gz.compress("x",0,9,Gz.DEFAULT_STRATEGY,7);)
  test_eval_error(return Gz.compress("x",0,9,Gz.DEFAULT_STRATEGY,16);)

]])
END_MARKER

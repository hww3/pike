START_MARKER
dnl tests for file module

test_true(programp(Stdio.File))
test_true(programp(Stdio.File))
test_true(objectp(Stdio.File()))
test_true(programp(Stdio.Port))
test_true(objectp(Stdio.Port()))
test_any(object o; o=Stdio.File(); destruct(o); return 1,1)

dnl - mkdir
test_any([[
  Stdio.Stat st = file_stat("/tmp");
  string prefix = (st && st->isdir)?"/tmp/":"";
  int pid = getpid();
  int i;
  prefix += "conftest_pike_dir_";
  for(i = 0; i < 32; i++) {
    string testdir = prefix + i;
    if (mkdir(testdir)) {
      add_constant("testdir", testdir + "/");
      add_constant("testfile", testdir + "/conftest");
      return 1;
    }
  }
  add_constant("testfile", "conftest");
  return 0;
]], 1)

dnl - file->open
dnl - file->close
test_any(object o=Stdio.File(); return o->open(testfile,"wct") && o->close(),1)
test_any([[
  Stdio.File o = Stdio.File();
  o->open ("file_that_doesnt_exist", "r");
  return o->errno();
]], System.ENOENT)
test_any([[
  Stdio.File o = Stdio.File();
  o->open ("file_in_dir/that_doesnt_exist", "r");
  return o->errno();
]], System.ENOENT)
test_any([[
  Stdio.File o = Stdio.File();
  o->open ("file_with_\fu\n\ny_cha\rs", "r");
  return o->errno();
]], System.ENOENT)

dnl - file_stat
test_eq(file_stat(testfile)[1],0)

dnl - filesystem_stat
dnl - rm
test_true(rm(testfile))
test_eq(file_stat(testfile),0)

dnl - file->write
test_any(int e; object o=Stdio.File(); if(!o->open(testfile,"wct")) return "open"+o->errno(); e=o->write("sune"); if(!o->close()) return "close"+o->errno(); return e,4)

dnl - file->read
test_any(string s; object o=Stdio.File(); if(!o->open(testfile,"r")) return "open"+o->errno(); s=o->read(4); if(!o->close()) return "close"+o->errno(); return s,"sune")

test_any(string s; object o=Stdio.File(); if(!o->open(testfile,"r")) return "open"+o->errno(); s=o->read(999999); if(!o->close()) return "close"+o->errno(); return s,"sune")

test_any(int e; object o=Stdio.File(); if(!o->open(testfile,"wct")) return "open"+o->errno(); e=o->write(sprintf("%'+-*'100000s","")); if(!o->close()) return "close"+o->errno(); return e,100000)

test_any(string s; object o=Stdio.File(); if(!o->open(testfile,"r")) return "open"+o->errno(); s=o->read(9999999); if(!o->close()) return "close"+o->errno(); return s,sprintf("%'+-*'100000s",""))

cond_begin([[ Stdio.File()->proxy ]])

  test_any([[string s; object o2,o3,o=Stdio.File(); if(!o->open(testfile,"r")) return "open"+o->errno(); o2=Stdio.File(); o3=o2->pipe(); o2->proxy(o); destruct(o2); s=o3->read(100000); return s]],sprintf("%'+-*'100000s",""))
  test_any([[string s; object o2,o3,o=Stdio.File(); if(!o->open(testfile,"r")) return "open"+o->errno(); o2=Stdio.File(); o3=o2->pipe(); o2->proxy(o); destruct(o2); s=o3->read(9999999); return s]],sprintf("%'+-*'100000s",""))
  test_any([[string s; object o2,o3,o=Stdio.File(); if(!o->open(testfile,"r")) return "open"+o->errno(); o2=Stdio.File(); o3=o2->pipe(); o2->proxy(o); o2=0; s=o3->read(9999999); return s]],sprintf("%'+-*'100000s",""))

test_any([[
  object o2,o=Stdio.File(); o2=o->pipe();
  object x2,x=Stdio.File(); x2=x->pipe();
  
 x2->proxy(o);
 x2=0;
 switch(o2->write("test"))
 {
   case 4: break;
   default: return "Write failed";
   case 0: return "Write failed with errno "+o2->errno()+".\n";
 }

 o2=0;
 return x->read() || ("errno:"+x->errno());
]],"test")

test_any([[
  object o2,o=Stdio.File(); o2=o->pipe(Stdio.PROP_IPC);
  object x2,x=Stdio.File(); x2=x->pipe();
  
 x2->proxy(o);
 x2=0;
 switch(o2->write("test"))
 {
   case 4: break;
   default: return "Write failed";
   case 0: return "Write failed with errno "+o2->errno()+".\n";
 }
 o2=0;
 return x->read() || ("errno:"+x->errno());
]],"test")

test_any([[
  object o2,o=Stdio.File(); o2=o->pipe();
  object x2,x=Stdio.File(); x2=x->pipe(Stdio.PROP_IPC);
  
 x2->proxy(o);
 x2=0;
 switch(o2->write("test"))
 {
   case 4: break;
   default: return "Write failed";
   case 0: return "Write failed with errno "+o2->errno()+".\n";
 }
 o2=0;
 return x->read() || ("errno:"+x->errno());
]],"test")

test_any([[
  object o2,o=Stdio.File(); o2=o->pipe(Stdio.PROP_IPC);
  object x2,x=Stdio.File(); x2=x->pipe(Stdio.PROP_IPC);
  
 x2->proxy(o);
 x2=0;
 switch(o2->write("test"))
 {
   case 4: break;
   default: return "Write failed";
   case 0: return "Write failed with errno "+o2->errno()+".\n";
 }
 o2=0;
 return x->read() || ("errno:"+x->errno());
]],"test")

cond_end // Stdio.File()->proxy


test_any([[object o,o2=Stdio.File(); o=o2->pipe(); destruct(o2); return o->read()]],"")
test_any([[object o,o2=Stdio.File(); o=o2->pipe(); o2=0; return o->read()]],"")

test_any([[object o,o2=Stdio.File(); o=o2->pipe(Stdio.PROP_IPC); destruct(o); return o2->read() || ("error:"+o2->errno())]],"")
test_any([[object o,o2=Stdio.File(); o=o2->pipe(Stdio.PROP_IPC); o=0; return o2->read() || ("error:"+o2->errno())]],"")


dnl - file->seek
dnl - file->tell
test_any(object o=Stdio.File(); return o->open(testfile,"r") && o->read(4711) && o->tell() == 4711 && o->close(),1)

dnl - file->stat
test_equal([[Stdio.File(testfile,"r")->stat()[..1]]],[[file_stat(testfile)[..1]]])

dnl - file->errno
test_do(Stdio.File("stdin")->errno())

dnl - file->set_nonblocking
dnl - file->set_blocking
dnl - file->set_id
dnl - file->query_id
test_false(Stdio.File("stdin")->query_id())

dnl - File->query_read_callback
test_do(Stdio.File("stdin")->query_read_callback())

dnl - file->query_write_callback
test_do(Stdio.File("stdin")->query_write_callback())

dnl - file->query_close_callback
test_do(Stdio.File("stdin")->query_close_callback())

dnl - file->open_socket
dnl - file->connect
dnl - file->query_address
dnl - file->pipe
test_any([[object o=Stdio.File(),o2=o->pipe();o->write("1"); return o2->read(1)]],"1")
test_any([[object o=Stdio.File(),o2=o->pipe();o2->write("1"); return o->read(1)]],"1")

dnl - file->dup
test_any([[object o=Stdio.File(); o->open(testfile,"r"); o=o->dup(); return o->read(100)]] ,sprintf("%'+-*'100s",""))

dnl - file->assign
test_any([[object o=Stdio.File(),o2=Stdio.File(); o->open(testfile,"r"); o2->assign(o); return o2->read(100)]] ,sprintf("%'+-*'100s",""))

dnl - file->dup2
test_any([[object o=Stdio.File(),o2=Stdio.File(); o2->pipe(); o->open(testfile,"r"); o->dup2(o2); return o2->read(100)]] ,sprintf("%'+-*'100s",""))

dnl test_eq(Process.popen("echo foo"),"foo\n")

dnl - socket->bind
dnl - socket->set_id
dnl - socket->query_id
dnl - socket->errno
dnl - socket->accept

test_true(rm(testfile))
test_eq(file_stat(testfile),0)

test_any(object o=Stdio.File(); return o->open(testfile,"wac") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],1)
test_any(object o=Stdio.File(); return o->open(testfile,"wa") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],2)
test_any(object o=Stdio.File(); return o->open(testfile,"wac") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],3)
test_any(object o=Stdio.File(); return o->open(testfile,"wa") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],4)
test_any(object o=Stdio.File(); return o->open(testfile,"wa") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],5)
test_any(object o=Stdio.File(); return o->open(testfile,"war") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],6)
test_any(object o=Stdio.File(); return o->open(testfile,"wrac") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],7)
test_any(object o=Stdio.File(); return o->open(testfile,"wac") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],8)
test_any(object o=Stdio.File(); return o->open(testfile,"wrac") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],9)
test_any(object o=Stdio.File(); return o->open(testfile,"wrac") && o->write("x") && o->close(),1)
test_eq(file_stat(testfile)[1],10)
test_true(rm(testfile))
test_eq(file_stat(testfile),0)

dnl - file_stat
dnl - perror
dnl - rm
dnl - mkdir
dnl - get_dir
test_true(arrayp(get_dir()))
test_true(arrayp(get_dir(".")))

dnl - cd
dnl - getcwd
test_true(stringp(getcwd()))

dnl strerror
cond([[all_constants()->strerror]],
[[
test_do(return strerror(1))
test_true(stringp(strerror(2)||""))
]])


test_do(object o=Stdio.File(); if(!o->open(testfile,"wct")) return -1; o->write("foo\n" * 100); o->close();)

dnl Stdio.FILE
test_any([[object o=Stdio.FILE(); o->open(testfile,"r"); return o->gets()]],"foo")
test_any(object o=Stdio.FILE(); o->open(testfile,"r"); return o->gets()+o->gets()+o->gets(),"foofoofoo")
test_any(int e; object o=Stdio.FILE(); o->open(testfile,"r"); for(e=0;e<100;e++) if(o->gets() != "foo") return e; return -1,-1)

test_true(Stdio.stdin)
test_true(Stdio.stdout)
test_true(Stdio.stderr)

test_eq(Stdio.read_file(testfile,0,5), "foo\n"*5)
test_eq(Stdio.read_file(testfile,1,5), "foo\n"*5))
test_eq(Stdio.read_file(testfile,100,5),"")

dnl locking
cond_begin([[Stdio.File()->lock]])

  dnl FIXME: It seems MacOS X has a flock(2) that always fails with ENOTSUP.
  test_true(Stdio.File(testfile,"wr")->lock()&&1)
  test_true(Stdio.File(testfile,"wr")->trylock()&&1)
  test_true(Stdio.File(testfile,"wr")->trylock()&&1)
  test_eval_error([[
    mixed o=Stdio.File(testfile,"wr");
    objekt k=o->lock();
    o->lock();
  ]])
  test_any([[
    mixed o=Stdio.File(testfile,"wr");
    object k = o->lock();
    return o->trylock();
  ]], 0)
  test_true(Stdio.File(testfile,"wr")->lock()&&1)

cond_end // Stdio.File()->lock

dnl pty handling

cond([[ Stdio.File()->openpt ]],
[[
    test_true(Stdio.File()->openpt("rw"));
]])

cond([[ Stdio.File()->openpt && Stdio.File()->grantpt ]],
[[
    test_any([[
      Stdio.File p = Stdio.File();
      return p->openpt("rw") && stringp(p->grantpt());
    ]], 1)
]])

test_true(rm(testfile))

test_do(add_constant("testfile"));

cond([[ all_constants()->testdir ]],
[[
  test_true(rm(testdir));
  test_do(add_constant("testdir"));
]])

define(run_sub_test, [[
  test_any([[
    array(string) args = $1;
    Process.Process proc = Process.create_process(RUNPIKE_ARRAY + args);
    __watchdog_new_pid (proc->pid());
    int code = proc->wait();
    __watchdog_new_pid (getpid());
    if (!code) return 0;
    if (code == -1) {
      return sprintf("Test program %O died of signal %d.",
		     args, proc->last_signal());
    }
    return sprintf("Test program %O exited with code %d.",
		   args, code);
  ]], 0)
]])

run_sub_test(({"SRCDIR/socktest.pike"}))

run_sub_test(({"-DIPV6", "SRCDIR/socktest.pike"}))

run_sub_test(({"-DBACKEND=SelectBackend", "SRCDIR/socktest.pike"}))

run_sub_test(({"-DBACKEND=SelectBackend", "-DIPV6", "SRCDIR/socktest.pike"}))

cond_begin([[ Pike["PollBackend"] ]])
  run_sub_test(({"-DBACKEND=PollBackend", "SRCDIR/socktest.pike"}))

  run_sub_test(({"-DBACKEND=PollBackend", "-DIPV6", "SRCDIR/socktest.pike"}))
cond_end

cond_begin([[ Pike["PollDeviceBackend"] ]])
  run_sub_test(({"-DBACKEND=PollDeviceBackend", "SRCDIR/socktest.pike"}))

  run_sub_test(({"-DBACKEND=PollDeviceBackend", "-DIPV6", "SRCDIR/socktest.pike"}))
cond_end

run_sub_test(({"SRCDIR/sendfiletest.pike"}))

run_sub_test(({"-DTEST_NORMAL", "SRCDIR/connecttest.pike"}))
run_sub_test(({"SRCDIR/connecttest.pike"}))

dnl Stdio.Stat

test_any([[
  // This actually tests the bignum/64 bit stuff.
  Stdio.Stat s = Stdio.Stat();
  s->size = 0x100000000;
  if (s->size != 0x100000000) {
    werror ("Note: 64 bit file stats apparently not supported on this system.\n");
    return 1;
  }
  s->size = -0x100000000;
  return s->size == -0x100000000;
]], 1)

test_any([[
  Stdio.File f = Stdio.File();
  return f->query_backend() == Pike.DefaultBackend;
]], 1)

test_any([[
  Pike.Backend b = Pike.Backend();
  Stdio.File f = Stdio.File();
  f->set_backend (b);
  return f->query_backend() == b;
]], 1)

test_any([[
  Stdio.Port f = Stdio.Port();
  return f->query_backend() == Pike.DefaultBackend;
]], 1)

test_any([[
  Pike.Backend b = Pike.Backend();
  Stdio.Port f = Stdio.Port();
  f->set_backend (b);
  return f->query_backend() == b;
]], 1)
END_MARKER

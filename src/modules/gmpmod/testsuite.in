// mpz
cond( [[ master()->programs["/precompiled/mpz"] ]],
[[
  define([[MPZ]],[[(program)"/precompiled/mpz"]])
  test_true(programp(MPZ))
  test_false(clone(MPZ))
  test_do(destruct(clone(MPZ)))
  test_eq(clone(MPZ,99)+1,100)
  test_eq(clone(MPZ,100)*10,1000)
  test_eq(clone(MPZ,"100")*10.0,1000)
  test_eq(clone(MPZ,100.0)*clone(MPZ,3),300)
  test_eq(clone(MPZ,100.0)/4,25)
  test_eq(clone(MPZ,42)%10,2)
  test_eq(clone(MPZ,10)<<1,20)
  test_eq(clone(MPZ,10)>>1,5)
  test_eq(clone(MPZ,66)+11,77)
  test_eq(clone(MPZ,66)-11,55)
  test_eq(clone(MPZ,17)&18,16)
  test_eq(clone(MPZ,17)|7,31)
  test_eq(-clone(MPZ,17),17)
  test_eq((~clone(MPZ,17)) & 255,0xf0)
  test_true(stringp((string)clone(MPZ,17)))
  test_eq((string)clone(MPZ,17),"17")
  test_true(intp((int)clone(MPZ,17)))
  test_eq((int)clone(MPZ,17),17)
  test_false(clone(MPZ,0))
  test_true(clone(MPZ,1))
  test_eq(clone(MPZ,17)->powm(2,4711),290)

  define([[mpz_test_cmp]],[[
    test_cmp(clone(MPZ,$1), $2)
    test_cmp($1, clone(MPZ,$2))
    test_cmp(clone(MPZ, $1), clone(MPZ, $2))
  ]])

  define([[mpz_test_type1]],[[
    mpz_test_cmp($1,$2)
    mpz_test_cmp($1.0,$2)
    mpz_test_cmp("$1",$2)
  ]])

  define([[mpz_test_type2]],[[
    mpz_test_type1($1,$2)
    mpz_test_type1($1,$2.0)
    mpz_test_type1($1,"$2")
  ]])

  mpz_test_type2(1,2)
  mpz_test_type2(-2,1)

]]);


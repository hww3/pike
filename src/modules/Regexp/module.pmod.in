#pike __REAL_VERSION__
#define ERR(msg) throw(({ "(Regexp) "+sprintf msg+"\n", backtrace() }))

class Regexp
{
  inherit @module@;

  static private object repreg;
  static private string regexp_string;

  /* Semi-optimal speed, yes, I agree, but it should work. */
  string replace(string in, string|function(string:string) transform)
  {
    if(!repreg)
      repreg = object_program(this_object())("("+regexp_string+")");

    for(string result = ""; ; )
    {
      if(!sizeof(in))
	return result;

      array a = repreg->split(in);
       
      if(!a)
	return result + in;

      int i = search(in, a[0]);

      if(i == -1)
	ERR(("Split resulted in unknown substring %O of %O.", a[0], in));
       
      result += in[..i-1]+(functionp(transform)?transform(a[0]):transform);
      in = in[i+sizeof(a[0])..];
    }
  }
  
  void create(string|void _regexp_string)
  {
    regexp_string = _regexp_string;
  
    if(query_num_arg())
      ::create(regexp_string);
    else
      ::create();
  }

  string _sprintf(int t)
  {
    switch(t)
    {
      case 'O':
	return sprintf("Regexp(%O)", regexp_string);

      case 's':
	return regexp_string;
    }
    return 0;
  }

  mixed _encode() { return regexp_string; }
  mixed _decode(string s) { create(s); }
}

program _module_value=Regexp;

// -*- Pike -*-

#pike __REAL_VERSION__
//! @ignore
static private inherit @module@;
//! @endignore

//! @appears Locale.Charset
//! The Charset module supports a wide variety of different character sets, and
//! it is flexible in regard of the names of character sets it accepts. The
//! character case is ignored, as are the most common non-alaphanumeric
//! characters appearing in character set names. E.g. @expr{"iso-8859-1"@}
//! works just as well as @expr{"ISO_8859_1"@}. All encodings specified in
//! RFC 1345 are supported.
//!
//! First of all the Charset module is capable of handling the following
//! encodings of Unicode:
//!
//! @ul
//!   @item utf7
//!   @item utf8
//!   @item utf16
//!   @item utf16be
//!   @item utf16le
//!   @item utf75
//!   @item utf7½
//!     UTF encodings
//!   @item shiftjis
//!   @item euc-kr
//!   @item euc-cn
//!   @item euc-jp
//! @endul
//!
//! Most, if not all, of the relevant code pages are represented, as the
//! following list shows. Prefix the numbers as noted in the list to get
//! the wanted codec:
//!
//! @ul
//!   @item 037
//!   @item 038
//!   @item 273
//!   @item 274
//!   @item 275
//!   @item 277
//!   @item 278
//!   @item 280
//!   @item 281
//!   @item 284
//!   @item 285
//!   @item 290
//!   @item 297
//!   @item 367
//!   @item 420
//!   @item 423
//!   @item 424
//!   @item 437
//!   @item 500
//!   @item 819
//!   @item 850
//!   @item 851
//!   @item 852
//!   @item 855
//!   @item 857
//!   @item 860
//!   @item 861
//!   @item 862
//!   @item 863
//!   @item 864
//!   @item 865
//!   @item 866
//!   @item 868
//!   @item 869
//!   @item 870
//!   @item 871
//!   @item 880
//!   @item 891
//!   @item 903
//!   @item 904
//!   @item 905
//!   @item 918
//!   @item 950
//!   @item 1026
//!     These may be prefixed with @expr{"cp"@} or @expr{"ibm"@}.
//!   @item 1250
//!   @item 1251
//!   @item 1252
//!   @item 1253
//!   @item 1254
//!   @item 1255
//!   @item 1256
//!   @item 1257
//!   @item 1258
//!     These may be prefixed with @expr{"cp"@}, @expr{"ibm"@} or
//!     @expr{"windows"@}.
//! @endul
//!
//! +359 more.

//! Virtual base class for charset decoders.
//! @example
//!   string utf8_to_string( string data )
//!   {
//!     object deutf8 = Locale.Charset.decoder("utf-8");
//!     return deutf8->clear()->feed( data )->drain();
//!   }
class Decoder
{
  //! Feeds a string to the decoder.
  //!
  //! @param s
  //!   String to be decoded.
  //!
  //! @returns
  //!   Returns the current object, to allow for chaining
  //!   of calls.
  this_program feed(string s);

  //! Get the decoded data, and reset buffers.
  //!
  //! @returns
  //!   Returns the decoded string.
  string drain();

  //! Clear buffers, and reset all state.
  //!
  //! @returns
  //!   Returns the current object to allow for chaining
  //!   of calls.
  this_program clear();
}

//! Virtual base class for charset encoders.
class Encoder
{
  //! An encoder only differs from a decoder in that it has an extra function.
  inherit Decoder;

  //! Change the replacement callback function.
  //!
  //! @param rc
  //!   Function that is called to encode characters
  //!   outside the current character encoding.
  void set_replacement_callback(function(string:string) rc);
}

private class ASCIIDec {
  static private string s = "";
  this_program feed(string ss)
  {
    s += ss;
    return this_object();
  }
  string drain()
  {
    string ss = s;
    s = "";
    return ss;
  }
  this_program clear()
  {
    s = "";
    return this_object();
  }
}

private class UTF16dec {
  inherit ASCIIDec;
  static int check_bom=1, le=0;
  string drain() {
    string s = ::drain();
    if(sizeof(s)&1) {
      feed(s[sizeof(s)-1..]);
      s = s[..sizeof(s)-2];
    }
    if(check_bom && sizeof(s))
      switch(s[..1]) {
       case "\xfe\xff":
       case "\xff\xfe":
	 le=(s[0]==0xff);
	 s=s[2..];
       default:
	 check_bom=0;
      }
    if(le)
      s = map(s/2, reverse)*"";
    return unicode_to_string(s);
  }
}

private class UTF16LEdec {
  inherit UTF16dec;
  static void create() { le=1; }
}

private string normalize(string in) {
  if(!in) return 0;
  string out = replace(lower_case(in),
		      ({ "_",".",":","-","(",")" }),
		      ({ "","","","","","" }));

  if( (out=="isoir91" || out=="isoir92") && in[-2]!='9')
    return sprintf("%s-%c", out[..sizeof(out)-2], out[-1]);

  sscanf(out, "cs%s", out);

  if(sscanf(out, "cp%d", int cp))
    return (string)cp;
  if(sscanf(out, "ibm%d", int cp))
    return (string)cp;
  if(sscanf(out, "ccsid%d", int cp))
    return (string)cp;
  return out;
}

//! Returns a charset decoder object.
//! @param name
//!   The name of the character set to decode from. Supported charsets
//!   include (not all supported charsets are enumerable):
//!   "iso_8859-1:1987", "iso_8859-1:1998", "iso-8859-1", "iso-ir-100",
//!   "latin1", "l1", "ansi_x3.4-1968", "iso_646.irv:1991", "iso646-us",
//!   "iso-ir-6", "us", "us-ascii", "ascii", "cp367", "ibm367", "cp819",
//!   "ibm819", "iso-2022" (of various kinds), "utf-7", "utf-8" and
//!   various encodings as described by RFC1345.
//! @throws
//!   If the asked-for @[name] was not supported, an error is thrown.
Decoder decoder(string name)
{
  name = normalize(name);
  if(!name || (<
    "iso885911987", "iso885911998", "iso88591", "isoir100",
    "latin1", "l1", "ansix341968", "iso646irv1991", "iso646us",
    "isoir6", "us", "usascii", "ascii", "367", "819",
    "isolatin1">)[name])
    return ASCIIDec();

  if(has_prefix(name, "iso2022"))
    return ISO2022Dec();

  program p = ([
    "utf7": UTF7dec,
    "utf8": UTF8dec,
    "utf16": UTF16dec,
    "utf16be": UTF16dec,
    "utf16le": UTF16LEdec,
    "utf75": UTF7_5dec,
    "utf7½": UTF7_5dec,
    "shiftjis": ShiftJisDec,
    "mskanji": ShiftJisDec,
  ])[name];

  if(p)
    return p();

  if(has_prefix(name, "euc")) {
    string sub = ([
      "kr":"korean",
      "jp":"x0208",
      "cn":"chinese",
    ])[name[3..]];

    if(sub)
      return EUCDec(sub);
  }

  if( (< "extendedunixcodepackedformatforjapanese",
	 "eucpkdfmtjapanese" >)[ name ] )
    return EUCDec("x0208");

  Decoder o = rfc1345(name);

  if(o)
    return o;

  error("Unknown character encoding "+name+"\n");
}

private class ASCIIEnc
{
  static string s = "";
  static string|void replacement;
  static function(string:string)|void repcb;
  static string low_convert(string s, string|void r,
			     function(string:string)|void rc)
  {
    int i = sizeof(s);
    string rr;
    while(--i>=0)
      if(s[i]>255)
	if(rc && (rr = rc(s[i..i])))
	  s=s[..i-1]+low_convert(rr,r)+s[i+1..];
	else if(r)
	  s=s[..i-1]+low_convert(r)+s[i+1..];
	else
	  error("Character unsupported by encoding.\n");
    return s;
  }
  this_program feed(string ss)
  {
    s += low_convert(ss, replacement, repcb);
    return this_object();
  }
  string drain()
  {
    string ss = s;
    s = "";
    return ss;
  }
  this_program clear()
  {
    s = "";
    return this_object();
  }
  void set_replacement_callback(function(string:string) rc)
  {
    repcb = rc;
  }
  static void create(string|void r, string|void rc)
  {
    replacement = r;
    repcb = rc;
  }
}

private class UTF16enc {
  inherit ASCIIEnc;
  static private string low_convert(string s, string|void r,
				    function(string:string)|void rc)
  {
    int i = sizeof(s);
    string rr;
    while(--i>=0)
      if(s[i]>0x10ffff)
	if(rc && (rr = rc(s[i..i])))
	  s=s[..i-1]+low_convert(rr,r)+s[i+1..];
	else if(r)
	  s=s[..i-1]+low_convert(r)+s[i+1..];
	else
	  error("Character unsupported by encoding.\n");
    return s;
  }
  this_program feed(string ss) {
    s += ss;
    return this_object();
  }
  string drain() {
    string ss = s;
    s = "";
    catch {
      return string_to_unicode(ss);
    };
    ss = low_convert(ss, replacement, repcb);
    return string_to_unicode(ss);
  }
}

private class UTF16LEenc {
  inherit UTF16enc;
  string drain() {
    return map(::drain()/2, reverse)*"";
  }
}

//! Returns a charset encoder object.
//!
//! @param name
//!   The name of the character set to encode to. Supported charsets
//!   include (not all supported charsets are enumerable):
//!   "iso_8859-1:1987", "iso_8859-1:1998", "iso-8859-1", "iso-ir-100",
//!   "latin1", "l1", "ansi_x3.4-1968", "iso_646.irv:1991", "iso646-us",
//!   "iso-ir-6", "us", "us-ascii", "ascii", "cp367", "ibm367", "cp819",
//!   "ibm819", "iso-2022" (of various kinds), "utf-7", "utf-8" and
//!   various encodings as described by RFC1345.
//!
//! @param replacement
//!   The string to use for characters that cannot be represented in
//!   the charset. It's used when @[repcb] is not given or when it returns
//!   zero. If no replacement string is given then an error is thrown
//!   instead.
//!
//! @param repcb
//!   A function to call for every character that cannot be
//!   represented in the charset. If specified it's called with one
//!   argument - a string containing the character in question. If it
//!   returns a string then that one will replace the character in the
//!   output. If it returns something else then the @[replacement]
//!   argument will be used to decide what to do.
//!
//! @throws
//!   If the asked-for @[name] was not supported, an error is thrown.
Encoder encoder(string name, string|void replacement,
		function(string:string)|void repcb)
{
  name = normalize(name);
  if(!name || (<
    "iso885911987", "iso885911998", "iso88591", "isoir100",
    "latin1", "l1", "ansix341968", "iso646irv1991", "iso646us",
    "isoir6", "us", "usascii", "ascii", "367", "819",
    "isolatin1">)[name])
    return ASCIIEnc(replacement, repcb);

  if(has_prefix(name, "iso2022"))
    return ISO2022Enc(replacement, repcb);

  program p = ([
    "utf7": UTF7enc,
    "utf8": UTF8enc,
    "utf16": UTF16enc,
    "utf16be": UTF16enc,
    "utf16le": UTF16LEenc,
    "utf75": UTF7_5enc,
    "utf7½": UTF7_5enc,
    "shiftjis": ShiftJisEnc,
    "mskanji": ShiftJisEnc,
  ])[name];

  if(p)
    return p(replacement, repcb);

  if(has_prefix(name, "euc")) {
    string sub = ([
      "kr":"korean",
      "jp":"x0208",
      "cn":"chinese",
    ])[name[3..]];

    if(sub)
      return EUCEnc(sub, replacement, repcb);
  }

  if( (< "extendedunixcodepackedformatforjapanese",
	 "eucpkdfmtjapanese" >)[ name ] )
    return EUCEnc("x0208", replacement, repcb);

  Encoder o = rfc1345(name, 1, replacement, repcb);

  if(o)
    return o;

  error("Unknown character encoding "+name+"\n");
}


static constant MIBenum = ([
  3:"ANSI_X3.4-1968",
  4:"ISO_8859-1:1987",
  5:"ISO_8859-2:1987",
  6:"ISO_8859-3:1988",
  7:"ISO_8859-4:1988",
  8:"ISO_8859-5:1988",
  9:"ISO_8859-6:1987",
  10:"ISO_8859-7:1987",
  11:"ISO_8859-8:1988",
  12:"ISO_8859-9:1989",
  13:"ISO-8859-10",
  14:"ISO_6937-2-add",
  15:"JIS_X0201",
  16:"JIS_Encoding",
  17:"Shift_JIS",
  18:"Extended_UNIX_Code_Packed_Format_for_Japanese",
  19:"Extended_UNIX_Code_Fixed_Width_for_Japanese",
  20:"BS_4730",
  21:"SEN_850200_C",
  22:"IT",
  23:"ES",
  24:"DIN_66003",
  25:"NS_4551-1",
  26:"NF_Z_62-010",
  27:"ISO-10646-UTF-1",
  28:"ISO_646.basic:1983",
  29:"INVARIANT",
  30:"ISO_646.irv:1983",
  31:"NATS-SEFI",
  32:"NATS-SEFI-ADD",
  33:"NATS-DANO",
  34:"NATS-DANO-ADD",
  35:"SEN_850200_B",
  36:"KS_C_5601-1987",
  37:"ISO-2022-KR",
  38:"EUC-KR",
  39:"ISO-2022-JP",
  40:"ISO-2022-JP-2",
  41:"JIS_C6220-1969-jp",
  42:"JIS_C6220-1969-ro",
  43:"PT",
  44:"greek7-old",
  45:"latin-greek",
  46:"NF_Z_62-010_(1973)",
  47:"Latin-greek-1",
  48:"ISO_5427",
  49:"JIS_C6226-1978",
  50:"BS_viewdata",
  51:"INIS",
  52:"INIS-8",
  53:"INIS-cyrillic",
  54:"ISO_5427:1981",
  55:"ISO_5428:1980",
  56:"GB_1988-80",
  57:"GB_2312-80",
  58:"NS_4551-2",
  59:"videotex-suppl",
  60:"PT2",
  61:"ES2",
  62:"MSZ_7795.3",
  63:"JIS_C6226-1983",
  64:"greek7",
  65:"ASMO_449",
  66:"iso-ir-90",
  67:"JIS_C6229-1984-a",
  68:"JIS_C6229-1984-b",
  69:"JIS_C6229-1984-b-add",
  70:"JIS_C6229-1984-hand",
  71:"JIS_C6229-1984-hand-add",
  72:"JIS_C6229-1984-kana",
  73:"ISO_2033-1983",
  74:"ANSI_X3.110-1983",
  75:"T.61-7bit",
  76:"T.61-8bit",
  77:"ECMA-cyrillic",
  78:"CSA_Z243.4-1985-1",
  79:"CSA_Z243.4-1985-2",
  80:"CSA_Z243.4-1985-gr",
  81:"ISO_8859-6-E",
  82:"ISO_8859-6-I",
  83:"T.101-G2",
  84:"ISO_8859-8-E",
  85:"ISO_8859-8-I",
  86:"CSN_369103",
  87:"JUS_I.B1.002",
  88:"IEC_P27-1",
  89:"JUS_I.B1.003-serb",
  90:"JUS_I.B1.003-mac",
  91:"greek-ccitt",
  92:"NC_NC00-10:81",
  93:"ISO_6937-2-25",
  94:"GOST_19768-74",
  95:"ISO_8859-supp",
  96:"ISO_10367-box",
  97:"latin-lap",
  98:"JIS_X0212-1990",
  99:"DS_2089",
  100:"us-dk",
  101:"dk-us",
  102:"KSC5636",
  103:"UNICODE-1-1-UTF-7",
  104:"ISO-2022-CN",
  105:"ISO-2022-CN-EXT",
  106:"UTF-8",
  109:"ISO-8859-13",
  110:"ISO-8859-14",
  111:"ISO-8859-15",
  112:"ISO-8859-16",
  113:"GBK",
  114:"GB18030",
  1000:"ISO-10646-UCS-2",
  1001:"ISO-10646-UCS-4",
  1002:"ISO-10646-UCS-Basic",
  1003:"ISO-10646-Unicode-Latin1",
  1005:"ISO-Unicode-IBM-1261",
  1006:"ISO-Unicode-IBM-1268",
  1007:"ISO-Unicode-IBM-1276",
  1008:"ISO-Unicode-IBM-1264",
  1009:"ISO-Unicode-IBM-1265",
  1010:"UNICODE-1-1",
  1011:"SCSU",
  1012:"UTF-7",
  1013:"UTF-16BE",
  1014:"UTF-16LE",
  1015:"UTF-16",
  1016:"CESU-8",
  1017:"UTF-32",
  1018:"UTF-32BE",
  1019:"UTF-32LE",
  1020:"BOCU-1",
  2000:"ISO-8859-1-Windows-3.0-Latin-1",
  2001:"ISO-8859-1-Windows-3.1-Latin-1",
  2002:"ISO-8859-2-Windows-Latin-2",
  2003:"ISO-8859-9-Windows-Latin-5",
  2004:"hp-roman8",
  2005:"Adobe-Standard-Encoding",
  2006:"Ventura-US",
  2007:"Ventura-International",
  2008:"DEC-MCS",
  2009:"IBM850",
  2010:"IBM852",
  2011:"IBM437",
  2012:"PC8-Danish-Norwegian",
  2013:"IBM862",
  2014:"PC8-Turkish",
  2015:"IBM-Symbols",
  2016:"IBM-Thai",
  2017:"HP-Legal",
  2018:"HP-Pi-font",
  2019:"HP-Math8",
  2020:"Adobe-Symbol-Encoding",
  2021:"HP-DeskTop",
  2022:"Ventura-Math",
  2023:"Microsoft-Publishing",
  2024:"Windows-31J",
  2025:"GB2312",
  2026:"Big5",
  2027:"macintosh",
  2028:"IBM037",
  2029:"IBM038",
  2030:"IBM273",
  2031:"IBM274",
  2032:"IBM275",
  2033:"IBM277",
  2034:"IBM278",
  2035:"IBM280",
  2036:"IBM281",
  2037:"IBM284",
  2038:"IBM285",
  2039:"IBM290",
  2040:"IBM297",
  2041:"IBM420",
  2042:"IBM423",
  2043:"IBM424",
  2044:"IBM500",
  2045:"IBM851",
  2046:"IBM855",
  2047:"IBM857",
  2048:"IBM860",
  2049:"IBM861",
  2050:"IBM863",
  2051:"IBM864",
  2052:"IBM865",
  2053:"IBM868",
  2054:"IBM869",
  2055:"IBM870",
  2056:"IBM871",
  2057:"IBM880",
  2058:"IBM891",
  2059:"IBM903",
  2060:"IBM904",
  2061:"IBM905",
  2062:"IBM918",
  2063:"IBM1026",
  2064:"EBCDIC-AT-DE",
  2065:"EBCDIC-AT-DE-A",
  2066:"EBCDIC-CA-FR",
  2067:"EBCDIC-DK-NO",
  2068:"EBCDIC-DK-NO-A",
  2069:"EBCDIC-FI-SE",
  2070:"EBCDIC-FI-SE-A",
  2071:"EBCDIC-FR",
  2072:"EBCDIC-IT",
  2073:"EBCDIC-PT",
  2074:"EBCDIC-ES",
  2075:"EBCDIC-ES-A",
  2076:"EBCDIC-ES-S",
  2077:"EBCDIC-UK",
  2078:"EBCDIC-US",
  2079:"UNKNOWN-8BIT",
  2080:"MNEMONIC",
  2081:"MNEM",
  2082:"VISCII",
  2083:"VIQR",
  2084:"KOI8-R",
  2085:"HZ-GB-2312",
  2086:"IBM866",
  2087:"IBM775",
  2088:"KOI8-U",
  2089:"IBM00858",
  2090:"IBM00924",
  2091:"IBM01140",
  2092:"IBM01141",
  2093:"IBM01142",
  2094:"IBM01143",
  2095:"IBM01144",
  2096:"IBM01145",
  2097:"IBM01146",
  2098:"IBM01147",
  2099:"IBM01148",
  2100:"IBM01149",
  2101:"Big5-HKSCS",
  2102:"IBM1047",
  2103:"PTCP154",
  2250:"windows-1250",
  2251:"windows-1251",
  2252:"windows-1252",
  2253:"windows-1253",
  2254:"windows-1254",
  2255:"windows-1255",
  2256:"windows-1256",
  2257:"windows-1257",
  2258:"windows-1258",
  2259:"TIS-620"
]);

//! Returns a decoder for the encoding schema denoted by MIB @[mib].
Decoder decoder_from_mib(int mib) {
  Decoder d=MIBenum[mib] && decoder(MIBenum[mib]);
  if(!d) error("Unknown mib %d.\n", mib);
  return d;
}

//! Returns an encoder for the encoding schema denoted by MIB @[mib].
Encoder encoder_from_mib(int mib,  string|void replacement,
			 function(string:string)|void repcb) {
  Encoder e=MIBenum[mib] && encoder(MIBenum[mib], replacement, repcb);
  if(!e) error("Unknown mib %d.\n", mib);
  return e;
}

#
# $Id: dynamic_module_makefile.in,v 1.115 2004/04/17 15:18:52 marcus Exp $
#

LIBGCC=@LIBGCC@
LC_REQ=@LC_REQ@

LINKAGE_CPPFLAGS=
LINKAGE_CFLAGS=@CCSHARED@

MODULE_PROGRAM=.$(MODULE_WRAPPER_PREFIX)$(MODNAME)
MODULE_TARGET=$(TMP_MODULE_BASE)/$(MODDIR)$(MODULE_WRAPPER_PREFIX)$(MODNAME).so


@common_module_makefile@

linker_options: Makefile
	@if test "x$(LINKER_OPTIONS)" != x ; then \
	  echo "LINKER_OPTIONS+=$(LINKER_OPTIONS)" ; \
	else : ; fi ; \
	echo "$(LINKER_OPTIONS)" >linker_options

modlist_headers: Makefile
	@echo "" >modlist_headers

modlist_segment: Makefile
	@echo "" >modlist_segment

# Can't depend on $(SRCDIR)/$(CONFIG_HEADERS).in since
# $(CONFIG_HEADERS) isn't always used.
Makefile: $(MODULE_BASE)/dynamic_module_makefile $(SRCDIR)/Makefile.in $(SRCDIR)/dependencies make_variables config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS="$(CONFIG_HEADERS)" ./config.status
	touch remake
	@echo "Run make again" >&2
	@exit 1

$(MODULE_TARGET): module.so
	@if test "x$(OBJS)" = "x" ; then \
	  exit 0; \
	fi; \
	if test "x$(PIKE_EXTERNAL_MODULE)" = "x" ; then \
	  $(TMP_BINDIR)/install_module module.so $(MODULE_TARGET) ; \
	fi

module.so: $(MODULE_ARCHIVES) $(OBJS)
	@if test "x$(OBJS)" = "x" ; then \
	  exit 0; \
	fi; \
	echo "Linking $(MODNAME)" ;\
	if $(TMP_BINDIR)/smartlink "$(LDSHARED)" $(LDFLAGS) -o module.@SO@ \
	  $(OBJS) $(MODULE_ARCHIVES) $(MODULE_LDFLAGS) \
	  $(LIBGCC) $(LC_REQ) $(LIBGCC) ; then \
	  if test @SO@ != so ; then mv module.@SO@ module.so ; else :; fi ;\
	else \
	  echo "Linking failed:" >&2; \
	  echo $(TMP_BINDIR)/smartlink "$(LDSHARED)" $(LDFLAGS) -o module.@SO@ $(OBJS) $(MODULE_ARCHIVES) $(MODULE_LDFLAGS) $(LIBGCC) $(LC_REQ) $(LIBGCC) >&2 ;\
	  exit 1; \
	fi

$(OBJS) : $(MODULE_BASE)/dynamic_module_makefile

#
# install a standard module with optional c component in the system module path
#
install: $(MODULE_INSTALL)
	@if test "x$(OBJS)" != "x" ; then \
	  $(TMP_BINDIR)/install_module module.so $(SYSTEM_MODULE_PATH)/$(MODDIR)$(MODULE_WRAPPER_PREFIX)$(MODNAME).so ;\
	fi; \
	if test "x$(MODULE_PMOD_IN)" != "x"; then \
	  $(TMP_BINDIR)/install_module module.pmod $(SYSTEM_MODULE_PATH)/$(MODDIR)$(MODNAME).pmod ;\
	fi;

#
# install the module in LOCAL_MODULE_PATH, creating it if it doesn't already exist.
#
local_install: $(MODULE_INSTALL)
	if test ! -d "$(LOCAL_MODULE_PATH)" ; then \
	  mkdir -p $(LOCAL_MODULE_PATH) ; \
	fi; if test "x$(OBJS)" != "x" ; then \
	  $(TMP_BINDIR)/install_module module.so $(LOCAL_MODULE_PATH)/$(MODDIR)$(MODULE_WRAPPER_PREFIX)$(MODNAME).so ;\
	fi; \
	if test "x$(MODULE_PMOD_IN)" != "x"; then \
	  $(TMP_BINDIR)/install_module module.pmod $(LOCAL_MODULE_PATH)/$(MODDIR)$(MODNAME).pmod ;\
	fi

dump_module: install
	-rm -f dumpmodule.log
	args=$${args:-"--log-file --update-only=dumpversion --report-failed"}; \
	$(RUNPIKE) -x dump $$args \
	--recursive "$(SYSTEM_MODULE_PATH)/$(MODDIR)$(MODNAME).pmod"

dump_local_module: install
	-rm -f dumpmodule.log
	args=$${args:-"--log-file --update-only=dumpversion --report-failed"}; \
	$(RUNPIKE) -x dump $$args \
	--recursive "$(LOCAL_MODULE_PATH)/$(MODDIR)$(MODNAME).pmod"

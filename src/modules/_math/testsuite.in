// - Here we try the math module

// - tan
test_true(floatp(tan(0.5)))
test_true(`<=(-0.0000001, 0.5-tan(atan(0.5)), 0.0000001))
test_true(`<=(-0.0000001, 0.5-atan(tan(0.5)), 0.0000001))
// - asin
test_true(floatp(asin(0.7)))
test_true(`<=(-0.0000001, asin(0.0), 0.0000001))
// - atan
test_true(floatp(atan(0.7)))
test_true(3.1415 < 4.0*atan(1.0))
test_true(3.1416 > 4.0*atan(1.0))
// - sin
test_true(floatp(sin(1.2)))
test_true(sin(atan(1.0))>0.707)
test_true(sin(atan(1.0))<0.708)
// - acos
test_true(acos(0.7) > 0.795)
test_true(acos(0.7) < 0.796)
// - cos
test_true(floatp(cos(1.2)))
test_true(cos(atan(1.0))>0.707)
test_true(cos(atan(1.0))<0.708)
// - sqrt
test_eq(4,sqrt(16))
test_eq(4,sqrt(17))
test_eq(4,sqrt(24))
test_eq(sqrt(0x7fffffff),46340)
test_eq(4.0,sqrt(16.0))
test_any([[int e,i; for(e=0;e<100000;e++) { i=sqrt(e); if(i*i>e || (i+1)*(i+1)<e) return e; } return -1;]],-1)
// - floor
test_eq(17.0,floor(17.0))
test_eq(17.0,floor(17.1))
test_eq(17.0,floor(17.7))
// - ceil
test_eq(17.0,ceil(17.0))
test_eq(18.0,ceil(17.1))
test_eq(18.0,ceil(17.7))
// - exp
// - log
test_true(2.70001>exp(log(2.7)))
test_true(2.69999<exp(log(2.7)))
test_true(2.70001>log(exp(2.7)))
test_true(2.69999<log(exp(2.7)))
// - pow
test_eq(pow(10.0,10.0),10000000000.0)
test_eq(pow(9,9),387420489)
cond([[ sizeof( cpp("__AUTO_BIGNUM__")/"__AUTO_BIGNUM__" ) == 1 ]],
[[
  test_eq(pow(20,20),104857600000000000000000000)

  test_eq(pow(0, 100000000000000), 0)
  test_eq(pow(0, 100000000000001), 0)
  test_eq(pow(1, 100000000000000), 1)
  test_eq(pow(1, 100000000000001), 1)
  test_eq(pow(-1, 100000000000000), 1)
  test_eq(pow(-1, 100000000000001), -1)
  test_eval_error(return pow(2, 100000000000000))

  test_eq(1->pow(100000000000000), 1)
  test_eq(1->pow(100000000000001), 1)
  test_eq((-1)->pow(100000000000000), 1)
  test_eq((-1)->pow(100000000000001), -1)
  test_eval_error(return 2->pow(100000000000000)))
]])

AC_INIT(spider.c)

AC_PROG_CC
AC_PROG_RANLIB

AC_CHECK_LIB(thread, mutex_unlock)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, gethostbyname)

if test x$ac_cv_lib_thread_mutex_unlock = xno ;  then
  AC_CHECK_LIB(pthread, pthread_mutex_unlock)
fi

AC_HAVE_HEADERS(syslog.h sys/syslog.h arpa/inet.h sys/socketvar.h \
	netinet/in.h sys/mman.h sys/utsname.h netdb.h sys/socket.h pwd.h\
        shadow.h thread.h sync.h sys/sockio.h sys/conf.h stropts.h\
	sys/uio.h linux/mman.h)

AC_HAVE_FUNCS(syslog perror strerror getppid getpgrp strdup\
	gethostname geteuid fchroot seteuid setresuid \
        uname gethostbyname getpwnam getspnam initgroups \
	mutex_unlock mmap sendmsg)

if test x$ac_cv_lib_thread_mutex_inlock = xno ;  then
 AC_HAVE_HEADERS( pthread.h )
 AC_HAVE_FUNCS(pthread_mutex_unlock)
fi

AC_SUBST(RANLIB)

AC_MSG_CHECKING(how to find timezone)

AC_CACHE_VAL(pike_cv_timezone,
[
AC_TRY_LINK([
#include <time.h>
],[
 int _tz;
 time_t foo;
 struct tm *g;
 g=localtime(&foo);

 _tz = g->tm_gmtoff;	
],
  pike_cv_timezone='localtime'
,
  pike_cv_timezone='int'
)])

if test "$pike_cv_timezone" = int; then
  AC_DEFINE(HAVE_INT_TIMEZONE)
  AC_MSG_RESULT([int]);
else
  AC_MSG_RESULT([localtime])
fi

AC_OUTPUT(Makefile,echo FOO >stamp-h )

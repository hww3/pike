START_MARKER
test_true(objectp(spider))

dnl set_start_quote
dnl set_end_quote

dnl parse_accessed_database
dnl _dump_obj_table
dnl parse_html

define(test_spider,[[
  test_eq([[
#pike 7.2
$1]],$2)
  test_eq([[spider.$1]],$2)
]])

test_spider([[parse_html("f<bar>o", ([ "bar":"o" ]), ([]))]], "foo")
test_spider([[parse_html("f<bar goo=\">\">o", ([ "bar":"o" ]), ([]))]], "foo")
test_spider([[parse_html("f<bar>o", ([ "bar":lambda(){return "o";} ]), ([]))]], "foo")
test_spider([[parse_html("f<bar>o", ([ "bar":lambda(){return ({"o"});} ]), ([]))]], "foo")
test_spider([[parse_html("f<bar>o", ([ "bar":lambda(){return 0;} ]), ([]))]], "f<bar>o")
test_spider([[parse_html("f<\nbar\rt\"a b\"=\no>o", ([ "bar":lambda(string s, mapping(string:string) attr){return attr["ta b"];} ]), ([]))]], "foo")
test_spider([[parse_html("f<bar>g</bar>o", ([]), ([ "bar":"o"]))]], "foo")
test_spider([[parse_html("f<bar goo=\">\">g</bar>o", ([]), ([ "bar":"o"]))]], "foo")
test_spider([[parse_html("f<bar>g</bar>o", ([]), ([ "bar":lambda(){return "o";}]))]], "foo")
test_spider([[parse_html("f<bar>g</bar>o", ([]), ([ "bar":lambda(){return ({"o"});}]))]], "foo")
test_spider([[parse_html("f<bar rab>g</bar>o", ([]), ([ "bar":lambda(){return "o";}]))]], "foo")
test_spider([[parse_html("f<bar rab>g</bar>o", ([]), ([ "bar":lambda(){return ({"o"});}]))]], "foo")
test_spider([[parse_html("f<\nbar\rt\"a b\"=\no>g<\n/bar\r>o", ([]), ([ "bar":lambda(string s, mapping(string:string) attr, string g){return g=="g"?attr["ta b"]:"-";}]))]], "foo")
test_spider([[parse_html("f<bar><foo>o</foo>o", (["bar":lambda(string s, mapping(string:string) attr) { return ""; }]), ([]))]], "f<foo>o</foo>o")
test_spider([[parse_html("f<!--#bar gazonk=\"o\"-->o", (["!--#bar":lambda(string s, mapping(string:string) attr) { return attr->gazonk; }]),([]))]], "foo")

dnl discdate
dnl stardate
dnl get_all_active_fd
dnl fd_info

dnl XML

test_do([[Parser.XML.Simple()->parse("<!DOCTYPE root [\n<!NOTATION JPGformat>\n]>\n", lambda(mixed ...args){} )]])
test_do([[Parser.XML.Simple()->parse_dtd("%hej;\n", lambda(mixed ...  args){}, 1, 2, 3)]])

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse("<a></a><foo/>",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "There can not be more than one element on the top level.")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.2");
  o->parse("<a></a><foo/>",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse (" <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse (" <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  int got_header;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml ?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	      if (type == "<?xml") got_header = 1;
	    });
  return error || got_header;
]], "Required version attribute missing in XML header.")
test_any([[
  string error;
  int got_header;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse ("<?xml ?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	      if (type == "<?xml") got_header = 1;
	    });
  return error || got_header;
]], 1)

test_any([[
  string error;
  int got_header;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse (" <?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	      if (type == "<?xml") got_header = 1;
	    });
  return error || got_header;
]], 0)
test_any([[
  string error;
  int got_header;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse (" <?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	      if (type == "<?xml") got_header = 1;
	    });
  return error || got_header;
]], 1)

test_any([[
  string error;
  int got_header;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse (" <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	      if (type == "<?xml") got_header = 1;
	    });
  return error || got_header;
]], 0)
test_any([[
  string error;
  int got_header;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse (" <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	      if (type == "<?xml") got_header = 1;
	    });
  return error || got_header;
]], 1)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "Multiple DOCTYPE declarations are not allowed.")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "DOCTYPE must occur before the root element.")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.2");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo/> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo><!DOCTYPE foo SYSTEM 'blurk.dtd'></foo> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "DOCTYPE must occur before the root element.")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo><!DOCTYPE foo SYSTEM 'blurk.dtd'></foo> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "Root element missing.")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<!DOCTYPE foo SYSTEM 'blurk.dtd'> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> "
	    "<![CDATA[gnork]""]> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "All data must be inside tags")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> "
	    "<![CDATA[gnork]""]> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "All data must be inside tags")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.2");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> "
	    "<![CDATA[gnork]""]> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<![CDATA[gnork]""]> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "All data must be inside tags")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<![CDATA[gnork]""]> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.2");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<![CDATA[gnork]""]> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], 0)

test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors (0);
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> "
	    "gnork <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "All data must be inside tags")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.6");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> "
	    "gnork <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "All data must be inside tags")
test_any([[
  string error;
  object o = Parser.XML.Simple();
  o->compat_allow_errors ("7.2");
  o->parse ("<?xml version='1.0'?> <?herk?> <!-- herk --> "
	    "<foo>mupp</foo> <?herk?> <!-- herk --> "
	    "gnork <?herk?> <!-- herk --> ",
	    lambda (string type, string name, mapping attrs, string data) {
	      if (type == "error") error = data;
	    });
  return error;
]], "All data must be inside tags")


END_MARKER

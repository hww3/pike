#
# $Id: static_module_makefile.in,v 1.87 2002/07/26 16:22:11 grubba Exp $
#


CC=@CC@
CPP=@CPP@
AR=@AR@
REAL_LDFLAGS=@LDFLAGS@
REAL_CFLAGS=@CFLAGS@
REAL_CPPFLAGS=@CPPFLAGS@

MODULE_BASE=$(BUILD_BASE)/modules

PREFLAGS=-I. -I$(SRCDIR) -I$(BUILD_BASE) -I$(PIKE_SRC_DIR) -Dpike_module_init=pike_module_$(MODNAME)_init -Dpike_module_exit=pike_module_$(MODNAME)_exit $(MODULE_CPPFLAGS) $(DEFINES)
CFLAGS=$(MODULE_CFLAGS) $(PREFLAGS) $(OTHERFLAGS)
NOOPT_CFLAGS=$(PREFLAGS) $(NOOPTFLAGS) @CCSHARED@ $(MODULE_CFLAGS)

MAKE_FLAGS = "prefix=$(prefix)" "exec_prefix=$(exec_prefix)" "CC=$(CC)" "OTHERFLAGS=$(OTHERFLAGS)" "TMP_BINDIR=$(TMP_BINDIR)" "DEFINES=$(DEFINES)" "TMP_LIBDIR=$(TMP_LIBDIR)" "RUNPIKE=$(RUNPIKE)" "INSTALL=$(INSTALL)" "AR=$(AR)" "NOOPTFLAGS=$(NOOPTFLAGS)" $(MODULE_MAKE_FLAGS)

MODNAME=`pwd|sed -e 's@.*/@@g'`

all: dummy

force:
	@:;

$(MODULE_ARCHIVES) ThisIsAPhonyTargetBlaBlaBla: force
	@a=`echo $@ | sed -e 's@/[^/]*$$@@'` ; \
	echo Making $(MODNAME)/$$a ; \
	( rm $$a/remake >/dev/null 2>&1 ||: ; \
	  cd $$a && ( $(MAKE) $(MAKE_FLAGS) || \
	              ( test -f remake ; $(MAKE) $(MAKE_FLAGS) ) ) \
	) || exit $$?

dummy:	Makefile linker_options modlist_headers modlist_segment module.pmod module.a
	@tmp="$(INSTALL_NAME)" ;\
	if test x$$tmp = x ; then tmp="$(MODNAME)"; else :; fi ;\
	$(TMP_BINDIR)/install_module module.pmod $(TMP_LIBDIR)/modules/$$tmp.pmod

.SUFFIXES: .c .o .cmod

.cmod.c: $(BUILD_BASE)/precompile.sh-stamp $(TMP_BINDIR)/precompile.pike
	$(BUILD_BASE)/precompile.sh --cache precompile.pike >"$@" "$<" || { rm "$@"; exit 1; }

# GCC dumps core on some files @ OSF1
# This kluge should work around that...
.c.o:
	@echo "Compiling $<" ;\
	rm -f $@.fail >/dev/null 2>&1; \
	if $(CC) $(CFLAGS) -c $< -o $@ ; then : ; else \
	  status=$$?; \
	  if test x"@noopt_retry@" = xyes ; then \
	    echo "WARNING: Compiler failure! Trying without optimization!" >&2;\
	    echo "$(CC) $(PREFLAGS) $(CFLAGS) -c $< -o $@" >$@.fail ;\
	    if NO_ULIMIT=yes $(CC) $(PREFLAGS) $(NOOPTFLAGS) -c $< -o $@ ; then : ; else \
	      status=$$?; \
	      echo "Compilation command was:" >&2;\
	      echo "$(CC) $(PREFLAGS) $(NOOPTFLAGS) -c $< -o $@" >&2 ;\
	      exit $$status; \
	    fi; \
	  else \
	    echo "Compilation command was:" >&2;\
	    echo "$(CC) $(PREFLAGS) $(CFLAGS) -c $< -o $@" >&2 ;\
	    exit $$status; \
	  fi; \
	fi

linker_options: Makefile $(MODULE_ARCHIVES)
	echo >linker_options `pwd`/module.a $(MODULE_LDFLAGS)
	@for a in '' $(MODULE_ARCHIVES) ; do \
	  if test "x$$a" = "x"; then :; else \
	    case "$$a" in \
	      /*) \
		echo $$a \
	      ;; \
	      *) \
		echo `pwd`/$$a \
	      ;; \
            esac >>linker_options; \
	  fi; \
	done

modlist_headers: Makefile
	@echo >modlist_headers "void pike_module_$(MODNAME)_init(void), pike_module_$(MODNAME)_exit(void);"

modlist_segment: Makefile
	@echo >modlist_segment " ,{ \"$(MODNAME)\", pike_module_$(MODNAME)_init, pike_module_$(MODNAME)_exit } "

make_variables: $(make_variables_in) config.status
	CONFIG_FILES="make_variables:$(make_variables_in)" CONFIG_HEADERS="" ./config.status

# Can't depend on $(SRC_DIR)/$(CONFIG_HEADERS).in since
# $(CONFIG_HEADERS) isn't always used.
Makefile: $(MODULE_BASE)/static_module_makefile $(SRCDIR)/Makefile.in $(SRCDIR)/dependencies make_variables config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS="$(CONFIG_HEADERS)" ./config.status
	touch remake
	@echo "Run make again" >&2
	@exit 1

$(SRCDIR)/configure: $(SRCDIR)/configure.in $(PIKE_SRC_DIR)/aclocal.m4
	cd $(SRCDIR) && autoconf --localdir=$(PIKE_SRC_DIR)
	if [ -f $(SRCDIR)/acconfig.h ]; then \
	  cd $(SRCDIR) && autoheader; \
	else :; fi

config.status: $(SRCDIR)/configure
	CFLAGS="$(REAL_CFLAGS)" LDFLAGS="$(REAL_LDFLAGS)" CPPFLAGS="$(REAL_CPPFLAGS)" BUILDDIR="$(TMP_BUILDDIR)" BINDIR="$(TMP_BINDIR)" PIKE_SRC_DIR="$(PIKE_SRC_DIR)" BUILD_BASE="$(BUILD_BASE)" ./config.status --recheck

module.pmod: Makefile
	@echo "Making module.pmod" ; if [ -f $(SRCDIR)/module.pmod.in ]; then \
	   sed -e "s/@module@/__builtin_dirnode.$(MODNAME)/" <$(SRCDIR)/module.pmod.in >module.pmod ;\
	else \
	  if [ -f ./module.pmod.in ]; then \
	   sed -e "s/@module@/__builtin_dirnode.$(MODNAME)/" <./module.pmod.in >module.pmod ;\
	  else \
	    echo >module.pmod "#pike __REAL_VERSION__" ;\
	    echo >>module.pmod "#if constant(_static_modules.$(MODNAME));" ;\
	    echo >>module.pmod "inherit _static_modules.$(MODNAME);" ;\
	    echo >>module.pmod "#endif" ;\
	  fi ;\
	fi

module.a: $(OBJS)
	-rm -f module.a
	$(AR) cq module.a $(OBJS)
	-@RANLIB@ module.a
	if test -f linker_options ; then touch linker_options ; else :; fi

$(OBJS) : $(MODULE_BASE)/dynamic_module_makefile

clean:
	-rm -f *.o *.fail *.obj *.a *.so module.so module.pmod linker_options modlist_headers modlist_segment module_testsuite $(MODULE_CLEAN_EXTRA)
	@for a in '' $(MODULE_SUBDIRS) ; do if test "x$$a" = "x"; then :; else echo cleaning $$a ; ( cd $$a ; $(MAKE) $(MAKE_FLAGS) clean ) ; fi ; done

depend: $(SRC_TARGETS) $(PMOD_TARGETS) Makefile
	-@echo Fixing dependencies for $(SRCDIR)/\*.c
	@gcc -MM -MG $(PREFLAGS) $(SRCDIR)/*.c | $(TMP_BINDIR)/fixdepends.sh "$(SRCDIR)" "$(PIKE_SRC_DIR)" "$(BUILD_BASE)"
	@CONFIG_FILES=Makefile CONFIG_HEADERS="" ./config.status
	@for a in '' $(MODULE_SUBDIRS) ; do \
	  if test "x$$a" = "x"; then :; else \
	    echo making depend in $$a; \
	    ( cd $$a && { \
	      rm -f remake; \
	      $(MAKE) $(MAKE_FLAGS) MODNAME=$$a depend || \
		if test -f remake; then $(MAKE) $(MAKE_FLAGS) MODNAME=$$a depend; \
		else exit $$?; fi; \
	    }); \
	  fi; \
	done

#verify / debug
module_testsuite: $(SRCDIR)/testsuite.in $(REAL_TESTSUITE) $(TMP_BINDIR)/mktestsuite
	@if test "x$(REAL_TESTSUITE)" != x ; then \
	  cp $(SRCDIR)/$(REAL_TESTSUITE) module_testsuite; \
	else \
	  if test "$$PIKE_PATH_TRANSLATE" = ""; then \
	    $(TMP_BINDIR)/mktestsuite $(SRCDIR)/testsuite.in >module_testsuite \
	      -DSRCDIR=$(SRCDIR); \
	  else \
	    $(TMP_BINDIR)/mktestsuite $(SRCDIR)/testsuite.in >module_testsuite \
	      -DSRCDIR="`echo $(SRCDIR)|sed -e $$PIKE_PATH_TRANSLATE`"; \
	  fi; \
	fi

extra_tests: $(MODULE_TESTS)

verify: module_testsuite $(MODULE_TESTS)
	$(RUNPIKE) $(TMP_BINDIR)/test_pike.pike module_testsuite

verbose_verify: module_testsuite $(MODULE_TESTS)
	$(RUNPIKE) $(TMP_BINDIR)/test_pike.pike module_testsuite --verbose

gdb_verify: module_testsuite
	@echo >.gdbinit handle SIGUSR1 nostop noprint pass
	@echo >>.gdbinit run -DNOT_INSTALLED -m $(TMP_BUILDDIR)/master.pike $(PIKEOPTS) $(TMP_BINDIR)/test_pike.pike module_testsuite -v -v -f
	gdb $(TMP_BUILDDIR)/pike
	@rm .gdbinit

install: $(MODULE_INSTALL)


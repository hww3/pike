dnl $Id: testsuite.in,v 1.4 2002/10/19 13:43:05 nilsson Exp $

dnl - ADT.History

test_eq(sizeof(ADT.History(2)),0)

test_do(add_constant("adth", ADT.History(2)))
test_eq(adth->get_maxsize(),2)
test_any([[
  adth->push(17);
  return sizeof(adth);
]], 1)
test_any([[
  adth->push(18);
  return sizeof(adth);
]], 2)
test_any([[
  adth->push(19);
  return sizeof(adth);
]], 2)
test_eq(adth->get_latest_entry_num(),3)
test_eq(adth->get_first_entry_num(),2)
test_eval_error(return adth[0])
test_eval_error(return adth[1])
test_eq(adth[2],18)
test_eq(adth[3],19)
test_eq(adth[-1],19)
test_eq(adth[-2],18)
test_eval_error(return adth[-3])
test_do( adth->set_maxsize(4) )
test_eq(adth->get_maxsize(),4)
test_eq(sizeof(adth),2)
test_eq(adth[-1],19)
test_eq(adth[-2],18)
test_eval_error(return adth[-3])
test_do( adth->push(20); adth->push(21); adth->push(22); )
test_eq(adth[3],19)
test_eq(adth[6],22)
test_do( adth->flush() )
test_eq(adth->get_latest_entry_num(),6)
test_eq(adth->get_first_entry_num(),0)
test_do( adth->set_maxsize(0) )
test_do( adth->push(23) )
test_eq(sizeof(adth),0)
test_do(add_constant("adth"))


dnl - ADT.Stack

test_any([[
  object s = ADT.Stack();
  s->push(1);
  return s->pop();
]], 1)

test_eval_error(return ADT.Stack()->pop())

test_any([[
  object s = ADT.Stack();
  for(int i; i<1000; i++)
    s->push(i);
  for(int i; i<1000; i++)
    s->pop();
  for(int i; i<1000; i++)
    s->push(i);
  return s->pop();
]], 999)

test_equal_any([[
  object s = ADT.Stack();
  s->push(2);
  s->push(3);
  s->push(4);
  s->pop();
  return s->pop(2);
]], ({2,3}) )

test_any([[
  object s = ADT.Stack();
  s->push(5);
  return s->top();
]], 5)

test_eval_error(return ADT.Stack()->top())

test_any([[
  object s = ADT.Stack();
  for(int i; i<1000; i++)
    s->push(i);
  for(int i; i<1000; i++)
    s->quick_pop();
  for(int i; i<1000; i++)
    s->push(i);
  return sizeof(s);
]], 1000)

test_any([[
  object s = ADT.Stack();
  for(int i; i<1000; i++)
    s->push(i);
  return sizeof(s);
]], 1000)

test_any([[
  object s = ADT.Stack();
  s->push(3);
  s->reset();
  return sizeof(s);
]], 0)

test_any([[
  object s = ADT.Stack();
  s->set_stack( "1234"/1 );
  s->push("5");
  return s->pop()+sizeof(s);
]], "54")

test_any([[
  object s = ADT.Stack();
  s->push("a");
  s->push("b");
  return values(s)*",";
]], [["a,b"]])

test_any([[
  object s = ADT.Stack();
  s->set_stack( "1234"/1 );
  object t = ADT.Stack();
  t->push("5");
  return values(s+t)*"";
]], "12345")


dnl - ADT.Table

test_true(ADT.Table.table(
 ({ ({ "a", "b", 42 }),
    ({ "c", "b", 41 }),
    ({ "a", "a", 76 }) }),
 ({ "X", "Y", "z" }))->select("x", 2)->sum("Z")->distinct(0)->rsort("X")
 ->rename(0, "fOo")->sort("foO")->cast("array"),
 ({ ({ "a", 118 }),
    ({ "c", 41 }) }))

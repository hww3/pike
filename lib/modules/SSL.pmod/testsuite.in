dnl $Id: testsuite.in,v 1.7 2004/02/28 14:58:34 nilsson Exp $

test_any([[
#pike 7.4
return SSL.constants && 1;
]], 1)

cond_resolv(Crypto.Hash, [[
test_any([[
#pike 7.4
return SSL.cipher && 1;
]], 1)

test_program([[

#define ASSERT(X) if(!(X)) error("Assertion failed.\n")
string _key;
string _cert;

void make_cert() {
  object rsa = Crypto.RSA();
  rsa->generate_key( 1024, random_string );
  _key = Tools.PEM.simple_build_pem("RSA PRIVATE KEY",
    Standards.PKCS.RSA.private_key(rsa));

  object msg = Tools.PEM.pem_msg()->init(_key);
  object part = msg->parts["RSA PRIVATE KEY"];
  object rsa_again=Standards.PKCS.RSA.parse_private_key(part->decoded_body());

  ASSERT(rsa->public_key_equal(rsa_again));

  array attrs = ({
    (["organizationName":Standards.ASN1.Types.asn1_printable_string("Test")]),
    (["commonName":Standards.ASN1.Types.asn1_printable_string("*")]),
  });

  _cert = Tools.PEM.simple_build_pem("CERTIFICATE",
    Tools.X509.make_selfsigned_rsa_certificate(rsa_again, 3600*24, attrs));
}

class Server {
  SSL.context ctx;

  void create() {
    ctx = SSL.context();
    ctx->random = random_string;

    object msg = Tools.PEM.pem_msg()->init( _cert );
    object part = msg->parts["CERTIFICATE"];
    string cert = part->decoded_body();
    ASSERT(cert);

    msg = Tools.PEM.pem_msg()->init( _key );
    part = msg->parts["RSA PRIVATE KEY"];
    string key = part->decoded_body();
    ASSERT(key);

    object rsa = Standards.PKCS.RSA.parse_private_key(key);
    ctx->rsa = rsa;
    ASSERT(rsa->rsa_size()>512);
    ctx->short_rsa = Crypto.RSA()->generate_key(512, ctx->random);
    ctx->rsa_mode();

    object tbs = Tools.X509.decode_certificate(cert);
    ASSERT(tbs->public_key->rsa->public_key_equal(rsa));
    ctx->certificates = ({ cert });
  }
}

int a() {
  make_cert();
  object s = Server();
  return 1;
}
]])
]])

dnl   test_do([[
dnl     object p = Process.Process(RUNPIKE + " \"]]SRCDIR[[/https.pike\"");
dnl     sleep(5); /* Wait a little for the server to startup */
dnl     Protocols.HTTP.Query q = Protocols.HTTP.get_url("https://localhost:25678");
dnl     if (q->status != 200 || search("html", q->data()) < 0)
dnl       error("Failed\n");
dnl     /* How to kill the process if running on windows? */
dnl     p->kill(15);
dnl   ]])

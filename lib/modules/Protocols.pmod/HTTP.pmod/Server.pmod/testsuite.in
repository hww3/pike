START_MARKER
// $Id: testsuite.in,v 1.1 2006/01/02 02:54:51 nilsson Exp $

test_do( add_constant("R", Protocols.HTTP.Server.Request()) )
test_do([[
class FD {
  inherit Stdio.FakeFile;
  function read_cb;
  function close_cb;
  void set_nonblocking(function r, mixed x, function c) {
    read_cb = r;
    close_cb = c;
  }
  void add(string s) {
    read_cb(0, s);
  }
  void set_read_callback(function r) {
    read_cb = r;
  }
};
add_constant("FD",FD(""));
]])
test_do( R->attach_fd(FD, 0, lambda(object x){} ); )

test_do( FD->add("GET /foo/bar+%20/zuul.html?ha=bla&esp=an&ha=xxor ") )
test_do( FD->add("HTTP/1.01\r") )
test_do( FD->add("\n") )
test_do( FD->add("Content-Length: 5\r\n") )
test_do( FD->add("Content-Length: 5\r\n") )
test_do( FD->add("Cookie:    A=a ; B=b;C=x\r\n") )
test_do( FD->add("Cookie: D=d;C=c\r\n") )
test_do( FD->add("User-Agent: testsuite.in\r\n") )
test_do( FD->add("\r\nH") )

// parse_request and parse_variables called.

test_eq( R->request_type, "GET" )
test_eq( R->protocol, "HTTP/1.1" )
test_eq( R->full_query, "/foo/bar+%20/zuul.html?ha=bla&esp=an&ha=xxor" )
test_eq( R->query, "ha=bla&esp=an&ha=xxor" )
test_eq( R->not_query, "/foo/bar+%20/zuul.html" )

test_equal( R->variables, ([ "esp":"an", "ha":({"bla","xxor"}) ]) )
test_eq( R->request_headers["content-length"], "5" )
test_eq( sizeof(R->request_headers), 3 );

test_do( FD->add("ELL") )
test_do( FD->add("OMG") )

// finalized called.

test_eq( R->body_raw, "HELLO" )
test_equal( R->cookies, ([ "A":"a", "B":"b", "C":"c", "D":"d" ]) )

test_do( add_constant("R") )
test_do( add_constant("FD") )

// FIXME: Test transfer encoding chunked
// FIXME: Test multipart/formdata
// FIXME: Test url-encoded

END_MARKER
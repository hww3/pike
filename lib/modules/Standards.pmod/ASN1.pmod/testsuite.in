START_MARKER
dnl $Id: testsuite.in,v 1.8 2004/05/02 18:30:14 nilsson Exp $

dnl Tests from ITU-T Rec.X690 (07/2002)

dnl §8.8
test_eq( Standards.ASN1.Types.Null()->get_der(), "\5\0" )

dnl §8.9
test_any([[
  import Standards.ASN1.Types;
  return Sequence( ({ IA5String("Smith"), Boolean(17) }) )->get_der();
]], "0\n\26\5Smith\1\1\xff")

dnl §8.19
test_eq(Standards.ASN1.Types.Identifier(2,100,3)->get_der(),
  String.hex2string("0603813403"))

dnl §8.21
test_eq( Standards.ASN1.Types.VisibleString("Jones")->get_der(),
  "\32\5Jones" )

test_eq( Standards.ASN1.Types.BitString()->
  set_from_ascii("011011100101110111")->get_der(),
  String.hex2string("0304066e5dc0") )

test_eq( Standards.ASN1.Types.IA5String("test1@rsa.com")->get_der(),
  String.hex2string("160d7465737431407273612e636f6d") )

test_eq( Standards.ASN1.Types.Integer(0)->get_der(),
  String.hex2string("020100") )
test_eq( Standards.ASN1.Types.Integer(127)->get_der(),
  String.hex2string("02017f") )
test_eq( Standards.ASN1.Types.Integer(128)->get_der(),
  String.hex2string("02020080") )
test_eq( Standards.ASN1.Types.Integer(256)->get_der(),
  String.hex2string("02020100") )
test_eq( Standards.ASN1.Types.Integer(-128)->get_der(),
  String.hex2string("020180") )
test_eq( Standards.ASN1.Types.Integer(-129)->get_der(),
  String.hex2string("0202ff7f") )

test_eq(Standards.ASN1.Types.Identifier(1,2,840,113549)->get_der(),
  String.hex2string("06062a864886f70d"))

test_eq(Standards.ASN1.Types.OctetString(String.hex2string("0123456789abcdef"))
  ->get_der(),
  String.hex2string("04080123456789abcdef") )

test_eq(Standards.ASN1.Types.PrintableString("Test User 1")->get_der(),
  String.hex2string("130b5465737420557365722031"))

test_eq(Standards.ASN1.Types.UTC("910506234540Z")->get_der(),
  String.hex2string("170d3931303530363233343534305a"))

test_eq(Standards.ASN1.Types.TeletexString("clés publiques")->get_der(),
  String.hex2string("140f636cc26573207075626c6971756573"))

test_any([[
  import Standards.ASN1.Types;
  Sequence countryName = Sequence( ({ Identifier(2,5,4,6),
	                              PrintableString("US") }) );
  Sequence organizationName = Sequence( ({ Identifier(2,5,4,10),
                                 PrintableString("Example Organization") }) );
  Sequence commonName = Sequence( ({ Identifier(2,5,4,11),
                                     PrintableString("Test User 1") }) );
  return Sequence( ({
    Set( ({ countryName }) ),
    Set( ({ organizationName }) ),
    Set( ({ commonName }) ),
  }) )->get_der();
]], String.hex2string(
  "3042"
  "310b" "3009""0603550406""13025553"
  "311d" "301b""060355040a""13144578616d706c65204f7267616e697a6174696f6e"
  "3114" "3012""060355040b""130b5465737420557365722031"
))
END_MARKER

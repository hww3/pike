
START_MARKER

// Crypto
test_true([[
#pike 7.4
objectp(Crypto)]])

// C-programs
test_true([[
#pike 7.4
programp(Crypto.cbc)]])
test_true([[
#pike 7.4
programp(Crypto.crypto)]])
test_true([[
#pike 7.4
programp(Crypto.invert)]])
test_true([[
#pike 7.4
programp(Crypto.md2)]])
test_true([[
#pike 7.4
programp(Crypto.md4)]])
test_true([[
#pike 7.4
programp(Crypto.md5)]])
test_true([[
#pike 7.4
programp(Crypto.pipe)]])
test_true([[programp(
#pike 7.4
Crypto.sha)]])

test_true([[
#pike 7.4
programp(Crypto.rijndael)]])
test_true([[
#pike 7.4
programp(Crypto.des)]])
test_true([[
#pike 7.4
programp(Crypto.idea)]])
test_true([[
#pike 7.4
programp(Crypto.cast)]])
test_true([[
#pike 7.4
programp(Crypto.arcfour)]])

// Functions
test_eq(
#pike 7.4
Crypto.des_parity("\xff"*8), "\xfe"*8)
test_eq(
#pike 7.4
Crypto.des_parity("12345678"), "12244778")
test_true([[
#pike 7.4
functionp(Crypto.hex_to_string)]])
test_true([[
#pike 7.4
functionp(Crypto.string_to_hex)]])

// Pike programs
test_true([[
#pike 7.4
programp(Crypto.des3)]])
test_true([[
#pike 7.4
programp(Crypto.des3_cbc)]])
test_true([[
#pike 7.4
programp(Crypto.des_cbc)]])
test_true([[
#pike 7.4
programp(Crypto.idea_cbc)]])
test_true([[
#pike 7.4
programp(Crypto.rsa)]])

// invert
test_eq([[
#pike 7.4
Crypto.invert()->crypt_block("")]],[[""]])
test_eq([[
#pike 7.4
Crypto.invert()->crypt_block("\0\xffpqrstx")]],
         [["\xff\0\x8f\x8e\x8d\x8c\x8b\x87"]])

// RSA
cond_resolv(Crypto.MD5.name, [[
test_do(
#pike 7.4
add_constant("RSA", Crypto.rsa()) )
test_do( RSA->generate_key(1024) )
test_equal( RSA->raw_sign("hej"), RSA->raw_sign("hej") )
test_true( RSA->raw_verify("tjo", RSA->raw_sign("tjo")) )
test_equal( RSA->get_n(), RSA->get_n() )
test_true( functionp(RSA->get_n()->gcdext2) )
test_equal( RSA->get_e(), RSA->get_e() )
test_true( functionp(RSA->get_e()->gcdext2) )
test_equal( RSA->get_d(), RSA->get_d() )
test_true( functionp(RSA->get_d()->gcdext2) )
test_equal( RSA->get_p(), RSA->get_p() )
test_true( functionp(RSA->get_p()->gcdext2) )
test_equal( RSA->get_q(), RSA->get_q() )
test_true( functionp(RSA->get_q()->gcdext2) )
test_equal( RSA->cooked_get_n(), RSA->get_n()->digits(256) )
test_equal( RSA->cooked_get_e(), RSA->get_e()->digits(256) )
test_equal( RSA->cooked_get_d(), RSA->get_d()->digits(256) )
test_equal( RSA->cooked_get_p(), RSA->get_p()->digits(256) )
test_equal( RSA->cooked_get_q(), RSA->get_q()->digits(256) )
test_do(
#pike 7.4
add_constant("RSB", Crypto.rsa()) )
test_do( RSB->set_private_key(RSA->get_d(),
         ({ RSA->get_p(), RSA->get_q() }) ) )
test_equal( RSA->get_d(), RSB->get_d() )
test_equal( RSA->get_p(), RSB->get_p() )
test_equal( RSA->get_q(), RSB->get_q() )
test_true([[
#pike 7.4
RSA->verify("hej", Crypto.md5, RSB->sign("hej", Crypto.md5)) ]])
test_false([[
#pike 7.4
RSA->verify("hoj", Crypto.md5, RSB->sign("hej", Crypto.md5)) ]])
test_true( RSA->sha_verify("hej", RSB->sha_sign("hej")) )
test_false( RSA->sha_verify("hoj", RSB->sha_sign("hej")) )
test_true( RSA->md5_verify("hej", RSB->md5_sign("hej")) )
test_false( RSA->md5_verify("hoj", RSB->md5_sign("hej")) )
test_do( add_constant("RSA") )
test_do( add_constant("RSB") )

test_do(
#pike 7.4
add_constant("RSA", Crypto.rsa()) )
test_true( RSA->set_public_key(
  0x838b848334d4f2151d25971e655eed8a0905cb5b81ba9047db2bf3b56765b058fa9af2ad89a2726233fc8917e52e8966db4bae5d426207f98ab50e1467accb2d,
  65537) )
test_true( RSA->set_private_key(
  0x3f8a1cafe3cd1841ea9a45ac80faa172937921094a587b68ba0d38e2ded6d79ef1a5b8d9605278ddc61616f12fbb9dc6dbdea50f9dc4a51f6a8ed30ada7c9301,
  ({ 0xae01268cb370af44cb05e9618ea6681dae1186bd746d3aa6122b8bf6c2290619,
     0xc1884f35667fb5ea3e8e7cfa052bb34894c2970b3da6a0650182fe514b23c835 })) )
test_eq( RSA->query_blocksize(), 61 )
test_true( RSA->raw_verify("flärpzprutt",RSA->raw_sign("flärpzprutt")) )
test_false( RSA->raw_verify("flärpzputt",RSA->raw_sign("flärpzprutt")) )
test_true( RSA->decrypt(RSA->encrypt("flärpzprutt")) )
test_eq( RSA->rsa_size(), 512 )
test_true( RSA->public_key_equal(RSA) )
test_false(
#pike 7.4
RSA->public_key_equal(Crypto.rsa()->generate_key(512)) )
test_do( add_constant("RSA") )
]])

// DSA
cond_resolv(Crypto.SHA1.name, [[
test_do(
#pike 7.4
add_constant("DSA", Crypto.dsa()) )
test_true( DSA->set_public_test_key() )
test_true( DSA->set_private_test_key() )
test_true( DSA->p->gcdext2 )
test_true( DSA->q->gcdext2 )
test_true( DSA->g->gcdext2 )
test_true( DSA->x->gcdext2 )
test_true( DSA->y->gcdext2 )
test_true( DSA->hash2number )
test_true( DSA->dsa_hash )
test_true( DSA->random_number )
test_true( DSA->random_exponent )
test_true( DSA->nist_hash )
test_true( DSA->find_generator )
test_do( add_constant("DSA") )
]])


// DES
cond_resolv(Crypto.DES.name, [[
test_true([[
#pike 7.4
objectp(Crypto.des())]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des()->set_encrypt_key(Crypto.hex_to_string("0101010101010180"))
		->crypt_block(Crypto.hex_to_string("0000000000000000")))]],
	[["9cc62df43b6eed74"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des()->set_encrypt_key(Crypto.hex_to_string("8001010101010101"))
		->crypt_block(Crypto.hex_to_string("0000000000000040")))]],
	[["a380e02a6be54696"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des()->set_encrypt_key(Crypto.hex_to_string("08192a3b4c5d6e7f"))
		->crypt_block(Crypto.hex_to_string("0000000000000000")))]],
	[["25ddac3e96176467"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des()->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef"))
		->crypt_block("Now is t"))]],
	[["3fa40e8a984d4815"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des()->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef"))
		->crypt_block(Crypto.hex_to_string("0123456789abcde7")))]],
	[["c95744256a5ed31d"]])

test_eq([[
#pike 7.4
Crypto.des()->set_decrypt_key(Crypto.hex_to_string("0123456789abcdef"))
		->crypt_block(Crypto.hex_to_string("3fa40e8a984d4815"))]],
	[["Now is t"]])
]])

// DES3 (EDE with AAA key == DES)
cond_resolv(Crypto.DES3.name, [[
test_true([[
#pike 7.4
objectp(Crypto.des())]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des3()->set_encrypt_key(Crypto.hex_to_string("0101010101010180")*3)
		->crypt_block(Crypto.hex_to_string("0000000000000000")))]],
	[["9cc62df43b6eed74"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des3()->set_encrypt_key(Crypto.hex_to_string("8001010101010101")*3)
		->crypt_block(Crypto.hex_to_string("0000000000000040")))]],
	[["a380e02a6be54696"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des3()->set_encrypt_key(Crypto.hex_to_string("08192a3b4c5d6e7f")*3)
		->crypt_block(Crypto.hex_to_string("0000000000000000")))]],
	[["25ddac3e96176467"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des3()->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef")*3)
		->crypt_block("Now is t"))]],
	[["3fa40e8a984d4815"]])
test_eq([[
#pike 7.4
Crypto.string_to_hex(Crypto.des3()->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef")*3)
		->crypt_block(Crypto.hex_to_string("0123456789abcde7")))]],
	[["c95744256a5ed31d"]])

test_eq([[
#pike 7.4
Crypto.des3()->set_decrypt_key(Crypto.hex_to_string("0123456789abcdef")*3)
		->crypt_block(Crypto.hex_to_string("3fa40e8a984d4815"))]],
	[["Now is t"]])
]])

// RIJNDAEL
cond_resolv(Crypto.AES.name, [[
test_true([[
#pike 7.4
objectp(Crypto.rijndael()) && objectp(Crypto.aes())]])
]])

// IDEA
cond_resolv(Crypto.IDEA.name, [[
test_true([[
#pike 7.4
objectp(Crypto.idea())]])
test_eq([[
#pike 7.4
Crypto.idea()
          ->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef"
					         "0123456789abcdef"))
	  ->crypt_block(Crypto.hex_to_string("0123456789abcde7"))]],
	[[String.hex2string("2011aacef6f4bc7f")]])
]])

// CAST
cond_resolv(Crypto.CAST.name, [[
test_true([[
#pike 7.4
objectp(Crypto.cast())]])
// encryption
test_eq([[
#pike 7.4
Crypto.cast()
          ->set_encrypt_key(Crypto.hex_to_string("0123456712345678"
						 "234567893456789A"))
	  ->crypt_block(Crypto.hex_to_string("0123456789ABCDEF"))]],
	[[String.hex2string("238B4FE5847E44B2")]])
test_eq([[
#pike 7.4
Crypto.cast()
          ->set_encrypt_key(Crypto.hex_to_string("0123456712345678"
						 "2345"))
	  ->crypt_block(Crypto.hex_to_string("0123456789ABCDEF"))]],
	[[String.hex2string("EB6A711A2C02271B")]])
test_eq([[
#pike 7.4
Crypto.cast()
          ->set_encrypt_key(Crypto.hex_to_string("0123456712"))
	  ->crypt_block(Crypto.hex_to_string("0123456789ABCDEF"))]],
	[[String.hex2string("7AC816D16E9B302E")]])
// decryption
test_eq([[
#pike 7.4
Crypto.cast()
          ->set_decrypt_key(Crypto.hex_to_string("0123456712345678"
						 "234567893456789A"))
	  ->crypt_block(Crypto.hex_to_string("238B4FE5847E44B2"))]],
	[[String.hex2string("0123456789ABCDEF")]])
test_eq([[
#pike 7.4
Crypto.cast()
          ->set_decrypt_key(Crypto.hex_to_string("0123456712345678"
						 "2345"))
	  ->crypt_block(Crypto.hex_to_string("EB6A711A2C02271B"))]],
	[[String.hex2string("0123456789ABCDEF")]])
test_eq([[
#pike 7.4
Crypto.cast()
          ->set_decrypt_key(Crypto.hex_to_string("0123456712"))
	  ->crypt_block(Crypto.hex_to_string("7AC816D16E9B302E"))]],
	[[String.hex2string("0123456789ABCDEF")]])
]])

// ARCFOUR
cond_resolv(Crypto.Arcfour.name, [[
test_true([[
#pike 7.4
objectp(Crypto.arcfour())]])
test_eq([[
#pike 7.4
Crypto.arcfour()->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef"))
		->crypt(Crypto.hex_to_string("0123456789abcdef"))]],
	[[String.hex2string("75b7878099e0c596")]])
test_eq([[
#pike 7.4
Crypto.arcfour()->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef"))
		->crypt(Crypto.hex_to_string("0000000000000000"))]],
	[[String.hex2string("7494c2e7104b0879")]])
test_eq([[
#pike 7.4
Crypto.arcfour()->set_encrypt_key(Crypto.hex_to_string("0000000000000000"))
		->crypt(Crypto.hex_to_string("0000000000000000"))]],
	[[String.hex2string("de188941a3375d3a")]])
test_eq([[
#pike 7.4
Crypto.arcfour()->set_encrypt_key(Crypto.hex_to_string("ef012345"))
		->crypt(Crypto.hex_to_string("00000000000000000000"))]],
	[[String.hex2string("d6a141a7ec3c38dfbd61")]])

test_eq([[
#pike 7.4
Crypto.arcfour()
  ->set_encrypt_key(Crypto.hex_to_string("0123456789abcdef"))
  ->crypt(Crypto.hex_to_string(
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"
	"0101010101010101010101010101010101010101010101010101010101010101"))]],
	[[String.hex2string(
	  "7595c3e6114a09780c4ad452338e1ffd9a1be9498f813d76533449b6778dcad8"
	  "c78a8d2ba9ac66085d0e53d59c26c2d1c490c1ebbe0ce66d1b6b1b13b6b919b8"
	  "47c25a91447a95e75e4ef16779cde8bf0a95850e32af9689444fd377108f98fd"
	  "cbd4e726567500990bcc7e0ca3c4aaa304a387d20f3b8fbbcd42a1bd311d7a43"
	  "03dda5ab078896ae80c18b0af66dff319616eb784e495ad2ce90d7f772a81747"
	  "b65f62093b1e0db9e5ba532fafec47508323e671327df9444432cb7367cec82f"
	  "5d44c0d00b67d650a075cd4b70dedd77eb9b10231b6b5b741347396d62897421"
	  "d43df9b42e446e358e9c11a9b2184ecbef0cd8e7a877ef968f1390ec9b3d35a5"
	  "585cb009290e2fcde7b5ec66d9084be44055a619d9dd7fc3166f9487f7cb2729"
	  "12426445998514c15d53a18c864ce3a2b7555793988126520eacf2e3066e230c"
	  "91bee4dd5304f5fd0405b35bd99c73135d3d9bc335ee049ef69b3867bf2d7bd1"
	  "eaa595d8bfc0066ff8d31509eb0c6caa006c807a623ef84c3d33c195d23ee320"
	  "c40de0558157c822d4b8c569d849aed59d4e0fd7f379586b4b7ff684ed6a189f"
	  "7486d49b9c4bad9ba24b96abf924372c8a8fffb10d55354900a77a3db5f205e1"
	  "b99fcd8660863a159ad4abe40fa48934163ddde542a6585540fd683cbfd8c00f"
	  "12129a284deacc4cdefe58be7137541c047126c8d49e2755ab181ab7e940b0c0")]])
]])
  
// MD5
cond_resolv(Crypto.MD5.name, [[
test_true([[
#pike 7.4
objectp(Crypto.md5())]])
test_eq([[
#pike 7.4
Crypto.md5()->update("")->digest()]],
	[[String.hex2string("d41d8cd98f00b204e9800998ecf8427e")]])
test_eq([[
#pike 7.4
Crypto.md5()->update("a")->digest()]],
	[[String.hex2string("0cc175b9c0f1b6a831c399e269772661")]])
test_eq([[
#pike 7.4
Crypto.md5()->update("abc")->digest()]],
	[[String.hex2string("900150983cd24fb0d6963f7d28e17f72")]])
test_eq([[
#pike 7.4
Crypto.md5()->update("message digest")->digest()]],
	[[String.hex2string("f96b697d7cb7938d525a2f31aaf161d0")]])
test_eq([[
#pike 7.4
Crypto.md5()->update("abcdefghijklmnopqrstuvwxyz")->digest()]],
	[[String.hex2string("c3fcd3d76192e4007dfb496cca67e13b")]])
test_eq([[
#pike 7.4
Crypto.md5()->update("ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			       "abcdefghijklmnopqrstuvwxyz0123456789")->digest()]],
	[[String.hex2string("d174ab98d277d9f5a5611c2c9f419d9f")]])
test_eq([[
#pike 7.4
Crypto.md5()->update("1234567890123456789012345678901234567890"
			       "1234567890123456789012345678901234567890")->digest()]],
	[[String.hex2string("57edf4a22be3c955ac49da2e2107b67a")]])
]])

// MD4
cond_resolv(Crypto.MD4.name, [[
test_true([[
#pike 7.4
objectp(Crypto.md4())]])
test_eq([[
#pike 7.4
Crypto.md4()->update("")->digest()]],
	[[String.hex2string("31d6cfe0d16ae931b73c59d7e0c089c0")]])
test_eq([[
#pike 7.4
Crypto.md4()->update("a")->digest()]],
	[[String.hex2string("bde52cb31de33e46245e05fbdbd6fb24")]])
test_eq([[
#pike 7.4
Crypto.md4()->update("abc")->digest()]],
	[[String.hex2string("a448017aaf21d8525fc10ae87aa6729d")]])
test_eq([[
#pike 7.4
Crypto.md4()->update("message digest")->digest()]],
	[[String.hex2string("d9130a8164549fe818874806e1c7014b")]])
test_eq([[
#pike 7.4
Crypto.md4()->update("abcdefghijklmnopqrstuvwxyz")->digest()]],
	[[String.hex2string("d79e1c308aa5bbcdeea8ed63df412da9")]])
test_eq([[
#pike 7.4
Crypto.md4()->update("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")->digest()]],
	[[String.hex2string("043f8582f241db351ce627e153e7f0e4")]])
test_eq([[
#pike 7.4
Crypto.md4()->update("12345678901234567890123456789012345678901234567890123456789012345678901234567890")->digest()]],
	[[String.hex2string("e33b4ddc9c38f2199c3e7b164fcc0536")]])
]])

// MD2
cond_resolv(Crypto.MD2.name, [[
test_true([[
#pike 7.4
objectp(Crypto.md2())]])
test_eq([[
#pike 7.4
Crypto.md2()->update("")->digest()]],
	[[String.hex2string("8350e5a3e24c153df2275c9f80692773")]])
test_eq([[
#pike 7.4
Crypto.md2()->update("a")->digest()]],
	[[String.hex2string("32ec01ec4a6dac72c0ab96fb34c0b5d1")]])
test_eq([[
#pike 7.4
Crypto.md2()->update("abc")->digest()]],
	[[String.hex2string("da853b0d3f88d99b30283a69e6ded6bb")]])
test_eq([[
#pike 7.4
Crypto.md2()->update("message digest")->digest()]],
	[[String.hex2string("ab4f496bfb2a530b219ff33031fe06b0")]])
test_eq([[
#pike 7.4
Crypto.md2()->update("abcdefghijklmnopqrstuvwxyz")->digest()]],
	[[String.hex2string("4e8ddff3650292ab5a4108c3aa47940b")]])
test_eq([[
#pike 7.4
Crypto.md2()->update("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")->digest()]],
	[[String.hex2string("da33def2a42df13975352846c30338cd")]])
test_eq([[
#pike 7.4
Crypto.md2()->update("1234567890123456789012345678901234567890"
				"1234567890123456789012345678901234567890")->digest()]],
	[[String.hex2string("d5976f79d83d3a0dc9806c3c66f3efd8")]])
]])

// SHA
cond_resolv(Crypto.SHA1.name, [[
test_true([[
#pike 7.4
objectp(Crypto.sha())]])
test_eq([[
#pike 7.4
Crypto.sha()->update("")->digest()]],
	[[String.hex2string("da39a3ee5e6b4b0d3255bfef95601890afd80709")]])
test_eq([[
#pike 7.4
Crypto.sha()->update("abc")->digest()]],
	[[String.hex2string("a9993e364706816aba3e25717850c26c9cd0d89d")]])
test_eq(
#pike 7.4
Crypto.string_to_hex(Crypto.sha()->update("x"*63)->digest()),
        "0ddc4e0cccd9a12850deb5abb0853a4425559fec")
test_eq(
#pike 7.4
Crypto.string_to_hex(Crypto.sha()->update("x"*64)->digest()),
        "bb2fa3ee7afb9f54c6dfb5d021f14b1ffe40c163")
test_eq(
#pike 7.4
Crypto.string_to_hex(Crypto.sha()->update("x"*65)->digest()),
        "78c741ddc482e4cdf8c474a0876347a0905b6233")
test_eq(
#pike 7.4
Crypto.string_to_hex(Crypto.sha()->update("x"*257)->digest()),
        "0796067748b6b0c2af864656a399f7722ef9283a")
]])

// HMAC
cond_resolv(Crypto.MD5.name, [[
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.md5)("")("")]],
        [[String.hex2string("74e6f7298a9c2d168935f58c001bad88")]])
// Test vectors for md5 from RFC-2104
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.md5)("\013" * 16)("Hi There")]],
	[[String.hex2string("9294727a3638bb1c13f48ef8158bfc9d")]])
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.md5)("Jefe")("what do ya want for nothing?")]],
	[[String.hex2string("750c783e6ab0b503eaa86e310a5db738")]])
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.md5)("\252" * 16)("\335" * 50)]],
	[[String.hex2string("56be34521d144c88dbb8c733f0e8b3f6")]])
]])

// Similar test vectors for sha; not verified with other implementations
cond_resolv(Crypto.SHA1.name, [[
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.sha)("")("")]],
        [[String.hex2string("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d")]])
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.sha)("\013" * 16)("Hi There")]],
	[[String.hex2string("675b0b3a1b4ddf4e124872da6c2f632bfed957e9")]])
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.sha)("Jefe")("what do ya want for nothing?")]],
	[[String.hex2string("effcdf6ae5eb2fa2d27416d5f184df9c259a7c79")]])
test_eq([[
#pike 7.4
Crypto.hmac(Crypto.sha)("\252" * 16)("\335" * 50)]],
	[[String.hex2string("d730594d167e35d5956fd8003d0db3d3f46dc7bb")]])
]])

// CRYPT_MD5
cond_resolv(Crypto.crypt_md5, [[
test_true([[
#pike 7.4
Crypto.crypt_md5("")]])
test_eq([[
#pike 7.4
Crypto.crypt_md5("","")]],
        [["$1$$qRPK7m23GJusamGpoGLby/"]])
test_eq([[
#pike 7.4
Crypto.crypt_md5("","$xyz")]],
        [["$1$$qRPK7m23GJusamGpoGLby/"]])
test_eq([[
#pike 7.4
Crypto.crypt_md5("Hello","sl5hO7j4")]],
	[["$1$sl5hO7j4$glLmY.ttmi1hWK8ucIrig."]])
test_eq([[
#pike 7.4
Crypto.crypt_md5("Hello","$1$sl5hO7j4$glLmY.ttmi1hWK8ucIrig.")]],
	[["$1$sl5hO7j4$glLmY.ttmi1hWK8ucIrig."]])
test_eq([[
#pike 7.4
Crypto.crypt_md5("Hellx","$1$sl5hO7j4$glLmY.ttmi1hWK8ucIrig.")]],
	[["$1$sl5hO7j4$3cyvb8g68rK8.kH9Eayvk."]])
]])

// ->name
test_eq(
#pike 7.4
Crypto.invert()->name(),"INVERT")
cond_resolv(Crypto.DES.name, [[
test_eq(
#pike 7.4
Crypto.des()->name(),"DES")
test_eq(
#pike 7.4
Crypto.rijndael()->name(),"RIJNDAEL")
test_eq(
#pike 7.4
Crypto.aes()->name(),"AES")
]])
cond_resolv(Crypto.IDEA.name, [[
test_eq(
#pike 7.4
Crypto.idea()->name(),"IDEA")
]])
cond_resolv(Crypto.CAST.name, [[
test_eq(
#pike 7.4
Crypto.cast()->name(),"CAST")
test_eq(
#pike 7.4
Crypto.arcfour()->name(),"ARCFOUR")
test_eq(
#pike 7.4
Crypto.md5()->name(),"MD5")
cond_resolv(Crypto.MD4.name, [[
test_eq(
#pike 7.4
Crypto.md4()->name(),"MD4")
]])
cond_resolv(Crypto.MD2.name, [[
test_eq(
#pike 7.4
Crypto.md2()->name(),"MD2")
]])
test_eq(
#pike 7.4
Crypto.sha()->name(),"SHA")
]])

// ->query_key_length
test_eq(
#pike 7.4
Crypto.invert()->query_key_length(),0)
cond_resolv(Crypto.DES.name, [[
test_eq(
#pike 7.4
Crypto.des()->query_key_length(),8)
test_eq(
#pike 7.4
Crypto.aes()->query_key_length(),32)
]])
cond_resolv(Crypto.IDEA.name, [[
test_eq(
#pike 7.4
Crypto.idea()->query_key_length(),16)
]])
cond_resolv(Crypto.CAST.name, [[
test_eq(
#pike 7.4
Crypto.cast()->query_key_length(),16)
test_eq(
#pike 7.4
Crypto.arcfour()->query_key_length(),1)
]])

// ->query_block_size
test_eq(
#pike 7.4
Crypto.invert()->query_block_size(),8)
cond_resolv(Crypto.DES.name, [[
test_eq(
#pike 7.4
Crypto.des()->query_block_size(),8)
test_eq(
#pike 7.4
Crypto.aes()->query_block_size(),16)
]])
cond_resolv(Crypto.IDEA.name, [[
test_eq(
#pike 7.4
Crypto.idea()->query_block_size(),8)
]])
cond_resolv(Crypto.CAST.name, [[
test_eq(
#pike 7.4
Crypto.cast()->query_block_size(),8)
test_eq(
#pike 7.4
Crypto.arcfour()->query_block_size,0)
]])

// pipe
cond_resolv(Crypto.IDEA.name, [[
test_eq(
#pike 7.4
 Crypto.pipe( Crypto.des(), Crypto.aes(), Crypto.idea(),
  Crypto.cast(), Crypto.arcfour() )->name(),
  "PIPE(DES, AES, IDEA, CAST, ARCFOUR)")
test_equal(
#pike 7.4
 Crypto.pipe( Crypto.des(), Crypto.aes(), Crypto.idea(),
   Crypto.cast(), Crypto.arcfour() )->query_key_length(),
   ({ 0, 0, 0, 0, 0 }) )
test_eq(
#pike 7.4
 Crypto.pipe( Crypto.des(), Crypto.aes(), Crypto.idea(),
   Crypto.cast(), Crypto.arcfour() )->query_block_size(), 16)
test_eq(
#pike 7.4
 Crypto.pipe( Crypto.des(), Crypto.idea(), Crypto.cast(),
   Crypto.arcfour() )->query_block_size(), 8)
test_eq(
#pike 7.4
 Crypto.pipe( Crypto.des(), Crypto.aes(), Crypto.idea(),
   Crypto.cast() )->
     set_encrypt_key( Crypto.des_parity("A"*8), "B"*32, "C"*16,
       "D"*16 )->crypt_block("F"*16),
       String.hex2string("fc222f3584addf1a5f974e104a3e2231") )
test_eq(
#pike 7.4
 Crypto.pipe( Crypto.des(), Crypto.aes(), Crypto.idea(),
   Crypto.cast() )->
     set_decrypt_key( Crypto.des_parity("A"*8), "B"*32, "C"*16,
       "D"*16 )->
       crypt_block(String.hex2string("fc222f3584addf1a5f974e104a3e2231")),
   "F"*16 )
]])

// Rijndael CBC decrypt
cond_resolv(Crypto.AES.name, [[
test_any([[
#pike 7.4
  object aes_cbc = Crypto.cbc(Crypto.aes());
  aes_cbc->set_decrypt_key(String.hex2string("00000000000000000000000000000000"));
  aes_cbc->set_iv(String.hex2string("00000000000000000000000000000000"));
  string ct = String.hex2string("00000000000000000000000000000000");
  for(int i = 0; i < 10000; i++) {
    ct = aes_cbc->crypt_block(ct);
  }
  return String.string2hex(ct);
]], [[ "faca37e0b0c85373df706e73f7c9af86" ]])
]])

test_do(
#pike 7.4
 add_constant("C", Crypto.substitution()) )

dnl ROT
test_do( C->set_rot_key() )
test_eq( C->encode("Pelle"), "Cryyr" )
test_eq( C->decode("Cryyr"), "Pelle" )
dnl --- Jay Kominek ROT13 conformance test
test_eq( C->encode("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),"NOPQRSTUVWXYZABCDEFGHIJKLM" )
test_eq( C->encode("abcdefghijklmnopqrstuvwxyz"),"nopqrstuvwxyzabcdefghijklm" )
test_eq( C->encode("0123456789-= "), "0123456789-= " )
test_eq( C->encode("!@#$%^&*()_+"), "!@#$%^&*()_+" )
test_eq( C->encode("[]{};':\",./<>?"),[[ "[]{};':\",./<>?" ]])
dnl --- End of Jay Kominek ROT 13 conformance test
test_do( C->set_rot_key(2) )
test_eq( C->encode("Pelle"), "Rgnng" )
test_eq( C->decode("Rgnng"), "Pelle" )
test_do( C->set_rot_key(3, "ABCabcåäö"/1) )
test_eq( C->encode("Abbas"), "aääås" )
test_eq( C->decode("aääås"), "Abbas" )
test_do( C->set_null_chars(0.2, "xyz"/1) )
test_eq( C->decode(C->encode("A"*100)), "A"*100 )

test_do( add_constant("C") )

END_MARKER
